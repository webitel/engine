// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: connection.proto

package workflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FlowService_DistributeAttempt_FullMethodName = "/workflow.FlowService/DistributeAttempt"
	FlowService_ResultAttempt_FullMethodName     = "/workflow.FlowService/ResultAttempt"
	FlowService_StartFlow_FullMethodName         = "/workflow.FlowService/StartFlow"
	FlowService_StartSyncFlow_FullMethodName     = "/workflow.FlowService/StartSyncFlow"
)

// FlowServiceClient is the client API for FlowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowServiceClient interface {
	DistributeAttempt(ctx context.Context, in *DistributeAttemptRequest, opts ...grpc.CallOption) (*DistributeAttemptResponse, error)
	ResultAttempt(ctx context.Context, in *ResultAttemptRequest, opts ...grpc.CallOption) (*ResultAttemptResponse, error)
	StartFlow(ctx context.Context, in *StartFlowRequest, opts ...grpc.CallOption) (*StartFlowResponse, error)
	StartSyncFlow(ctx context.Context, in *StartSyncFlowRequest, opts ...grpc.CallOption) (*StartSyncFlowResponse, error)
}

type flowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowServiceClient(cc grpc.ClientConnInterface) FlowServiceClient {
	return &flowServiceClient{cc}
}

func (c *flowServiceClient) DistributeAttempt(ctx context.Context, in *DistributeAttemptRequest, opts ...grpc.CallOption) (*DistributeAttemptResponse, error) {
	out := new(DistributeAttemptResponse)
	err := c.cc.Invoke(ctx, FlowService_DistributeAttempt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) ResultAttempt(ctx context.Context, in *ResultAttemptRequest, opts ...grpc.CallOption) (*ResultAttemptResponse, error) {
	out := new(ResultAttemptResponse)
	err := c.cc.Invoke(ctx, FlowService_ResultAttempt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) StartFlow(ctx context.Context, in *StartFlowRequest, opts ...grpc.CallOption) (*StartFlowResponse, error) {
	out := new(StartFlowResponse)
	err := c.cc.Invoke(ctx, FlowService_StartFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) StartSyncFlow(ctx context.Context, in *StartSyncFlowRequest, opts ...grpc.CallOption) (*StartSyncFlowResponse, error) {
	out := new(StartSyncFlowResponse)
	err := c.cc.Invoke(ctx, FlowService_StartSyncFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowServiceServer is the server API for FlowService service.
// All implementations must embed UnimplementedFlowServiceServer
// for forward compatibility
type FlowServiceServer interface {
	DistributeAttempt(context.Context, *DistributeAttemptRequest) (*DistributeAttemptResponse, error)
	ResultAttempt(context.Context, *ResultAttemptRequest) (*ResultAttemptResponse, error)
	StartFlow(context.Context, *StartFlowRequest) (*StartFlowResponse, error)
	StartSyncFlow(context.Context, *StartSyncFlowRequest) (*StartSyncFlowResponse, error)
	mustEmbedUnimplementedFlowServiceServer()
}

// UnimplementedFlowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlowServiceServer struct {
}

func (UnimplementedFlowServiceServer) DistributeAttempt(context.Context, *DistributeAttemptRequest) (*DistributeAttemptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeAttempt not implemented")
}
func (UnimplementedFlowServiceServer) ResultAttempt(context.Context, *ResultAttemptRequest) (*ResultAttemptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResultAttempt not implemented")
}
func (UnimplementedFlowServiceServer) StartFlow(context.Context, *StartFlowRequest) (*StartFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFlow not implemented")
}
func (UnimplementedFlowServiceServer) StartSyncFlow(context.Context, *StartSyncFlowRequest) (*StartSyncFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSyncFlow not implemented")
}
func (UnimplementedFlowServiceServer) mustEmbedUnimplementedFlowServiceServer() {}

// UnsafeFlowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowServiceServer will
// result in compilation errors.
type UnsafeFlowServiceServer interface {
	mustEmbedUnimplementedFlowServiceServer()
}

func RegisterFlowServiceServer(s grpc.ServiceRegistrar, srv FlowServiceServer) {
	s.RegisterService(&FlowService_ServiceDesc, srv)
}

func _FlowService_DistributeAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributeAttemptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).DistributeAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_DistributeAttempt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).DistributeAttempt(ctx, req.(*DistributeAttemptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_ResultAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultAttemptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).ResultAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_ResultAttempt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).ResultAttempt(ctx, req.(*ResultAttemptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_StartFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).StartFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_StartFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).StartFlow(ctx, req.(*StartFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_StartSyncFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSyncFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).StartSyncFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_StartSyncFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).StartSyncFlow(ctx, req.(*StartSyncFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlowService_ServiceDesc is the grpc.ServiceDesc for FlowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflow.FlowService",
	HandlerType: (*FlowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DistributeAttempt",
			Handler:    _FlowService_DistributeAttempt_Handler,
		},
		{
			MethodName: "ResultAttempt",
			Handler:    _FlowService_ResultAttempt_Handler,
		},
		{
			MethodName: "StartFlow",
			Handler:    _FlowService_StartFlow_Handler,
		},
		{
			MethodName: "StartSyncFlow",
			Handler:    _FlowService_StartSyncFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connection.proto",
}
