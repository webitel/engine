// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: chat_connection.proto

//conversation - string
// invite_id - string
//

package workflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FlowChatServerService_Start_FullMethodName               = "/workflow.FlowChatServerService/Start"
	FlowChatServerService_Break_FullMethodName               = "/workflow.FlowChatServerService/Break"
	FlowChatServerService_BreakBridge_FullMethodName         = "/workflow.FlowChatServerService/BreakBridge"
	FlowChatServerService_ConfirmationMessage_FullMethodName = "/workflow.FlowChatServerService/ConfirmationMessage"
	FlowChatServerService_TransferChatPlan_FullMethodName    = "/workflow.FlowChatServerService/TransferChatPlan"
)

// FlowChatServerServiceClient is the client API for FlowChatServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowChatServerServiceClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Break(ctx context.Context, in *BreakRequest, opts ...grpc.CallOption) (*BreakResponse, error)
	BreakBridge(ctx context.Context, in *BreakBridgeRequest, opts ...grpc.CallOption) (*BreakBridgeResponse, error)
	ConfirmationMessage(ctx context.Context, in *ConfirmationMessageRequest, opts ...grpc.CallOption) (*ConfirmationMessageResponse, error)
	TransferChatPlan(ctx context.Context, in *TransferChatPlanRequest, opts ...grpc.CallOption) (*TransferChatPlanResponse, error)
}

type flowChatServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowChatServerServiceClient(cc grpc.ClientConnInterface) FlowChatServerServiceClient {
	return &flowChatServerServiceClient{cc}
}

func (c *flowChatServerServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, FlowChatServerService_Start_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowChatServerServiceClient) Break(ctx context.Context, in *BreakRequest, opts ...grpc.CallOption) (*BreakResponse, error) {
	out := new(BreakResponse)
	err := c.cc.Invoke(ctx, FlowChatServerService_Break_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowChatServerServiceClient) BreakBridge(ctx context.Context, in *BreakBridgeRequest, opts ...grpc.CallOption) (*BreakBridgeResponse, error) {
	out := new(BreakBridgeResponse)
	err := c.cc.Invoke(ctx, FlowChatServerService_BreakBridge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowChatServerServiceClient) ConfirmationMessage(ctx context.Context, in *ConfirmationMessageRequest, opts ...grpc.CallOption) (*ConfirmationMessageResponse, error) {
	out := new(ConfirmationMessageResponse)
	err := c.cc.Invoke(ctx, FlowChatServerService_ConfirmationMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowChatServerServiceClient) TransferChatPlan(ctx context.Context, in *TransferChatPlanRequest, opts ...grpc.CallOption) (*TransferChatPlanResponse, error) {
	out := new(TransferChatPlanResponse)
	err := c.cc.Invoke(ctx, FlowChatServerService_TransferChatPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowChatServerServiceServer is the server API for FlowChatServerService service.
// All implementations must embed UnimplementedFlowChatServerServiceServer
// for forward compatibility
type FlowChatServerServiceServer interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Break(context.Context, *BreakRequest) (*BreakResponse, error)
	BreakBridge(context.Context, *BreakBridgeRequest) (*BreakBridgeResponse, error)
	ConfirmationMessage(context.Context, *ConfirmationMessageRequest) (*ConfirmationMessageResponse, error)
	TransferChatPlan(context.Context, *TransferChatPlanRequest) (*TransferChatPlanResponse, error)
	mustEmbedUnimplementedFlowChatServerServiceServer()
}

// UnimplementedFlowChatServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlowChatServerServiceServer struct {
}

func (UnimplementedFlowChatServerServiceServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedFlowChatServerServiceServer) Break(context.Context, *BreakRequest) (*BreakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Break not implemented")
}
func (UnimplementedFlowChatServerServiceServer) BreakBridge(context.Context, *BreakBridgeRequest) (*BreakBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BreakBridge not implemented")
}
func (UnimplementedFlowChatServerServiceServer) ConfirmationMessage(context.Context, *ConfirmationMessageRequest) (*ConfirmationMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmationMessage not implemented")
}
func (UnimplementedFlowChatServerServiceServer) TransferChatPlan(context.Context, *TransferChatPlanRequest) (*TransferChatPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferChatPlan not implemented")
}
func (UnimplementedFlowChatServerServiceServer) mustEmbedUnimplementedFlowChatServerServiceServer() {}

// UnsafeFlowChatServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowChatServerServiceServer will
// result in compilation errors.
type UnsafeFlowChatServerServiceServer interface {
	mustEmbedUnimplementedFlowChatServerServiceServer()
}

func RegisterFlowChatServerServiceServer(s grpc.ServiceRegistrar, srv FlowChatServerServiceServer) {
	s.RegisterService(&FlowChatServerService_ServiceDesc, srv)
}

func _FlowChatServerService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowChatServerServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowChatServerService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowChatServerServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowChatServerService_Break_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BreakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowChatServerServiceServer).Break(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowChatServerService_Break_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowChatServerServiceServer).Break(ctx, req.(*BreakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowChatServerService_BreakBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BreakBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowChatServerServiceServer).BreakBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowChatServerService_BreakBridge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowChatServerServiceServer).BreakBridge(ctx, req.(*BreakBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowChatServerService_ConfirmationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowChatServerServiceServer).ConfirmationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowChatServerService_ConfirmationMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowChatServerServiceServer).ConfirmationMessage(ctx, req.(*ConfirmationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowChatServerService_TransferChatPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferChatPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowChatServerServiceServer).TransferChatPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowChatServerService_TransferChatPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowChatServerServiceServer).TransferChatPlan(ctx, req.(*TransferChatPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlowChatServerService_ServiceDesc is the grpc.ServiceDesc for FlowChatServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowChatServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflow.FlowChatServerService",
	HandlerType: (*FlowChatServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _FlowChatServerService_Start_Handler,
		},
		{
			MethodName: "Break",
			Handler:    _FlowChatServerService_Break_Handler,
		},
		{
			MethodName: "BreakBridge",
			Handler:    _FlowChatServerService_BreakBridge_Handler,
		},
		{
			MethodName: "ConfirmationMessage",
			Handler:    _FlowChatServerService_ConfirmationMessage_Handler,
		},
		{
			MethodName: "TransferChatPlan",
			Handler:    _FlowChatServerService_TransferChatPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat_connection.proto",
}
