// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: connection.proto

package workflow

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlowScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FlowScope) Reset() {
	*x = FlowScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowScope) ProtoMessage() {}

func (x *FlowScope) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowScope.ProtoReflect.Descriptor instead.
func (*FlowScope) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{0}
}

func (x *FlowScope) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *FlowScope) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StartSyncFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaId   uint32            `protobuf:"varint,1,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	DomainId   int64             `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	TimeoutSec uint64            `protobuf:"varint,3,opt,name=timeout_sec,json=timeoutSec,proto3" json:"timeout_sec,omitempty"`
	Variables  map[string]string `protobuf:"bytes,4,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Scope      *FlowScope        `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *StartSyncFlowRequest) Reset() {
	*x = StartSyncFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSyncFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSyncFlowRequest) ProtoMessage() {}

func (x *StartSyncFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSyncFlowRequest.ProtoReflect.Descriptor instead.
func (*StartSyncFlowRequest) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{1}
}

func (x *StartSyncFlowRequest) GetSchemaId() uint32 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

func (x *StartSyncFlowRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *StartSyncFlowRequest) GetTimeoutSec() uint64 {
	if x != nil {
		return x.TimeoutSec
	}
	return 0
}

func (x *StartSyncFlowRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *StartSyncFlowRequest) GetScope() *FlowScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

type StartSyncFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StartSyncFlowResponse) Reset() {
	*x = StartSyncFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSyncFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSyncFlowResponse) ProtoMessage() {}

func (x *StartSyncFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSyncFlowResponse.ProtoReflect.Descriptor instead.
func (*StartSyncFlowResponse) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{2}
}

func (x *StartSyncFlowResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ResultAttemptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaId  int32             `protobuf:"varint,1,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	DomainId  int64             `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Cause     string            `protobuf:"bytes,3,opt,name=cause,proto3" json:"cause,omitempty"`
	Variables map[string]string `protobuf:"bytes,4,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Scope     *FlowScope        `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ResultAttemptRequest) Reset() {
	*x = ResultAttemptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultAttemptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultAttemptRequest) ProtoMessage() {}

func (x *ResultAttemptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultAttemptRequest.ProtoReflect.Descriptor instead.
func (*ResultAttemptRequest) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{3}
}

func (x *ResultAttemptRequest) GetSchemaId() int32 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

func (x *ResultAttemptRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *ResultAttemptRequest) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *ResultAttemptRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *ResultAttemptRequest) GetScope() *FlowScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

type ResultAttemptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*ResultAttemptResponse_Success_
	//	*ResultAttemptResponse_Abandoned_
	//	*ResultAttemptResponse_Retry_
	Result    isResultAttemptResponse_Result `protobuf_oneof:"result"`
	Variables map[string]string              `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id        string                         `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ResultAttemptResponse) Reset() {
	*x = ResultAttemptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultAttemptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultAttemptResponse) ProtoMessage() {}

func (x *ResultAttemptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultAttemptResponse.ProtoReflect.Descriptor instead.
func (*ResultAttemptResponse) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{4}
}

func (m *ResultAttemptResponse) GetResult() isResultAttemptResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *ResultAttemptResponse) GetSuccess() *ResultAttemptResponse_Success {
	if x, ok := x.GetResult().(*ResultAttemptResponse_Success_); ok {
		return x.Success
	}
	return nil
}

func (x *ResultAttemptResponse) GetAbandoned() *ResultAttemptResponse_Abandoned {
	if x, ok := x.GetResult().(*ResultAttemptResponse_Abandoned_); ok {
		return x.Abandoned
	}
	return nil
}

func (x *ResultAttemptResponse) GetRetry() *ResultAttemptResponse_Retry {
	if x, ok := x.GetResult().(*ResultAttemptResponse_Retry_); ok {
		return x.Retry
	}
	return nil
}

func (x *ResultAttemptResponse) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *ResultAttemptResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type isResultAttemptResponse_Result interface {
	isResultAttemptResponse_Result()
}

type ResultAttemptResponse_Success_ struct {
	Success *ResultAttemptResponse_Success `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type ResultAttemptResponse_Abandoned_ struct {
	Abandoned *ResultAttemptResponse_Abandoned `protobuf:"bytes,2,opt,name=abandoned,proto3,oneof"`
}

type ResultAttemptResponse_Retry_ struct {
	Retry *ResultAttemptResponse_Retry `protobuf:"bytes,5,opt,name=retry,proto3,oneof"`
}

func (*ResultAttemptResponse_Success_) isResultAttemptResponse_Result() {}

func (*ResultAttemptResponse_Abandoned_) isResultAttemptResponse_Result() {}

func (*ResultAttemptResponse_Retry_) isResultAttemptResponse_Result() {}

type StartFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaId  uint32            `protobuf:"varint,1,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	DomainId  int64             `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Variables map[string]string `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Scope     *FlowScope        `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *StartFlowRequest) Reset() {
	*x = StartFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartFlowRequest) ProtoMessage() {}

func (x *StartFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartFlowRequest.ProtoReflect.Descriptor instead.
func (*StartFlowRequest) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{5}
}

func (x *StartFlowRequest) GetSchemaId() uint32 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

func (x *StartFlowRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *StartFlowRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *StartFlowRequest) GetScope() *FlowScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

type StartFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StartFlowResponse) Reset() {
	*x = StartFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartFlowResponse) ProtoMessage() {}

func (x *StartFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartFlowResponse.ProtoReflect.Descriptor instead.
func (*StartFlowResponse) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{6}
}

func (x *StartFlowResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DistributeAttemptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaId    int32             `protobuf:"varint,1,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	DomainId    int64             `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Destination string            `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	Display     string            `protobuf:"bytes,4,opt,name=display,proto3" json:"display,omitempty"`
	Variables   map[string]string `protobuf:"bytes,5,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DistributeAttemptRequest) Reset() {
	*x = DistributeAttemptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributeAttemptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributeAttemptRequest) ProtoMessage() {}

func (x *DistributeAttemptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributeAttemptRequest.ProtoReflect.Descriptor instead.
func (*DistributeAttemptRequest) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{7}
}

func (x *DistributeAttemptRequest) GetSchemaId() int32 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

func (x *DistributeAttemptRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *DistributeAttemptRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *DistributeAttemptRequest) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *DistributeAttemptRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

type DistributeAttemptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*DistributeAttemptResponse_Cancel_
	//	*DistributeAttemptResponse_Confirm_
	Result    isDistributeAttemptResponse_Result `protobuf_oneof:"result"`
	Variables map[string]string                  `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id        string                             `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DistributeAttemptResponse) Reset() {
	*x = DistributeAttemptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributeAttemptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributeAttemptResponse) ProtoMessage() {}

func (x *DistributeAttemptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributeAttemptResponse.ProtoReflect.Descriptor instead.
func (*DistributeAttemptResponse) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{8}
}

func (m *DistributeAttemptResponse) GetResult() isDistributeAttemptResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *DistributeAttemptResponse) GetCancel() *DistributeAttemptResponse_Cancel {
	if x, ok := x.GetResult().(*DistributeAttemptResponse_Cancel_); ok {
		return x.Cancel
	}
	return nil
}

func (x *DistributeAttemptResponse) GetConfirm() *DistributeAttemptResponse_Confirm {
	if x, ok := x.GetResult().(*DistributeAttemptResponse_Confirm_); ok {
		return x.Confirm
	}
	return nil
}

func (x *DistributeAttemptResponse) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *DistributeAttemptResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type isDistributeAttemptResponse_Result interface {
	isDistributeAttemptResponse_Result()
}

type DistributeAttemptResponse_Cancel_ struct {
	Cancel *DistributeAttemptResponse_Cancel `protobuf:"bytes,1,opt,name=cancel,proto3,oneof"`
}

type DistributeAttemptResponse_Confirm_ struct {
	Confirm *DistributeAttemptResponse_Confirm `protobuf:"bytes,2,opt,name=confirm,proto3,oneof"`
}

func (*DistributeAttemptResponse_Cancel_) isDistributeAttemptResponse_Result() {}

func (*DistributeAttemptResponse_Confirm_) isDistributeAttemptResponse_Result() {}

type ResultAttemptResponse_Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResultAttemptResponse_Success) Reset() {
	*x = ResultAttemptResponse_Success{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultAttemptResponse_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultAttemptResponse_Success) ProtoMessage() {}

func (x *ResultAttemptResponse_Success) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultAttemptResponse_Success.ProtoReflect.Descriptor instead.
func (*ResultAttemptResponse_Success) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{4, 0}
}

type ResultAttemptResponse_Abandoned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                      string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	MaxAttempts                 uint32 `protobuf:"varint,2,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	WaitBetweenRetries          uint32 `protobuf:"varint,3,opt,name=wait_between_retries,json=waitBetweenRetries,proto3" json:"wait_between_retries,omitempty"`
	ExcludeCurrentCommunication bool   `protobuf:"varint,4,opt,name=exclude_current_communication,json=excludeCurrentCommunication,proto3" json:"exclude_current_communication,omitempty"`
	Redial                      bool   `protobuf:"varint,5,opt,name=redial,proto3" json:"redial,omitempty"`
	AgentId                     int32  `protobuf:"varint,6,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Display                     bool   `protobuf:"varint,7,opt,name=display,proto3" json:"display,omitempty"`
	Description                 string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ResultAttemptResponse_Abandoned) Reset() {
	*x = ResultAttemptResponse_Abandoned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultAttemptResponse_Abandoned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultAttemptResponse_Abandoned) ProtoMessage() {}

func (x *ResultAttemptResponse_Abandoned) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultAttemptResponse_Abandoned.ProtoReflect.Descriptor instead.
func (*ResultAttemptResponse_Abandoned) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{4, 1}
}

func (x *ResultAttemptResponse_Abandoned) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ResultAttemptResponse_Abandoned) GetMaxAttempts() uint32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *ResultAttemptResponse_Abandoned) GetWaitBetweenRetries() uint32 {
	if x != nil {
		return x.WaitBetweenRetries
	}
	return 0
}

func (x *ResultAttemptResponse_Abandoned) GetExcludeCurrentCommunication() bool {
	if x != nil {
		return x.ExcludeCurrentCommunication
	}
	return false
}

func (x *ResultAttemptResponse_Abandoned) GetRedial() bool {
	if x != nil {
		return x.Redial
	}
	return false
}

func (x *ResultAttemptResponse_Abandoned) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *ResultAttemptResponse_Abandoned) GetDisplay() bool {
	if x != nil {
		return x.Display
	}
	return false
}

func (x *ResultAttemptResponse_Abandoned) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ResultAttemptResponse_Retry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextResource bool  `protobuf:"varint,1,opt,name=next_resource,json=nextResource,proto3" json:"next_resource,omitempty"`
	Sleep        int32 `protobuf:"varint,2,opt,name=sleep,proto3" json:"sleep,omitempty"`
	ResourceId   int32 `protobuf:"varint,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *ResultAttemptResponse_Retry) Reset() {
	*x = ResultAttemptResponse_Retry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultAttemptResponse_Retry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultAttemptResponse_Retry) ProtoMessage() {}

func (x *ResultAttemptResponse_Retry) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultAttemptResponse_Retry.ProtoReflect.Descriptor instead.
func (*ResultAttemptResponse_Retry) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{4, 2}
}

func (x *ResultAttemptResponse_Retry) GetNextResource() bool {
	if x != nil {
		return x.NextResource
	}
	return false
}

func (x *ResultAttemptResponse_Retry) GetSleep() int32 {
	if x != nil {
		return x.Sleep
	}
	return 0
}

func (x *ResultAttemptResponse_Retry) GetResourceId() int32 {
	if x != nil {
		return x.ResourceId
	}
	return 0
}

type DistributeAttemptResponse_Cancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description       string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	NextDistributeSec uint32 `protobuf:"varint,2,opt,name=next_distribute_sec,json=nextDistributeSec,proto3" json:"next_distribute_sec,omitempty"`
	Stop              bool   `protobuf:"varint,3,opt,name=stop,proto3" json:"stop,omitempty"`
}

func (x *DistributeAttemptResponse_Cancel) Reset() {
	*x = DistributeAttemptResponse_Cancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributeAttemptResponse_Cancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributeAttemptResponse_Cancel) ProtoMessage() {}

func (x *DistributeAttemptResponse_Cancel) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributeAttemptResponse_Cancel.ProtoReflect.Descriptor instead.
func (*DistributeAttemptResponse_Cancel) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{8, 0}
}

func (x *DistributeAttemptResponse_Cancel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DistributeAttemptResponse_Cancel) GetNextDistributeSec() uint32 {
	if x != nil {
		return x.NextDistributeSec
	}
	return 0
}

func (x *DistributeAttemptResponse_Cancel) GetStop() bool {
	if x != nil {
		return x.Stop
	}
	return false
}

type DistributeAttemptResponse_Confirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Display     string `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
}

func (x *DistributeAttemptResponse_Confirm) Reset() {
	*x = DistributeAttemptResponse_Confirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributeAttemptResponse_Confirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributeAttemptResponse_Confirm) ProtoMessage() {}

func (x *DistributeAttemptResponse_Confirm) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributeAttemptResponse_Confirm.ProtoReflect.Descriptor instead.
func (*DistributeAttemptResponse_Confirm) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{8, 1}
}

func (x *DistributeAttemptResponse_Confirm) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *DistributeAttemptResponse_Confirm) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

var File_connection_proto protoreflect.FileDescriptor

var file_connection_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x35, 0x0a, 0x09,
	0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xa7, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12, 0x4b, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x1a,
	0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x27, 0x0a,
	0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9c, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x4b, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa, 0x06, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x12,
	0x3d, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x4c,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x09, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0xab, 0x02, 0x0a, 0x09, 0x41, 0x62, 0x61, 0x6e,
	0x64, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x77, 0x61, 0x69, 0x74, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x42, 0x0a, 0x1d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x64, 0x69, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x64, 0x69, 0x61, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x63, 0x0a, 0x05, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xfe, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x47, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x23, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9f, 0x02, 0x0a, 0x18, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x4f, 0x0a, 0x09, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8b, 0x04, 0x0a, 0x19, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x47,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x50, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x6e, 0x0a, 0x06, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x53, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x1a, 0x45, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xdd, 0x02, 0x0a, 0x0b, 0x46, 0x6c, 0x6f,
	0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x22, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x1e, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x83, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x22, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0xa2, 0x02, 0x03, 0x57, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0xca, 0x02, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0xe2, 0x02, 0x14, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_connection_proto_rawDescOnce sync.Once
	file_connection_proto_rawDescData = file_connection_proto_rawDesc
)

func file_connection_proto_rawDescGZIP() []byte {
	file_connection_proto_rawDescOnce.Do(func() {
		file_connection_proto_rawDescData = protoimpl.X.CompressGZIP(file_connection_proto_rawDescData)
	})
	return file_connection_proto_rawDescData
}

var file_connection_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_connection_proto_goTypes = []interface{}{
	(*FlowScope)(nil),                        // 0: workflow.FlowScope
	(*StartSyncFlowRequest)(nil),             // 1: workflow.StartSyncFlowRequest
	(*StartSyncFlowResponse)(nil),            // 2: workflow.StartSyncFlowResponse
	(*ResultAttemptRequest)(nil),             // 3: workflow.ResultAttemptRequest
	(*ResultAttemptResponse)(nil),            // 4: workflow.ResultAttemptResponse
	(*StartFlowRequest)(nil),                 // 5: workflow.StartFlowRequest
	(*StartFlowResponse)(nil),                // 6: workflow.StartFlowResponse
	(*DistributeAttemptRequest)(nil),         // 7: workflow.DistributeAttemptRequest
	(*DistributeAttemptResponse)(nil),        // 8: workflow.DistributeAttemptResponse
	nil,                                      // 9: workflow.StartSyncFlowRequest.VariablesEntry
	nil,                                      // 10: workflow.ResultAttemptRequest.VariablesEntry
	(*ResultAttemptResponse_Success)(nil),    // 11: workflow.ResultAttemptResponse.Success
	(*ResultAttemptResponse_Abandoned)(nil),  // 12: workflow.ResultAttemptResponse.Abandoned
	(*ResultAttemptResponse_Retry)(nil),      // 13: workflow.ResultAttemptResponse.Retry
	nil,                                      // 14: workflow.ResultAttemptResponse.VariablesEntry
	nil,                                      // 15: workflow.StartFlowRequest.VariablesEntry
	nil,                                      // 16: workflow.DistributeAttemptRequest.VariablesEntry
	(*DistributeAttemptResponse_Cancel)(nil), // 17: workflow.DistributeAttemptResponse.Cancel
	(*DistributeAttemptResponse_Confirm)(nil), // 18: workflow.DistributeAttemptResponse.Confirm
	nil, // 19: workflow.DistributeAttemptResponse.VariablesEntry
}
var file_connection_proto_depIdxs = []int32{
	9,  // 0: workflow.StartSyncFlowRequest.variables:type_name -> workflow.StartSyncFlowRequest.VariablesEntry
	0,  // 1: workflow.StartSyncFlowRequest.scope:type_name -> workflow.FlowScope
	10, // 2: workflow.ResultAttemptRequest.variables:type_name -> workflow.ResultAttemptRequest.VariablesEntry
	0,  // 3: workflow.ResultAttemptRequest.scope:type_name -> workflow.FlowScope
	11, // 4: workflow.ResultAttemptResponse.success:type_name -> workflow.ResultAttemptResponse.Success
	12, // 5: workflow.ResultAttemptResponse.abandoned:type_name -> workflow.ResultAttemptResponse.Abandoned
	13, // 6: workflow.ResultAttemptResponse.retry:type_name -> workflow.ResultAttemptResponse.Retry
	14, // 7: workflow.ResultAttemptResponse.variables:type_name -> workflow.ResultAttemptResponse.VariablesEntry
	15, // 8: workflow.StartFlowRequest.variables:type_name -> workflow.StartFlowRequest.VariablesEntry
	0,  // 9: workflow.StartFlowRequest.scope:type_name -> workflow.FlowScope
	16, // 10: workflow.DistributeAttemptRequest.variables:type_name -> workflow.DistributeAttemptRequest.VariablesEntry
	17, // 11: workflow.DistributeAttemptResponse.cancel:type_name -> workflow.DistributeAttemptResponse.Cancel
	18, // 12: workflow.DistributeAttemptResponse.confirm:type_name -> workflow.DistributeAttemptResponse.Confirm
	19, // 13: workflow.DistributeAttemptResponse.variables:type_name -> workflow.DistributeAttemptResponse.VariablesEntry
	7,  // 14: workflow.FlowService.DistributeAttempt:input_type -> workflow.DistributeAttemptRequest
	3,  // 15: workflow.FlowService.ResultAttempt:input_type -> workflow.ResultAttemptRequest
	5,  // 16: workflow.FlowService.StartFlow:input_type -> workflow.StartFlowRequest
	1,  // 17: workflow.FlowService.StartSyncFlow:input_type -> workflow.StartSyncFlowRequest
	8,  // 18: workflow.FlowService.DistributeAttempt:output_type -> workflow.DistributeAttemptResponse
	4,  // 19: workflow.FlowService.ResultAttempt:output_type -> workflow.ResultAttemptResponse
	6,  // 20: workflow.FlowService.StartFlow:output_type -> workflow.StartFlowResponse
	2,  // 21: workflow.FlowService.StartSyncFlow:output_type -> workflow.StartSyncFlowResponse
	18, // [18:22] is the sub-list for method output_type
	14, // [14:18] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_connection_proto_init() }
func file_connection_proto_init() {
	if File_connection_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_connection_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSyncFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSyncFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultAttemptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultAttemptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributeAttemptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributeAttemptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultAttemptResponse_Success); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultAttemptResponse_Abandoned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultAttemptResponse_Retry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributeAttemptResponse_Cancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributeAttemptResponse_Confirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_connection_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ResultAttemptResponse_Success_)(nil),
		(*ResultAttemptResponse_Abandoned_)(nil),
		(*ResultAttemptResponse_Retry_)(nil),
	}
	file_connection_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*DistributeAttemptResponse_Cancel_)(nil),
		(*DistributeAttemptResponse_Confirm_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_connection_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_connection_proto_goTypes,
		DependencyIndexes: file_connection_proto_depIdxs,
		MessageInfos:      file_connection_proto_msgTypes,
	}.Build()
	File_connection_proto = out.File
	file_connection_proto_rawDesc = nil
	file_connection_proto_goTypes = nil
	file_connection_proto_depIdxs = nil
}
