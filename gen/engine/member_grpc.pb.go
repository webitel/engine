// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: member.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MemberService_CreateMember_FullMethodName          = "/engine.MemberService/CreateMember"
	MemberService_CreateMemberBulk_FullMethodName      = "/engine.MemberService/CreateMemberBulk"
	MemberService_SearchMembers_FullMethodName         = "/engine.MemberService/SearchMembers"
	MemberService_PatchMemberOne_FullMethodName        = "/engine.MemberService/PatchMemberOne"
	MemberService_SearchMemberInQueue_FullMethodName   = "/engine.MemberService/SearchMemberInQueue"
	MemberService_ReadMember_FullMethodName            = "/engine.MemberService/ReadMember"
	MemberService_UpdateMember_FullMethodName          = "/engine.MemberService/UpdateMember"
	MemberService_PatchMember_FullMethodName           = "/engine.MemberService/PatchMember"
	MemberService_DeleteMember_FullMethodName          = "/engine.MemberService/DeleteMember"
	MemberService_DeleteMembers_FullMethodName         = "/engine.MemberService/DeleteMembers"
	MemberService_DeleteAllMembers_FullMethodName      = "/engine.MemberService/DeleteAllMembers"
	MemberService_ResetMembers_FullMethodName          = "/engine.MemberService/ResetMembers"
	MemberService_SearchMemberAttempts_FullMethodName  = "/engine.MemberService/SearchMemberAttempts"
	MemberService_SearchAttempts_FullMethodName        = "/engine.MemberService/SearchAttempts"
	MemberService_ResetActiveAttempts_FullMethodName   = "/engine.MemberService/ResetActiveAttempts"
	MemberService_SearchAttemptsHistory_FullMethodName = "/engine.MemberService/SearchAttemptsHistory"
	MemberService_AttemptsRenewalResult_FullMethodName = "/engine.MemberService/AttemptsRenewalResult"
	MemberService_AttemptResult_FullMethodName         = "/engine.MemberService/AttemptResult"
	MemberService_AttemptCallback_FullMethodName       = "/engine.MemberService/AttemptCallback"
	MemberService_CreateAttempt_FullMethodName         = "/engine.MemberService/CreateAttempt"
)

// MemberServiceClient is the client API for MemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberServiceClient interface {
	// Create Member
	CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*MemberInQueue, error)
	// Create Member
	CreateMemberBulk(ctx context.Context, in *CreateMemberBulkRequest, opts ...grpc.CallOption) (*MemberBulkResponse, error)
	// Search of Member
	SearchMembers(ctx context.Context, in *SearchMembersRequest, opts ...grpc.CallOption) (*ListMember, error)
	PatchMemberOne(ctx context.Context, in *PatchMemberOneRequest, opts ...grpc.CallOption) (*MemberInQueue, error)
	// List of Member
	SearchMemberInQueue(ctx context.Context, in *SearchMemberInQueueRequest, opts ...grpc.CallOption) (*ListMember, error)
	// ReadQueueRouting
	ReadMember(ctx context.Context, in *ReadMemberRequest, opts ...grpc.CallOption) (*MemberInQueue, error)
	// UpdateMember
	UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*MemberInQueue, error)
	// Patch Member
	PatchMember(ctx context.Context, in *PatchMemberRequest, opts ...grpc.CallOption) (*MemberInQueue, error)
	// DeleteMember
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*MemberInQueue, error)
	// DeleteMembers
	DeleteMembers(ctx context.Context, in *DeleteMembersRequest, opts ...grpc.CallOption) (*ListMember, error)
	// DeleteAllMembers
	DeleteAllMembers(ctx context.Context, in *DeleteAllMembersRequest, opts ...grpc.CallOption) (*ListMember, error)
	// ResetMembers
	ResetMembers(ctx context.Context, in *ResetMembersRequest, opts ...grpc.CallOption) (*ResetMembersResponse, error)
	// SearchMemberAttempts
	SearchMemberAttempts(ctx context.Context, in *SearchMemberAttemptsRequest, opts ...grpc.CallOption) (*ListMemberAttempt, error)
	// SearchAttempts
	SearchAttempts(ctx context.Context, in *SearchAttemptsRequest, opts ...grpc.CallOption) (*ListAttempt, error)
	ResetActiveAttempts(ctx context.Context, in *ResetActiveAttemptsRequest, opts ...grpc.CallOption) (*ResetActiveAttemptsResponse, error)
	// SearchMemberAttempts
	SearchAttemptsHistory(ctx context.Context, in *SearchAttemptsRequest, opts ...grpc.CallOption) (*ListHistoryAttempt, error)
	AttemptsRenewalResult(ctx context.Context, in *AttemptRenewalResultRequest, opts ...grpc.CallOption) (*AttemptRenewalResultResponse, error)
	AttemptResult(ctx context.Context, in *AttemptResultRequest, opts ...grpc.CallOption) (*AttemptResultResponse, error)
	AttemptCallback(ctx context.Context, in *AttemptCallbackRequest, opts ...grpc.CallOption) (*AttemptResultResponse, error)
	// Offline queue
	CreateAttempt(ctx context.Context, in *CreateAttemptRequest, opts ...grpc.CallOption) (*CreateAttemptResponse, error)
}

type memberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberServiceClient(cc grpc.ClientConnInterface) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*MemberInQueue, error) {
	out := new(MemberInQueue)
	err := c.cc.Invoke(ctx, MemberService_CreateMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CreateMemberBulk(ctx context.Context, in *CreateMemberBulkRequest, opts ...grpc.CallOption) (*MemberBulkResponse, error) {
	out := new(MemberBulkResponse)
	err := c.cc.Invoke(ctx, MemberService_CreateMemberBulk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SearchMembers(ctx context.Context, in *SearchMembersRequest, opts ...grpc.CallOption) (*ListMember, error) {
	out := new(ListMember)
	err := c.cc.Invoke(ctx, MemberService_SearchMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) PatchMemberOne(ctx context.Context, in *PatchMemberOneRequest, opts ...grpc.CallOption) (*MemberInQueue, error) {
	out := new(MemberInQueue)
	err := c.cc.Invoke(ctx, MemberService_PatchMemberOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SearchMemberInQueue(ctx context.Context, in *SearchMemberInQueueRequest, opts ...grpc.CallOption) (*ListMember, error) {
	out := new(ListMember)
	err := c.cc.Invoke(ctx, MemberService_SearchMemberInQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ReadMember(ctx context.Context, in *ReadMemberRequest, opts ...grpc.CallOption) (*MemberInQueue, error) {
	out := new(MemberInQueue)
	err := c.cc.Invoke(ctx, MemberService_ReadMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*MemberInQueue, error) {
	out := new(MemberInQueue)
	err := c.cc.Invoke(ctx, MemberService_UpdateMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) PatchMember(ctx context.Context, in *PatchMemberRequest, opts ...grpc.CallOption) (*MemberInQueue, error) {
	out := new(MemberInQueue)
	err := c.cc.Invoke(ctx, MemberService_PatchMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*MemberInQueue, error) {
	out := new(MemberInQueue)
	err := c.cc.Invoke(ctx, MemberService_DeleteMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DeleteMembers(ctx context.Context, in *DeleteMembersRequest, opts ...grpc.CallOption) (*ListMember, error) {
	out := new(ListMember)
	err := c.cc.Invoke(ctx, MemberService_DeleteMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DeleteAllMembers(ctx context.Context, in *DeleteAllMembersRequest, opts ...grpc.CallOption) (*ListMember, error) {
	out := new(ListMember)
	err := c.cc.Invoke(ctx, MemberService_DeleteAllMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ResetMembers(ctx context.Context, in *ResetMembersRequest, opts ...grpc.CallOption) (*ResetMembersResponse, error) {
	out := new(ResetMembersResponse)
	err := c.cc.Invoke(ctx, MemberService_ResetMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SearchMemberAttempts(ctx context.Context, in *SearchMemberAttemptsRequest, opts ...grpc.CallOption) (*ListMemberAttempt, error) {
	out := new(ListMemberAttempt)
	err := c.cc.Invoke(ctx, MemberService_SearchMemberAttempts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SearchAttempts(ctx context.Context, in *SearchAttemptsRequest, opts ...grpc.CallOption) (*ListAttempt, error) {
	out := new(ListAttempt)
	err := c.cc.Invoke(ctx, MemberService_SearchAttempts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ResetActiveAttempts(ctx context.Context, in *ResetActiveAttemptsRequest, opts ...grpc.CallOption) (*ResetActiveAttemptsResponse, error) {
	out := new(ResetActiveAttemptsResponse)
	err := c.cc.Invoke(ctx, MemberService_ResetActiveAttempts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SearchAttemptsHistory(ctx context.Context, in *SearchAttemptsRequest, opts ...grpc.CallOption) (*ListHistoryAttempt, error) {
	out := new(ListHistoryAttempt)
	err := c.cc.Invoke(ctx, MemberService_SearchAttemptsHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AttemptsRenewalResult(ctx context.Context, in *AttemptRenewalResultRequest, opts ...grpc.CallOption) (*AttemptRenewalResultResponse, error) {
	out := new(AttemptRenewalResultResponse)
	err := c.cc.Invoke(ctx, MemberService_AttemptsRenewalResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AttemptResult(ctx context.Context, in *AttemptResultRequest, opts ...grpc.CallOption) (*AttemptResultResponse, error) {
	out := new(AttemptResultResponse)
	err := c.cc.Invoke(ctx, MemberService_AttemptResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AttemptCallback(ctx context.Context, in *AttemptCallbackRequest, opts ...grpc.CallOption) (*AttemptResultResponse, error) {
	out := new(AttemptResultResponse)
	err := c.cc.Invoke(ctx, MemberService_AttemptCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CreateAttempt(ctx context.Context, in *CreateAttemptRequest, opts ...grpc.CallOption) (*CreateAttemptResponse, error) {
	out := new(CreateAttemptResponse)
	err := c.cc.Invoke(ctx, MemberService_CreateAttempt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServiceServer is the server API for MemberService service.
// All implementations must embed UnimplementedMemberServiceServer
// for forward compatibility
type MemberServiceServer interface {
	// Create Member
	CreateMember(context.Context, *CreateMemberRequest) (*MemberInQueue, error)
	// Create Member
	CreateMemberBulk(context.Context, *CreateMemberBulkRequest) (*MemberBulkResponse, error)
	// Search of Member
	SearchMembers(context.Context, *SearchMembersRequest) (*ListMember, error)
	PatchMemberOne(context.Context, *PatchMemberOneRequest) (*MemberInQueue, error)
	// List of Member
	SearchMemberInQueue(context.Context, *SearchMemberInQueueRequest) (*ListMember, error)
	// ReadQueueRouting
	ReadMember(context.Context, *ReadMemberRequest) (*MemberInQueue, error)
	// UpdateMember
	UpdateMember(context.Context, *UpdateMemberRequest) (*MemberInQueue, error)
	// Patch Member
	PatchMember(context.Context, *PatchMemberRequest) (*MemberInQueue, error)
	// DeleteMember
	DeleteMember(context.Context, *DeleteMemberRequest) (*MemberInQueue, error)
	// DeleteMembers
	DeleteMembers(context.Context, *DeleteMembersRequest) (*ListMember, error)
	// DeleteAllMembers
	DeleteAllMembers(context.Context, *DeleteAllMembersRequest) (*ListMember, error)
	// ResetMembers
	ResetMembers(context.Context, *ResetMembersRequest) (*ResetMembersResponse, error)
	// SearchMemberAttempts
	SearchMemberAttempts(context.Context, *SearchMemberAttemptsRequest) (*ListMemberAttempt, error)
	// SearchAttempts
	SearchAttempts(context.Context, *SearchAttemptsRequest) (*ListAttempt, error)
	ResetActiveAttempts(context.Context, *ResetActiveAttemptsRequest) (*ResetActiveAttemptsResponse, error)
	// SearchMemberAttempts
	SearchAttemptsHistory(context.Context, *SearchAttemptsRequest) (*ListHistoryAttempt, error)
	AttemptsRenewalResult(context.Context, *AttemptRenewalResultRequest) (*AttemptRenewalResultResponse, error)
	AttemptResult(context.Context, *AttemptResultRequest) (*AttemptResultResponse, error)
	AttemptCallback(context.Context, *AttemptCallbackRequest) (*AttemptResultResponse, error)
	// Offline queue
	CreateAttempt(context.Context, *CreateAttemptRequest) (*CreateAttemptResponse, error)
	mustEmbedUnimplementedMemberServiceServer()
}

// UnimplementedMemberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberServiceServer struct {
}

func (UnimplementedMemberServiceServer) CreateMember(context.Context, *CreateMemberRequest) (*MemberInQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMember not implemented")
}
func (UnimplementedMemberServiceServer) CreateMemberBulk(context.Context, *CreateMemberBulkRequest) (*MemberBulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemberBulk not implemented")
}
func (UnimplementedMemberServiceServer) SearchMembers(context.Context, *SearchMembersRequest) (*ListMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMembers not implemented")
}
func (UnimplementedMemberServiceServer) PatchMemberOne(context.Context, *PatchMemberOneRequest) (*MemberInQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchMemberOne not implemented")
}
func (UnimplementedMemberServiceServer) SearchMemberInQueue(context.Context, *SearchMemberInQueueRequest) (*ListMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMemberInQueue not implemented")
}
func (UnimplementedMemberServiceServer) ReadMember(context.Context, *ReadMemberRequest) (*MemberInQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMember not implemented")
}
func (UnimplementedMemberServiceServer) UpdateMember(context.Context, *UpdateMemberRequest) (*MemberInQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedMemberServiceServer) PatchMember(context.Context, *PatchMemberRequest) (*MemberInQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchMember not implemented")
}
func (UnimplementedMemberServiceServer) DeleteMember(context.Context, *DeleteMemberRequest) (*MemberInQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedMemberServiceServer) DeleteMembers(context.Context, *DeleteMembersRequest) (*ListMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMembers not implemented")
}
func (UnimplementedMemberServiceServer) DeleteAllMembers(context.Context, *DeleteAllMembersRequest) (*ListMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllMembers not implemented")
}
func (UnimplementedMemberServiceServer) ResetMembers(context.Context, *ResetMembersRequest) (*ResetMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetMembers not implemented")
}
func (UnimplementedMemberServiceServer) SearchMemberAttempts(context.Context, *SearchMemberAttemptsRequest) (*ListMemberAttempt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMemberAttempts not implemented")
}
func (UnimplementedMemberServiceServer) SearchAttempts(context.Context, *SearchAttemptsRequest) (*ListAttempt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAttempts not implemented")
}
func (UnimplementedMemberServiceServer) ResetActiveAttempts(context.Context, *ResetActiveAttemptsRequest) (*ResetActiveAttemptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetActiveAttempts not implemented")
}
func (UnimplementedMemberServiceServer) SearchAttemptsHistory(context.Context, *SearchAttemptsRequest) (*ListHistoryAttempt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAttemptsHistory not implemented")
}
func (UnimplementedMemberServiceServer) AttemptsRenewalResult(context.Context, *AttemptRenewalResultRequest) (*AttemptRenewalResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttemptsRenewalResult not implemented")
}
func (UnimplementedMemberServiceServer) AttemptResult(context.Context, *AttemptResultRequest) (*AttemptResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttemptResult not implemented")
}
func (UnimplementedMemberServiceServer) AttemptCallback(context.Context, *AttemptCallbackRequest) (*AttemptResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttemptCallback not implemented")
}
func (UnimplementedMemberServiceServer) CreateAttempt(context.Context, *CreateAttemptRequest) (*CreateAttemptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttempt not implemented")
}
func (UnimplementedMemberServiceServer) mustEmbedUnimplementedMemberServiceServer() {}

// UnsafeMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberServiceServer will
// result in compilation errors.
type UnsafeMemberServiceServer interface {
	mustEmbedUnimplementedMemberServiceServer()
}

func RegisterMemberServiceServer(s grpc.ServiceRegistrar, srv MemberServiceServer) {
	s.RegisterService(&MemberService_ServiceDesc, srv)
}

func _MemberService_CreateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CreateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_CreateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CreateMember(ctx, req.(*CreateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CreateMemberBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CreateMemberBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_CreateMemberBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CreateMemberBulk(ctx, req.(*CreateMemberBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SearchMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SearchMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_SearchMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SearchMembers(ctx, req.(*SearchMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_PatchMemberOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchMemberOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).PatchMemberOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_PatchMemberOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).PatchMemberOne(ctx, req.(*PatchMemberOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SearchMemberInQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMemberInQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SearchMemberInQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_SearchMemberInQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SearchMemberInQueue(ctx, req.(*SearchMemberInQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ReadMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ReadMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ReadMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ReadMember(ctx, req.(*ReadMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_UpdateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UpdateMember(ctx, req.(*UpdateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_PatchMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).PatchMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_PatchMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).PatchMember(ctx, req.(*PatchMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DeleteMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DeleteMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_DeleteMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DeleteMembers(ctx, req.(*DeleteMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DeleteAllMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DeleteAllMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_DeleteAllMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DeleteAllMembers(ctx, req.(*DeleteAllMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ResetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ResetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ResetMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ResetMembers(ctx, req.(*ResetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SearchMemberAttempts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMemberAttemptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SearchMemberAttempts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_SearchMemberAttempts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SearchMemberAttempts(ctx, req.(*SearchMemberAttemptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SearchAttempts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAttemptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SearchAttempts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_SearchAttempts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SearchAttempts(ctx, req.(*SearchAttemptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ResetActiveAttempts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetActiveAttemptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ResetActiveAttempts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ResetActiveAttempts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ResetActiveAttempts(ctx, req.(*ResetActiveAttemptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SearchAttemptsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAttemptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SearchAttemptsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_SearchAttemptsHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SearchAttemptsHistory(ctx, req.(*SearchAttemptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AttemptsRenewalResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttemptRenewalResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AttemptsRenewalResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_AttemptsRenewalResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AttemptsRenewalResult(ctx, req.(*AttemptRenewalResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AttemptResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttemptResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AttemptResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_AttemptResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AttemptResult(ctx, req.(*AttemptResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AttemptCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttemptCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AttemptCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_AttemptCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AttemptCallback(ctx, req.(*AttemptCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CreateAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttemptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CreateAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_CreateAttempt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CreateAttempt(ctx, req.(*CreateAttemptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberService_ServiceDesc is the grpc.ServiceDesc for MemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMember",
			Handler:    _MemberService_CreateMember_Handler,
		},
		{
			MethodName: "CreateMemberBulk",
			Handler:    _MemberService_CreateMemberBulk_Handler,
		},
		{
			MethodName: "SearchMembers",
			Handler:    _MemberService_SearchMembers_Handler,
		},
		{
			MethodName: "PatchMemberOne",
			Handler:    _MemberService_PatchMemberOne_Handler,
		},
		{
			MethodName: "SearchMemberInQueue",
			Handler:    _MemberService_SearchMemberInQueue_Handler,
		},
		{
			MethodName: "ReadMember",
			Handler:    _MemberService_ReadMember_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _MemberService_UpdateMember_Handler,
		},
		{
			MethodName: "PatchMember",
			Handler:    _MemberService_PatchMember_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _MemberService_DeleteMember_Handler,
		},
		{
			MethodName: "DeleteMembers",
			Handler:    _MemberService_DeleteMembers_Handler,
		},
		{
			MethodName: "DeleteAllMembers",
			Handler:    _MemberService_DeleteAllMembers_Handler,
		},
		{
			MethodName: "ResetMembers",
			Handler:    _MemberService_ResetMembers_Handler,
		},
		{
			MethodName: "SearchMemberAttempts",
			Handler:    _MemberService_SearchMemberAttempts_Handler,
		},
		{
			MethodName: "SearchAttempts",
			Handler:    _MemberService_SearchAttempts_Handler,
		},
		{
			MethodName: "ResetActiveAttempts",
			Handler:    _MemberService_ResetActiveAttempts_Handler,
		},
		{
			MethodName: "SearchAttemptsHistory",
			Handler:    _MemberService_SearchAttemptsHistory_Handler,
		},
		{
			MethodName: "AttemptsRenewalResult",
			Handler:    _MemberService_AttemptsRenewalResult_Handler,
		},
		{
			MethodName: "AttemptResult",
			Handler:    _MemberService_AttemptResult_Handler,
		},
		{
			MethodName: "AttemptCallback",
			Handler:    _MemberService_AttemptCallback_Handler,
		},
		{
			MethodName: "CreateAttempt",
			Handler:    _MemberService_CreateAttempt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "member.proto",
}
