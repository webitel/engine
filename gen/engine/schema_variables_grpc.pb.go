// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: schema_variables.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SchemaVariablesService_CreateSchemaVariable_FullMethodName = "/engine.SchemaVariablesService/CreateSchemaVariable"
	SchemaVariablesService_SearchSchemaVariable_FullMethodName = "/engine.SchemaVariablesService/SearchSchemaVariable"
	SchemaVariablesService_ReadSchemaVariable_FullMethodName   = "/engine.SchemaVariablesService/ReadSchemaVariable"
	SchemaVariablesService_UpdateSchemaVariable_FullMethodName = "/engine.SchemaVariablesService/UpdateSchemaVariable"
	SchemaVariablesService_PatchSchemaVariable_FullMethodName  = "/engine.SchemaVariablesService/PatchSchemaVariable"
	SchemaVariablesService_DeleteSchemaVariable_FullMethodName = "/engine.SchemaVariablesService/DeleteSchemaVariable"
)

// SchemaVariablesServiceClient is the client API for SchemaVariablesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemaVariablesServiceClient interface {
	CreateSchemaVariable(ctx context.Context, in *CreateSchemaVariableRequest, opts ...grpc.CallOption) (*SchemaVariable, error)
	SearchSchemaVariable(ctx context.Context, in *SearchSchemaVariableRequest, opts ...grpc.CallOption) (*ListSchemaVariable, error)
	ReadSchemaVariable(ctx context.Context, in *ReadSchemaVariableRequest, opts ...grpc.CallOption) (*SchemaVariable, error)
	UpdateSchemaVariable(ctx context.Context, in *UpdateSchemaVariableRequest, opts ...grpc.CallOption) (*SchemaVariable, error)
	PatchSchemaVariable(ctx context.Context, in *PatchSchemaVariableRequest, opts ...grpc.CallOption) (*SchemaVariable, error)
	DeleteSchemaVariable(ctx context.Context, in *DeleteSchemaVariableRequest, opts ...grpc.CallOption) (*SchemaVariable, error)
}

type schemaVariablesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemaVariablesServiceClient(cc grpc.ClientConnInterface) SchemaVariablesServiceClient {
	return &schemaVariablesServiceClient{cc}
}

func (c *schemaVariablesServiceClient) CreateSchemaVariable(ctx context.Context, in *CreateSchemaVariableRequest, opts ...grpc.CallOption) (*SchemaVariable, error) {
	out := new(SchemaVariable)
	err := c.cc.Invoke(ctx, SchemaVariablesService_CreateSchemaVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaVariablesServiceClient) SearchSchemaVariable(ctx context.Context, in *SearchSchemaVariableRequest, opts ...grpc.CallOption) (*ListSchemaVariable, error) {
	out := new(ListSchemaVariable)
	err := c.cc.Invoke(ctx, SchemaVariablesService_SearchSchemaVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaVariablesServiceClient) ReadSchemaVariable(ctx context.Context, in *ReadSchemaVariableRequest, opts ...grpc.CallOption) (*SchemaVariable, error) {
	out := new(SchemaVariable)
	err := c.cc.Invoke(ctx, SchemaVariablesService_ReadSchemaVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaVariablesServiceClient) UpdateSchemaVariable(ctx context.Context, in *UpdateSchemaVariableRequest, opts ...grpc.CallOption) (*SchemaVariable, error) {
	out := new(SchemaVariable)
	err := c.cc.Invoke(ctx, SchemaVariablesService_UpdateSchemaVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaVariablesServiceClient) PatchSchemaVariable(ctx context.Context, in *PatchSchemaVariableRequest, opts ...grpc.CallOption) (*SchemaVariable, error) {
	out := new(SchemaVariable)
	err := c.cc.Invoke(ctx, SchemaVariablesService_PatchSchemaVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaVariablesServiceClient) DeleteSchemaVariable(ctx context.Context, in *DeleteSchemaVariableRequest, opts ...grpc.CallOption) (*SchemaVariable, error) {
	out := new(SchemaVariable)
	err := c.cc.Invoke(ctx, SchemaVariablesService_DeleteSchemaVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaVariablesServiceServer is the server API for SchemaVariablesService service.
// All implementations must embed UnimplementedSchemaVariablesServiceServer
// for forward compatibility
type SchemaVariablesServiceServer interface {
	CreateSchemaVariable(context.Context, *CreateSchemaVariableRequest) (*SchemaVariable, error)
	SearchSchemaVariable(context.Context, *SearchSchemaVariableRequest) (*ListSchemaVariable, error)
	ReadSchemaVariable(context.Context, *ReadSchemaVariableRequest) (*SchemaVariable, error)
	UpdateSchemaVariable(context.Context, *UpdateSchemaVariableRequest) (*SchemaVariable, error)
	PatchSchemaVariable(context.Context, *PatchSchemaVariableRequest) (*SchemaVariable, error)
	DeleteSchemaVariable(context.Context, *DeleteSchemaVariableRequest) (*SchemaVariable, error)
	mustEmbedUnimplementedSchemaVariablesServiceServer()
}

// UnimplementedSchemaVariablesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchemaVariablesServiceServer struct {
}

func (UnimplementedSchemaVariablesServiceServer) CreateSchemaVariable(context.Context, *CreateSchemaVariableRequest) (*SchemaVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchemaVariable not implemented")
}
func (UnimplementedSchemaVariablesServiceServer) SearchSchemaVariable(context.Context, *SearchSchemaVariableRequest) (*ListSchemaVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSchemaVariable not implemented")
}
func (UnimplementedSchemaVariablesServiceServer) ReadSchemaVariable(context.Context, *ReadSchemaVariableRequest) (*SchemaVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSchemaVariable not implemented")
}
func (UnimplementedSchemaVariablesServiceServer) UpdateSchemaVariable(context.Context, *UpdateSchemaVariableRequest) (*SchemaVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchemaVariable not implemented")
}
func (UnimplementedSchemaVariablesServiceServer) PatchSchemaVariable(context.Context, *PatchSchemaVariableRequest) (*SchemaVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchSchemaVariable not implemented")
}
func (UnimplementedSchemaVariablesServiceServer) DeleteSchemaVariable(context.Context, *DeleteSchemaVariableRequest) (*SchemaVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchemaVariable not implemented")
}
func (UnimplementedSchemaVariablesServiceServer) mustEmbedUnimplementedSchemaVariablesServiceServer() {
}

// UnsafeSchemaVariablesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemaVariablesServiceServer will
// result in compilation errors.
type UnsafeSchemaVariablesServiceServer interface {
	mustEmbedUnimplementedSchemaVariablesServiceServer()
}

func RegisterSchemaVariablesServiceServer(s grpc.ServiceRegistrar, srv SchemaVariablesServiceServer) {
	s.RegisterService(&SchemaVariablesService_ServiceDesc, srv)
}

func _SchemaVariablesService_CreateSchemaVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchemaVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaVariablesServiceServer).CreateSchemaVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaVariablesService_CreateSchemaVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaVariablesServiceServer).CreateSchemaVariable(ctx, req.(*CreateSchemaVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaVariablesService_SearchSchemaVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSchemaVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaVariablesServiceServer).SearchSchemaVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaVariablesService_SearchSchemaVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaVariablesServiceServer).SearchSchemaVariable(ctx, req.(*SearchSchemaVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaVariablesService_ReadSchemaVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSchemaVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaVariablesServiceServer).ReadSchemaVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaVariablesService_ReadSchemaVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaVariablesServiceServer).ReadSchemaVariable(ctx, req.(*ReadSchemaVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaVariablesService_UpdateSchemaVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchemaVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaVariablesServiceServer).UpdateSchemaVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaVariablesService_UpdateSchemaVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaVariablesServiceServer).UpdateSchemaVariable(ctx, req.(*UpdateSchemaVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaVariablesService_PatchSchemaVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchSchemaVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaVariablesServiceServer).PatchSchemaVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaVariablesService_PatchSchemaVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaVariablesServiceServer).PatchSchemaVariable(ctx, req.(*PatchSchemaVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaVariablesService_DeleteSchemaVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSchemaVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaVariablesServiceServer).DeleteSchemaVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaVariablesService_DeleteSchemaVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaVariablesServiceServer).DeleteSchemaVariable(ctx, req.(*DeleteSchemaVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchemaVariablesService_ServiceDesc is the grpc.ServiceDesc for SchemaVariablesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchemaVariablesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.SchemaVariablesService",
	HandlerType: (*SchemaVariablesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSchemaVariable",
			Handler:    _SchemaVariablesService_CreateSchemaVariable_Handler,
		},
		{
			MethodName: "SearchSchemaVariable",
			Handler:    _SchemaVariablesService_SearchSchemaVariable_Handler,
		},
		{
			MethodName: "ReadSchemaVariable",
			Handler:    _SchemaVariablesService_ReadSchemaVariable_Handler,
		},
		{
			MethodName: "UpdateSchemaVariable",
			Handler:    _SchemaVariablesService_UpdateSchemaVariable_Handler,
		},
		{
			MethodName: "PatchSchemaVariable",
			Handler:    _SchemaVariablesService_PatchSchemaVariable_Handler,
		},
		{
			MethodName: "DeleteSchemaVariable",
			Handler:    _SchemaVariablesService_DeleteSchemaVariable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema_variables.proto",
}
