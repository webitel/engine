// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: skill.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SkillService_CreateSkill_FullMethodName      = "/engine.SkillService/CreateSkill"
	SkillService_SearchSkill_FullMethodName      = "/engine.SkillService/SearchSkill"
	SkillService_ReadSkill_FullMethodName        = "/engine.SkillService/ReadSkill"
	SkillService_UpdateSkill_FullMethodName      = "/engine.SkillService/UpdateSkill"
	SkillService_DeleteSkill_FullMethodName      = "/engine.SkillService/DeleteSkill"
	SkillService_SearchSkillAgent_FullMethodName = "/engine.SkillService/SearchSkillAgent"
	SkillService_CreateSkillAgent_FullMethodName = "/engine.SkillService/CreateSkillAgent"
	SkillService_PatchSkillAgent_FullMethodName  = "/engine.SkillService/PatchSkillAgent"
	SkillService_DeleteSkillAgent_FullMethodName = "/engine.SkillService/DeleteSkillAgent"
)

// SkillServiceClient is the client API for SkillService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SkillServiceClient interface {
	// Create Skill
	CreateSkill(ctx context.Context, in *CreateSkillRequest, opts ...grpc.CallOption) (*Skill, error)
	// List of Skill
	SearchSkill(ctx context.Context, in *SearchSkillRequest, opts ...grpc.CallOption) (*ListSkill, error)
	// Skill item
	ReadSkill(ctx context.Context, in *ReadSkillRequest, opts ...grpc.CallOption) (*Skill, error)
	// Update Skill
	UpdateSkill(ctx context.Context, in *UpdateSkillRequest, opts ...grpc.CallOption) (*Skill, error)
	// Remove Skill
	DeleteSkill(ctx context.Context, in *DeleteSkillRequest, opts ...grpc.CallOption) (*Skill, error)
	// For agents
	// SearchSkillAgent
	SearchSkillAgent(ctx context.Context, in *SearchSkillAgentRequest, opts ...grpc.CallOption) (*ListSkillAgent, error)
	CreateSkillAgent(ctx context.Context, in *CreateSkillAgentRequest, opts ...grpc.CallOption) (*CreateSkillAgentResponse, error)
	PatchSkillAgent(ctx context.Context, in *PatchSkillAgentRequest, opts ...grpc.CallOption) (*PatchSkillAgentResponse, error)
	DeleteSkillAgent(ctx context.Context, in *DeleteSkillAgentRequest, opts ...grpc.CallOption) (*DeleteSkillAgentResponse, error)
}

type skillServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSkillServiceClient(cc grpc.ClientConnInterface) SkillServiceClient {
	return &skillServiceClient{cc}
}

func (c *skillServiceClient) CreateSkill(ctx context.Context, in *CreateSkillRequest, opts ...grpc.CallOption) (*Skill, error) {
	out := new(Skill)
	err := c.cc.Invoke(ctx, SkillService_CreateSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillServiceClient) SearchSkill(ctx context.Context, in *SearchSkillRequest, opts ...grpc.CallOption) (*ListSkill, error) {
	out := new(ListSkill)
	err := c.cc.Invoke(ctx, SkillService_SearchSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillServiceClient) ReadSkill(ctx context.Context, in *ReadSkillRequest, opts ...grpc.CallOption) (*Skill, error) {
	out := new(Skill)
	err := c.cc.Invoke(ctx, SkillService_ReadSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillServiceClient) UpdateSkill(ctx context.Context, in *UpdateSkillRequest, opts ...grpc.CallOption) (*Skill, error) {
	out := new(Skill)
	err := c.cc.Invoke(ctx, SkillService_UpdateSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillServiceClient) DeleteSkill(ctx context.Context, in *DeleteSkillRequest, opts ...grpc.CallOption) (*Skill, error) {
	out := new(Skill)
	err := c.cc.Invoke(ctx, SkillService_DeleteSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillServiceClient) SearchSkillAgent(ctx context.Context, in *SearchSkillAgentRequest, opts ...grpc.CallOption) (*ListSkillAgent, error) {
	out := new(ListSkillAgent)
	err := c.cc.Invoke(ctx, SkillService_SearchSkillAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillServiceClient) CreateSkillAgent(ctx context.Context, in *CreateSkillAgentRequest, opts ...grpc.CallOption) (*CreateSkillAgentResponse, error) {
	out := new(CreateSkillAgentResponse)
	err := c.cc.Invoke(ctx, SkillService_CreateSkillAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillServiceClient) PatchSkillAgent(ctx context.Context, in *PatchSkillAgentRequest, opts ...grpc.CallOption) (*PatchSkillAgentResponse, error) {
	out := new(PatchSkillAgentResponse)
	err := c.cc.Invoke(ctx, SkillService_PatchSkillAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillServiceClient) DeleteSkillAgent(ctx context.Context, in *DeleteSkillAgentRequest, opts ...grpc.CallOption) (*DeleteSkillAgentResponse, error) {
	out := new(DeleteSkillAgentResponse)
	err := c.cc.Invoke(ctx, SkillService_DeleteSkillAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SkillServiceServer is the server API for SkillService service.
// All implementations must embed UnimplementedSkillServiceServer
// for forward compatibility
type SkillServiceServer interface {
	// Create Skill
	CreateSkill(context.Context, *CreateSkillRequest) (*Skill, error)
	// List of Skill
	SearchSkill(context.Context, *SearchSkillRequest) (*ListSkill, error)
	// Skill item
	ReadSkill(context.Context, *ReadSkillRequest) (*Skill, error)
	// Update Skill
	UpdateSkill(context.Context, *UpdateSkillRequest) (*Skill, error)
	// Remove Skill
	DeleteSkill(context.Context, *DeleteSkillRequest) (*Skill, error)
	// For agents
	// SearchSkillAgent
	SearchSkillAgent(context.Context, *SearchSkillAgentRequest) (*ListSkillAgent, error)
	CreateSkillAgent(context.Context, *CreateSkillAgentRequest) (*CreateSkillAgentResponse, error)
	PatchSkillAgent(context.Context, *PatchSkillAgentRequest) (*PatchSkillAgentResponse, error)
	DeleteSkillAgent(context.Context, *DeleteSkillAgentRequest) (*DeleteSkillAgentResponse, error)
	mustEmbedUnimplementedSkillServiceServer()
}

// UnimplementedSkillServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSkillServiceServer struct {
}

func (UnimplementedSkillServiceServer) CreateSkill(context.Context, *CreateSkillRequest) (*Skill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSkill not implemented")
}
func (UnimplementedSkillServiceServer) SearchSkill(context.Context, *SearchSkillRequest) (*ListSkill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSkill not implemented")
}
func (UnimplementedSkillServiceServer) ReadSkill(context.Context, *ReadSkillRequest) (*Skill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSkill not implemented")
}
func (UnimplementedSkillServiceServer) UpdateSkill(context.Context, *UpdateSkillRequest) (*Skill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSkill not implemented")
}
func (UnimplementedSkillServiceServer) DeleteSkill(context.Context, *DeleteSkillRequest) (*Skill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSkill not implemented")
}
func (UnimplementedSkillServiceServer) SearchSkillAgent(context.Context, *SearchSkillAgentRequest) (*ListSkillAgent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSkillAgent not implemented")
}
func (UnimplementedSkillServiceServer) CreateSkillAgent(context.Context, *CreateSkillAgentRequest) (*CreateSkillAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSkillAgent not implemented")
}
func (UnimplementedSkillServiceServer) PatchSkillAgent(context.Context, *PatchSkillAgentRequest) (*PatchSkillAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchSkillAgent not implemented")
}
func (UnimplementedSkillServiceServer) DeleteSkillAgent(context.Context, *DeleteSkillAgentRequest) (*DeleteSkillAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSkillAgent not implemented")
}
func (UnimplementedSkillServiceServer) mustEmbedUnimplementedSkillServiceServer() {}

// UnsafeSkillServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SkillServiceServer will
// result in compilation errors.
type UnsafeSkillServiceServer interface {
	mustEmbedUnimplementedSkillServiceServer()
}

func RegisterSkillServiceServer(s grpc.ServiceRegistrar, srv SkillServiceServer) {
	s.RegisterService(&SkillService_ServiceDesc, srv)
}

func _SkillService_CreateSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillServiceServer).CreateSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillService_CreateSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillServiceServer).CreateSkill(ctx, req.(*CreateSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillService_SearchSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillServiceServer).SearchSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillService_SearchSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillServiceServer).SearchSkill(ctx, req.(*SearchSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillService_ReadSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillServiceServer).ReadSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillService_ReadSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillServiceServer).ReadSkill(ctx, req.(*ReadSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillService_UpdateSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillServiceServer).UpdateSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillService_UpdateSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillServiceServer).UpdateSkill(ctx, req.(*UpdateSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillService_DeleteSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillServiceServer).DeleteSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillService_DeleteSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillServiceServer).DeleteSkill(ctx, req.(*DeleteSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillService_SearchSkillAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSkillAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillServiceServer).SearchSkillAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillService_SearchSkillAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillServiceServer).SearchSkillAgent(ctx, req.(*SearchSkillAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillService_CreateSkillAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSkillAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillServiceServer).CreateSkillAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillService_CreateSkillAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillServiceServer).CreateSkillAgent(ctx, req.(*CreateSkillAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillService_PatchSkillAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchSkillAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillServiceServer).PatchSkillAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillService_PatchSkillAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillServiceServer).PatchSkillAgent(ctx, req.(*PatchSkillAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillService_DeleteSkillAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSkillAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillServiceServer).DeleteSkillAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillService_DeleteSkillAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillServiceServer).DeleteSkillAgent(ctx, req.(*DeleteSkillAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SkillService_ServiceDesc is the grpc.ServiceDesc for SkillService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SkillService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.SkillService",
	HandlerType: (*SkillServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSkill",
			Handler:    _SkillService_CreateSkill_Handler,
		},
		{
			MethodName: "SearchSkill",
			Handler:    _SkillService_SearchSkill_Handler,
		},
		{
			MethodName: "ReadSkill",
			Handler:    _SkillService_ReadSkill_Handler,
		},
		{
			MethodName: "UpdateSkill",
			Handler:    _SkillService_UpdateSkill_Handler,
		},
		{
			MethodName: "DeleteSkill",
			Handler:    _SkillService_DeleteSkill_Handler,
		},
		{
			MethodName: "SearchSkillAgent",
			Handler:    _SkillService_SearchSkillAgent_Handler,
		},
		{
			MethodName: "CreateSkillAgent",
			Handler:    _SkillService_CreateSkillAgent_Handler,
		},
		{
			MethodName: "PatchSkillAgent",
			Handler:    _SkillService_PatchSkillAgent_Handler,
		},
		{
			MethodName: "DeleteSkillAgent",
			Handler:    _SkillService_DeleteSkillAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "skill.proto",
}
