// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: team_trigger.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TeamTriggerService_CreateTeamTrigger_FullMethodName  = "/engine.TeamTriggerService/CreateTeamTrigger"
	TeamTriggerService_RunTeamTrigger_FullMethodName     = "/engine.TeamTriggerService/RunTeamTrigger"
	TeamTriggerService_SearchTeamTrigger_FullMethodName  = "/engine.TeamTriggerService/SearchTeamTrigger"
	TeamTriggerService_SearchAgentTrigger_FullMethodName = "/engine.TeamTriggerService/SearchAgentTrigger"
	TeamTriggerService_ReadTeamTrigger_FullMethodName    = "/engine.TeamTriggerService/ReadTeamTrigger"
	TeamTriggerService_UpdateTeamTrigger_FullMethodName  = "/engine.TeamTriggerService/UpdateTeamTrigger"
	TeamTriggerService_PatchTeamTrigger_FullMethodName   = "/engine.TeamTriggerService/PatchTeamTrigger"
	TeamTriggerService_DeleteTeamTrigger_FullMethodName  = "/engine.TeamTriggerService/DeleteTeamTrigger"
)

// TeamTriggerServiceClient is the client API for TeamTriggerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamTriggerServiceClient interface {
	CreateTeamTrigger(ctx context.Context, in *CreateTeamTriggerRequest, opts ...grpc.CallOption) (*TeamTrigger, error)
	RunTeamTrigger(ctx context.Context, in *RunTeamTriggerRequest, opts ...grpc.CallOption) (*RunTeamTriggerResponse, error)
	SearchTeamTrigger(ctx context.Context, in *SearchTeamTriggerRequest, opts ...grpc.CallOption) (*ListTeamTrigger, error)
	SearchAgentTrigger(ctx context.Context, in *SearchAgentTriggerRequest, opts ...grpc.CallOption) (*ListTeamTrigger, error)
	ReadTeamTrigger(ctx context.Context, in *ReadTeamTriggerRequest, opts ...grpc.CallOption) (*TeamTrigger, error)
	UpdateTeamTrigger(ctx context.Context, in *UpdateTeamTriggerRequest, opts ...grpc.CallOption) (*TeamTrigger, error)
	PatchTeamTrigger(ctx context.Context, in *PatchTeamTriggerRequest, opts ...grpc.CallOption) (*TeamTrigger, error)
	DeleteTeamTrigger(ctx context.Context, in *DeleteTeamTriggerRequest, opts ...grpc.CallOption) (*TeamTrigger, error)
}

type teamTriggerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamTriggerServiceClient(cc grpc.ClientConnInterface) TeamTriggerServiceClient {
	return &teamTriggerServiceClient{cc}
}

func (c *teamTriggerServiceClient) CreateTeamTrigger(ctx context.Context, in *CreateTeamTriggerRequest, opts ...grpc.CallOption) (*TeamTrigger, error) {
	out := new(TeamTrigger)
	err := c.cc.Invoke(ctx, TeamTriggerService_CreateTeamTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamTriggerServiceClient) RunTeamTrigger(ctx context.Context, in *RunTeamTriggerRequest, opts ...grpc.CallOption) (*RunTeamTriggerResponse, error) {
	out := new(RunTeamTriggerResponse)
	err := c.cc.Invoke(ctx, TeamTriggerService_RunTeamTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamTriggerServiceClient) SearchTeamTrigger(ctx context.Context, in *SearchTeamTriggerRequest, opts ...grpc.CallOption) (*ListTeamTrigger, error) {
	out := new(ListTeamTrigger)
	err := c.cc.Invoke(ctx, TeamTriggerService_SearchTeamTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamTriggerServiceClient) SearchAgentTrigger(ctx context.Context, in *SearchAgentTriggerRequest, opts ...grpc.CallOption) (*ListTeamTrigger, error) {
	out := new(ListTeamTrigger)
	err := c.cc.Invoke(ctx, TeamTriggerService_SearchAgentTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamTriggerServiceClient) ReadTeamTrigger(ctx context.Context, in *ReadTeamTriggerRequest, opts ...grpc.CallOption) (*TeamTrigger, error) {
	out := new(TeamTrigger)
	err := c.cc.Invoke(ctx, TeamTriggerService_ReadTeamTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamTriggerServiceClient) UpdateTeamTrigger(ctx context.Context, in *UpdateTeamTriggerRequest, opts ...grpc.CallOption) (*TeamTrigger, error) {
	out := new(TeamTrigger)
	err := c.cc.Invoke(ctx, TeamTriggerService_UpdateTeamTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamTriggerServiceClient) PatchTeamTrigger(ctx context.Context, in *PatchTeamTriggerRequest, opts ...grpc.CallOption) (*TeamTrigger, error) {
	out := new(TeamTrigger)
	err := c.cc.Invoke(ctx, TeamTriggerService_PatchTeamTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamTriggerServiceClient) DeleteTeamTrigger(ctx context.Context, in *DeleteTeamTriggerRequest, opts ...grpc.CallOption) (*TeamTrigger, error) {
	out := new(TeamTrigger)
	err := c.cc.Invoke(ctx, TeamTriggerService_DeleteTeamTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamTriggerServiceServer is the server API for TeamTriggerService service.
// All implementations must embed UnimplementedTeamTriggerServiceServer
// for forward compatibility
type TeamTriggerServiceServer interface {
	CreateTeamTrigger(context.Context, *CreateTeamTriggerRequest) (*TeamTrigger, error)
	RunTeamTrigger(context.Context, *RunTeamTriggerRequest) (*RunTeamTriggerResponse, error)
	SearchTeamTrigger(context.Context, *SearchTeamTriggerRequest) (*ListTeamTrigger, error)
	SearchAgentTrigger(context.Context, *SearchAgentTriggerRequest) (*ListTeamTrigger, error)
	ReadTeamTrigger(context.Context, *ReadTeamTriggerRequest) (*TeamTrigger, error)
	UpdateTeamTrigger(context.Context, *UpdateTeamTriggerRequest) (*TeamTrigger, error)
	PatchTeamTrigger(context.Context, *PatchTeamTriggerRequest) (*TeamTrigger, error)
	DeleteTeamTrigger(context.Context, *DeleteTeamTriggerRequest) (*TeamTrigger, error)
	mustEmbedUnimplementedTeamTriggerServiceServer()
}

// UnimplementedTeamTriggerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTeamTriggerServiceServer struct {
}

func (UnimplementedTeamTriggerServiceServer) CreateTeamTrigger(context.Context, *CreateTeamTriggerRequest) (*TeamTrigger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeamTrigger not implemented")
}
func (UnimplementedTeamTriggerServiceServer) RunTeamTrigger(context.Context, *RunTeamTriggerRequest) (*RunTeamTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTeamTrigger not implemented")
}
func (UnimplementedTeamTriggerServiceServer) SearchTeamTrigger(context.Context, *SearchTeamTriggerRequest) (*ListTeamTrigger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTeamTrigger not implemented")
}
func (UnimplementedTeamTriggerServiceServer) SearchAgentTrigger(context.Context, *SearchAgentTriggerRequest) (*ListTeamTrigger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAgentTrigger not implemented")
}
func (UnimplementedTeamTriggerServiceServer) ReadTeamTrigger(context.Context, *ReadTeamTriggerRequest) (*TeamTrigger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTeamTrigger not implemented")
}
func (UnimplementedTeamTriggerServiceServer) UpdateTeamTrigger(context.Context, *UpdateTeamTriggerRequest) (*TeamTrigger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeamTrigger not implemented")
}
func (UnimplementedTeamTriggerServiceServer) PatchTeamTrigger(context.Context, *PatchTeamTriggerRequest) (*TeamTrigger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchTeamTrigger not implemented")
}
func (UnimplementedTeamTriggerServiceServer) DeleteTeamTrigger(context.Context, *DeleteTeamTriggerRequest) (*TeamTrigger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeamTrigger not implemented")
}
func (UnimplementedTeamTriggerServiceServer) mustEmbedUnimplementedTeamTriggerServiceServer() {}

// UnsafeTeamTriggerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamTriggerServiceServer will
// result in compilation errors.
type UnsafeTeamTriggerServiceServer interface {
	mustEmbedUnimplementedTeamTriggerServiceServer()
}

func RegisterTeamTriggerServiceServer(s grpc.ServiceRegistrar, srv TeamTriggerServiceServer) {
	s.RegisterService(&TeamTriggerService_ServiceDesc, srv)
}

func _TeamTriggerService_CreateTeamTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamTriggerServiceServer).CreateTeamTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamTriggerService_CreateTeamTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamTriggerServiceServer).CreateTeamTrigger(ctx, req.(*CreateTeamTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamTriggerService_RunTeamTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTeamTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamTriggerServiceServer).RunTeamTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamTriggerService_RunTeamTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamTriggerServiceServer).RunTeamTrigger(ctx, req.(*RunTeamTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamTriggerService_SearchTeamTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTeamTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamTriggerServiceServer).SearchTeamTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamTriggerService_SearchTeamTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamTriggerServiceServer).SearchTeamTrigger(ctx, req.(*SearchTeamTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamTriggerService_SearchAgentTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAgentTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamTriggerServiceServer).SearchAgentTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamTriggerService_SearchAgentTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamTriggerServiceServer).SearchAgentTrigger(ctx, req.(*SearchAgentTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamTriggerService_ReadTeamTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTeamTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamTriggerServiceServer).ReadTeamTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamTriggerService_ReadTeamTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamTriggerServiceServer).ReadTeamTrigger(ctx, req.(*ReadTeamTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamTriggerService_UpdateTeamTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamTriggerServiceServer).UpdateTeamTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamTriggerService_UpdateTeamTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamTriggerServiceServer).UpdateTeamTrigger(ctx, req.(*UpdateTeamTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamTriggerService_PatchTeamTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchTeamTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamTriggerServiceServer).PatchTeamTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamTriggerService_PatchTeamTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamTriggerServiceServer).PatchTeamTrigger(ctx, req.(*PatchTeamTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamTriggerService_DeleteTeamTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamTriggerServiceServer).DeleteTeamTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamTriggerService_DeleteTeamTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamTriggerServiceServer).DeleteTeamTrigger(ctx, req.(*DeleteTeamTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamTriggerService_ServiceDesc is the grpc.ServiceDesc for TeamTriggerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamTriggerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.TeamTriggerService",
	HandlerType: (*TeamTriggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeamTrigger",
			Handler:    _TeamTriggerService_CreateTeamTrigger_Handler,
		},
		{
			MethodName: "RunTeamTrigger",
			Handler:    _TeamTriggerService_RunTeamTrigger_Handler,
		},
		{
			MethodName: "SearchTeamTrigger",
			Handler:    _TeamTriggerService_SearchTeamTrigger_Handler,
		},
		{
			MethodName: "SearchAgentTrigger",
			Handler:    _TeamTriggerService_SearchAgentTrigger_Handler,
		},
		{
			MethodName: "ReadTeamTrigger",
			Handler:    _TeamTriggerService_ReadTeamTrigger_Handler,
		},
		{
			MethodName: "UpdateTeamTrigger",
			Handler:    _TeamTriggerService_UpdateTeamTrigger_Handler,
		},
		{
			MethodName: "PatchTeamTrigger",
			Handler:    _TeamTriggerService_PatchTeamTrigger_Handler,
		},
		{
			MethodName: "DeleteTeamTrigger",
			Handler:    _TeamTriggerService_DeleteTeamTrigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "team_trigger.proto",
}
