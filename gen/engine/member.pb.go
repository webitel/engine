// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: member.proto

package engine

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AttemptRenewalResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttemptId int64  `protobuf:"varint,1,opt,name=attempt_id,json=attemptId,proto3" json:"attempt_id,omitempty"`
	Renewal   uint32 `protobuf:"varint,2,opt,name=renewal,proto3" json:"renewal,omitempty"`
}

func (x *AttemptRenewalResultRequest) Reset() {
	*x = AttemptRenewalResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttemptRenewalResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttemptRenewalResultRequest) ProtoMessage() {}

func (x *AttemptRenewalResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttemptRenewalResultRequest.ProtoReflect.Descriptor instead.
func (*AttemptRenewalResultRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{0}
}

func (x *AttemptRenewalResultRequest) GetAttemptId() int64 {
	if x != nil {
		return x.AttemptId
	}
	return 0
}

func (x *AttemptRenewalResultRequest) GetRenewal() uint32 {
	if x != nil {
		return x.Renewal
	}
	return 0
}

type AttemptRenewalResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AttemptRenewalResultResponse) Reset() {
	*x = AttemptRenewalResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttemptRenewalResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttemptRenewalResultResponse) ProtoMessage() {}

func (x *AttemptRenewalResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttemptRenewalResultResponse.ProtoReflect.Descriptor instead.
func (*AttemptRenewalResultResponse) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{1}
}

type ResetActiveAttemptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdleForMinutes int64    `protobuf:"varint,1,opt,name=idle_for_minutes,json=idleForMinutes,proto3" json:"idle_for_minutes,omitempty"`
	AttemptType    []string `protobuf:"bytes,2,rep,name=attempt_type,json=attemptType,proto3" json:"attempt_type,omitempty"`
	Result         string   `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ResetActiveAttemptsRequest) Reset() {
	*x = ResetActiveAttemptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetActiveAttemptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetActiveAttemptsRequest) ProtoMessage() {}

func (x *ResetActiveAttemptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetActiveAttemptsRequest.ProtoReflect.Descriptor instead.
func (*ResetActiveAttemptsRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{2}
}

func (x *ResetActiveAttemptsRequest) GetIdleForMinutes() int64 {
	if x != nil {
		return x.IdleForMinutes
	}
	return 0
}

func (x *ResetActiveAttemptsRequest) GetAttemptType() []string {
	if x != nil {
		return x.AttemptType
	}
	return nil
}

func (x *ResetActiveAttemptsRequest) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type ResetActiveAttemptsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetActiveAttemptsResponse) Reset() {
	*x = ResetActiveAttemptsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetActiveAttemptsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetActiveAttemptsResponse) ProtoMessage() {}

func (x *ResetActiveAttemptsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetActiveAttemptsResponse.ProtoReflect.Descriptor instead.
func (*ResetActiveAttemptsResponse) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{3}
}

type PatchMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	QueueId        int64                               `protobuf:"varint,2,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Priority       int32                               `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	ExpireAt       int64                               `protobuf:"varint,4,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	Variables      map[string]string                   `protobuf:"bytes,5,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Name           string                              `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Timezone       *Lookup                             `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Communications []*MemberCommunicationCreateRequest `protobuf:"bytes,8,rep,name=communications,proto3" json:"communications,omitempty"`
	Bucket         *Lookup                             `protobuf:"bytes,9,opt,name=bucket,proto3" json:"bucket,omitempty"`
	MinOfferingAt  int64                               `protobuf:"varint,11,opt,name=min_offering_at,json=minOfferingAt,proto3" json:"min_offering_at,omitempty"`
	StopCause      string                              `protobuf:"bytes,12,opt,name=stop_cause,json=stopCause,proto3" json:"stop_cause,omitempty"`
	Fields         []string                            `protobuf:"bytes,13,rep,name=fields,proto3" json:"fields,omitempty"`
	DomainId       int64                               `protobuf:"varint,14,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Agent          *Lookup                             `protobuf:"bytes,15,opt,name=agent,proto3" json:"agent,omitempty"`
	Skill          *Lookup                             `protobuf:"bytes,16,opt,name=skill,proto3" json:"skill,omitempty"`
	Attempts       int32                               `protobuf:"varint,17,opt,name=attempts,proto3" json:"attempts,omitempty"`
}

func (x *PatchMemberRequest) Reset() {
	*x = PatchMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchMemberRequest) ProtoMessage() {}

func (x *PatchMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchMemberRequest.ProtoReflect.Descriptor instead.
func (*PatchMemberRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{4}
}

func (x *PatchMemberRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PatchMemberRequest) GetQueueId() int64 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *PatchMemberRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *PatchMemberRequest) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *PatchMemberRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *PatchMemberRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchMemberRequest) GetTimezone() *Lookup {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *PatchMemberRequest) GetCommunications() []*MemberCommunicationCreateRequest {
	if x != nil {
		return x.Communications
	}
	return nil
}

func (x *PatchMemberRequest) GetBucket() *Lookup {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *PatchMemberRequest) GetMinOfferingAt() int64 {
	if x != nil {
		return x.MinOfferingAt
	}
	return 0
}

func (x *PatchMemberRequest) GetStopCause() string {
	if x != nil {
		return x.StopCause
	}
	return ""
}

func (x *PatchMemberRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PatchMemberRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *PatchMemberRequest) GetAgent() *Lookup {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *PatchMemberRequest) GetSkill() *Lookup {
	if x != nil {
		return x.Skill
	}
	return nil
}

func (x *PatchMemberRequest) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

type CreateAttemptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId  int64 `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	MemberId int64 `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	AgentId  int64 `protobuf:"varint,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	DomainId int64 `protobuf:"varint,4,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *CreateAttemptRequest) Reset() {
	*x = CreateAttemptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAttemptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAttemptRequest) ProtoMessage() {}

func (x *CreateAttemptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAttemptRequest.ProtoReflect.Descriptor instead.
func (*CreateAttemptRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{5}
}

func (x *CreateAttemptRequest) GetQueueId() int64 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *CreateAttemptRequest) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *CreateAttemptRequest) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *CreateAttemptRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

type CreateAttemptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttemptId int64 `protobuf:"varint,1,opt,name=attempt_id,json=attemptId,proto3" json:"attempt_id,omitempty"`
}

func (x *CreateAttemptResponse) Reset() {
	*x = CreateAttemptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAttemptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAttemptResponse) ProtoMessage() {}

func (x *CreateAttemptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAttemptResponse.ProtoReflect.Descriptor instead.
func (*CreateAttemptResponse) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{6}
}

func (x *CreateAttemptResponse) GetAttemptId() int64 {
	if x != nil {
		return x.AttemptId
	}
	return 0
}

type AttemptCallbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttemptId                   int64             `protobuf:"varint,1,opt,name=attempt_id,json=attemptId,proto3" json:"attempt_id,omitempty"`
	Status                      string            `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	MinOfferingAt               int64             `protobuf:"varint,3,opt,name=min_offering_at,json=minOfferingAt,proto3" json:"min_offering_at,omitempty"`
	ExpireAt                    int64             `protobuf:"varint,4,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	Variables                   map[string]string `protobuf:"bytes,5,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Display                     bool              `protobuf:"varint,6,opt,name=display,proto3" json:"display,omitempty"`
	Description                 string            `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	AgentId                     int32             `protobuf:"varint,8,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	ExcludeCurrentCommunication bool              `protobuf:"varint,9,opt,name=exclude_current_communication,json=excludeCurrentCommunication,proto3" json:"exclude_current_communication,omitempty"`
	WaitBetweenRetries          int32             `protobuf:"varint,10,opt,name=wait_between_retries,json=waitBetweenRetries,proto3" json:"wait_between_retries,omitempty"`
	OnlyCurrentCommunication    bool              `protobuf:"varint,11,opt,name=only_current_communication,json=onlyCurrentCommunication,proto3" json:"only_current_communication,omitempty"`
}

func (x *AttemptCallbackRequest) Reset() {
	*x = AttemptCallbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttemptCallbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttemptCallbackRequest) ProtoMessage() {}

func (x *AttemptCallbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttemptCallbackRequest.ProtoReflect.Descriptor instead.
func (*AttemptCallbackRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{7}
}

func (x *AttemptCallbackRequest) GetAttemptId() int64 {
	if x != nil {
		return x.AttemptId
	}
	return 0
}

func (x *AttemptCallbackRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AttemptCallbackRequest) GetMinOfferingAt() int64 {
	if x != nil {
		return x.MinOfferingAt
	}
	return 0
}

func (x *AttemptCallbackRequest) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *AttemptCallbackRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *AttemptCallbackRequest) GetDisplay() bool {
	if x != nil {
		return x.Display
	}
	return false
}

func (x *AttemptCallbackRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AttemptCallbackRequest) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *AttemptCallbackRequest) GetExcludeCurrentCommunication() bool {
	if x != nil {
		return x.ExcludeCurrentCommunication
	}
	return false
}

func (x *AttemptCallbackRequest) GetWaitBetweenRetries() int32 {
	if x != nil {
		return x.WaitBetweenRetries
	}
	return 0
}

func (x *AttemptCallbackRequest) GetOnlyCurrentCommunication() bool {
	if x != nil {
		return x.OnlyCurrentCommunication
	}
	return false
}

type AttemptResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId                     int32             `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	MemberId                    int64             `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	AttemptId                   int64             `protobuf:"varint,3,opt,name=attempt_id,json=attemptId,proto3" json:"attempt_id,omitempty"`
	Status                      string            `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	MinOfferingAt               int64             `protobuf:"varint,5,opt,name=min_offering_at,json=minOfferingAt,proto3" json:"min_offering_at,omitempty"`
	ExpireAt                    int64             `protobuf:"varint,6,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	Variables                   map[string]string `protobuf:"bytes,7,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Display                     bool              `protobuf:"varint,8,opt,name=display,proto3" json:"display,omitempty"`
	Description                 string            `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	TransferQueueId             int64             `protobuf:"varint,10,opt,name=transfer_queue_id,json=transferQueueId,proto3" json:"transfer_queue_id,omitempty"`
	NextMemberId                int64             `protobuf:"varint,11,opt,name=next_member_id,json=nextMemberId,proto3" json:"next_member_id,omitempty"`
	AgentId                     int32             `protobuf:"varint,12,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	ExcludeCurrentCommunication bool              `protobuf:"varint,13,opt,name=exclude_current_communication,json=excludeCurrentCommunication,proto3" json:"exclude_current_communication,omitempty"`
	WaitBetweenRetries          int32             `protobuf:"varint,14,opt,name=wait_between_retries,json=waitBetweenRetries,proto3" json:"wait_between_retries,omitempty"`
	OnlyCurrentCommunication    bool              `protobuf:"varint,15,opt,name=only_current_communication,json=onlyCurrentCommunication,proto3" json:"only_current_communication,omitempty"`
}

func (x *AttemptResultRequest) Reset() {
	*x = AttemptResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttemptResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttemptResultRequest) ProtoMessage() {}

func (x *AttemptResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttemptResultRequest.ProtoReflect.Descriptor instead.
func (*AttemptResultRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{8}
}

func (x *AttemptResultRequest) GetQueueId() int32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *AttemptResultRequest) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *AttemptResultRequest) GetAttemptId() int64 {
	if x != nil {
		return x.AttemptId
	}
	return 0
}

func (x *AttemptResultRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AttemptResultRequest) GetMinOfferingAt() int64 {
	if x != nil {
		return x.MinOfferingAt
	}
	return 0
}

func (x *AttemptResultRequest) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *AttemptResultRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *AttemptResultRequest) GetDisplay() bool {
	if x != nil {
		return x.Display
	}
	return false
}

func (x *AttemptResultRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AttemptResultRequest) GetTransferQueueId() int64 {
	if x != nil {
		return x.TransferQueueId
	}
	return 0
}

func (x *AttemptResultRequest) GetNextMemberId() int64 {
	if x != nil {
		return x.NextMemberId
	}
	return 0
}

func (x *AttemptResultRequest) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *AttemptResultRequest) GetExcludeCurrentCommunication() bool {
	if x != nil {
		return x.ExcludeCurrentCommunication
	}
	return false
}

func (x *AttemptResultRequest) GetWaitBetweenRetries() int32 {
	if x != nil {
		return x.WaitBetweenRetries
	}
	return 0
}

func (x *AttemptResultRequest) GetOnlyCurrentCommunication() bool {
	if x != nil {
		return x.OnlyCurrentCommunication
	}
	return false
}

type AttemptResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AttemptResultResponse) Reset() {
	*x = AttemptResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttemptResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttemptResultResponse) ProtoMessage() {}

func (x *AttemptResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttemptResultResponse.ProtoReflect.Descriptor instead.
func (*AttemptResultResponse) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{9}
}

func (x *AttemptResultResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ListHistoryAttempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next  bool              `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items []*AttemptHistory `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListHistoryAttempt) Reset() {
	*x = ListHistoryAttempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHistoryAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoryAttempt) ProtoMessage() {}

func (x *ListHistoryAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoryAttempt.ProtoReflect.Descriptor instead.
func (*ListHistoryAttempt) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{10}
}

func (x *ListHistoryAttempt) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListHistoryAttempt) GetItems() []*AttemptHistory {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListAttempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next  bool       `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items []*Attempt `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListAttempt) Reset() {
	*x = ListAttempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAttempt) ProtoMessage() {}

func (x *ListAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAttempt.ProtoReflect.Descriptor instead.
func (*ListAttempt) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{11}
}

func (x *ListAttempt) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListAttempt) GetItems() []*Attempt {
	if x != nil {
		return x.Items
	}
	return nil
}

type AttemptHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	JoinedAt      int64                `protobuf:"varint,4,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	OfferingAt    int64                `protobuf:"varint,5,opt,name=offering_at,json=offeringAt,proto3" json:"offering_at,omitempty"`
	BridgedAt     int64                `protobuf:"varint,6,opt,name=bridged_at,json=bridgedAt,proto3" json:"bridged_at,omitempty"`
	ReportingAt   int64                `protobuf:"varint,7,opt,name=reporting_at,json=reportingAt,proto3" json:"reporting_at,omitempty"`
	LeavingAt     int64                `protobuf:"varint,10,opt,name=leaving_at,json=leavingAt,proto3" json:"leaving_at,omitempty"`
	Channel       string               `protobuf:"bytes,11,opt,name=channel,proto3" json:"channel,omitempty"`
	Queue         *Lookup              `protobuf:"bytes,12,opt,name=queue,proto3" json:"queue,omitempty"`
	Member        *Lookup              `protobuf:"bytes,13,opt,name=member,proto3" json:"member,omitempty"`
	MemberCallId  string               `protobuf:"bytes,14,opt,name=member_call_id,json=memberCallId,proto3" json:"member_call_id,omitempty"`
	Variables     map[string]string    `protobuf:"bytes,15,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Agent         *Lookup              `protobuf:"bytes,16,opt,name=agent,proto3" json:"agent,omitempty"`
	AgentCallId   string               `protobuf:"bytes,17,opt,name=agent_call_id,json=agentCallId,proto3" json:"agent_call_id,omitempty"`
	Position      int32                `protobuf:"varint,18,opt,name=position,proto3" json:"position,omitempty"`
	Resource      *Lookup              `protobuf:"bytes,19,opt,name=resource,proto3" json:"resource,omitempty"`
	Bucket        *Lookup              `protobuf:"bytes,20,opt,name=bucket,proto3" json:"bucket,omitempty"`
	List          *Lookup              `protobuf:"bytes,21,opt,name=list,proto3" json:"list,omitempty"` //black list ?
	Display       string               `protobuf:"bytes,22,opt,name=display,proto3" json:"display,omitempty"`
	Destination   *MemberCommunication `protobuf:"bytes,23,opt,name=destination,proto3" json:"destination,omitempty"`
	Result        string               `protobuf:"bytes,24,opt,name=result,proto3" json:"result,omitempty"`
	AmdResult     string               `protobuf:"bytes,25,opt,name=amd_result,json=amdResult,proto3" json:"amd_result,omitempty"`
	Attempts      int32                `protobuf:"varint,26,opt,name=attempts,proto3" json:"attempts,omitempty"`
	OfferedAgents []*Lookup            `protobuf:"bytes,27,rep,name=offered_agents,json=offeredAgents,proto3" json:"offered_agents,omitempty"`
}

func (x *AttemptHistory) Reset() {
	*x = AttemptHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttemptHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttemptHistory) ProtoMessage() {}

func (x *AttemptHistory) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttemptHistory.ProtoReflect.Descriptor instead.
func (*AttemptHistory) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{12}
}

func (x *AttemptHistory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AttemptHistory) GetJoinedAt() int64 {
	if x != nil {
		return x.JoinedAt
	}
	return 0
}

func (x *AttemptHistory) GetOfferingAt() int64 {
	if x != nil {
		return x.OfferingAt
	}
	return 0
}

func (x *AttemptHistory) GetBridgedAt() int64 {
	if x != nil {
		return x.BridgedAt
	}
	return 0
}

func (x *AttemptHistory) GetReportingAt() int64 {
	if x != nil {
		return x.ReportingAt
	}
	return 0
}

func (x *AttemptHistory) GetLeavingAt() int64 {
	if x != nil {
		return x.LeavingAt
	}
	return 0
}

func (x *AttemptHistory) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *AttemptHistory) GetQueue() *Lookup {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *AttemptHistory) GetMember() *Lookup {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *AttemptHistory) GetMemberCallId() string {
	if x != nil {
		return x.MemberCallId
	}
	return ""
}

func (x *AttemptHistory) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *AttemptHistory) GetAgent() *Lookup {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *AttemptHistory) GetAgentCallId() string {
	if x != nil {
		return x.AgentCallId
	}
	return ""
}

func (x *AttemptHistory) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *AttemptHistory) GetResource() *Lookup {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *AttemptHistory) GetBucket() *Lookup {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *AttemptHistory) GetList() *Lookup {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *AttemptHistory) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *AttemptHistory) GetDestination() *MemberCommunication {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *AttemptHistory) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *AttemptHistory) GetAmdResult() string {
	if x != nil {
		return x.AmdResult
	}
	return ""
}

func (x *AttemptHistory) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *AttemptHistory) GetOfferedAgents() []*Lookup {
	if x != nil {
		return x.OfferedAgents
	}
	return nil
}

type Attempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	State           string               `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	LastStateChange int64                `protobuf:"varint,3,opt,name=last_state_change,json=lastStateChange,proto3" json:"last_state_change,omitempty"`
	JoinedAt        int64                `protobuf:"varint,4,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	OfferingAt      int64                `protobuf:"varint,5,opt,name=offering_at,json=offeringAt,proto3" json:"offering_at,omitempty"`
	BridgedAt       int64                `protobuf:"varint,6,opt,name=bridged_at,json=bridgedAt,proto3" json:"bridged_at,omitempty"`
	ReportingAt     int64                `protobuf:"varint,7,opt,name=reporting_at,json=reportingAt,proto3" json:"reporting_at,omitempty"`
	Timeout         int64                `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
	LeavingAt       int64                `protobuf:"varint,10,opt,name=leaving_at,json=leavingAt,proto3" json:"leaving_at,omitempty"`
	Channel         string               `protobuf:"bytes,11,opt,name=channel,proto3" json:"channel,omitempty"`
	Queue           *Lookup              `protobuf:"bytes,12,opt,name=queue,proto3" json:"queue,omitempty"`
	Member          *Lookup              `protobuf:"bytes,13,opt,name=member,proto3" json:"member,omitempty"`
	MemberCallId    string               `protobuf:"bytes,14,opt,name=member_call_id,json=memberCallId,proto3" json:"member_call_id,omitempty"`
	Variables       map[string]string    `protobuf:"bytes,15,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Agent           *Lookup              `protobuf:"bytes,16,opt,name=agent,proto3" json:"agent,omitempty"`
	AgentCallId     string               `protobuf:"bytes,17,opt,name=agent_call_id,json=agentCallId,proto3" json:"agent_call_id,omitempty"`
	Position        int32                `protobuf:"varint,18,opt,name=position,proto3" json:"position,omitempty"`
	Resource        *Lookup              `protobuf:"bytes,19,opt,name=resource,proto3" json:"resource,omitempty"`
	Bucket          *Lookup              `protobuf:"bytes,20,opt,name=bucket,proto3" json:"bucket,omitempty"`
	List            *Lookup              `protobuf:"bytes,21,opt,name=list,proto3" json:"list,omitempty"` //black list ?
	Display         string               `protobuf:"bytes,22,opt,name=display,proto3" json:"display,omitempty"`
	Destination     *MemberCommunication `protobuf:"bytes,23,opt,name=destination,proto3" json:"destination,omitempty"`
	Result          string               `protobuf:"bytes,24,opt,name=result,proto3" json:"result,omitempty"`
	Attempts        int32                `protobuf:"varint,25,opt,name=attempts,proto3" json:"attempts,omitempty"`
}

func (x *Attempt) Reset() {
	*x = Attempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attempt) ProtoMessage() {}

func (x *Attempt) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attempt.ProtoReflect.Descriptor instead.
func (*Attempt) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{13}
}

func (x *Attempt) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Attempt) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Attempt) GetLastStateChange() int64 {
	if x != nil {
		return x.LastStateChange
	}
	return 0
}

func (x *Attempt) GetJoinedAt() int64 {
	if x != nil {
		return x.JoinedAt
	}
	return 0
}

func (x *Attempt) GetOfferingAt() int64 {
	if x != nil {
		return x.OfferingAt
	}
	return 0
}

func (x *Attempt) GetBridgedAt() int64 {
	if x != nil {
		return x.BridgedAt
	}
	return 0
}

func (x *Attempt) GetReportingAt() int64 {
	if x != nil {
		return x.ReportingAt
	}
	return 0
}

func (x *Attempt) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Attempt) GetLeavingAt() int64 {
	if x != nil {
		return x.LeavingAt
	}
	return 0
}

func (x *Attempt) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Attempt) GetQueue() *Lookup {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *Attempt) GetMember() *Lookup {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Attempt) GetMemberCallId() string {
	if x != nil {
		return x.MemberCallId
	}
	return ""
}

func (x *Attempt) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *Attempt) GetAgent() *Lookup {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *Attempt) GetAgentCallId() string {
	if x != nil {
		return x.AgentCallId
	}
	return ""
}

func (x *Attempt) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Attempt) GetResource() *Lookup {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Attempt) GetBucket() *Lookup {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *Attempt) GetList() *Lookup {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *Attempt) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *Attempt) GetDestination() *MemberCommunication {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *Attempt) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *Attempt) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

type SearchAttemptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page   int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size   int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q      string   `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Sort   string   `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields []string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	// Start at
	JoinedAt *FilterBetween `protobuf:"bytes,6,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	Id       []int64        `protobuf:"varint,7,rep,packed,name=id,proto3" json:"id,omitempty"`
	QueueId  []int64        `protobuf:"varint,8,rep,packed,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	BucketId []int64        `protobuf:"varint,9,rep,packed,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	MemberId []int64        `protobuf:"varint,10,rep,packed,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	AgentId  []int64        `protobuf:"varint,11,rep,packed,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Result   []string       `protobuf:"bytes,12,rep,name=result,proto3" json:"result,omitempty"`
	// End at
	LeavingAt      *FilterBetween `protobuf:"bytes,13,opt,name=leaving_at,json=leavingAt,proto3" json:"leaving_at,omitempty"`
	OfferingAt     *FilterBetween `protobuf:"bytes,14,opt,name=offering_at,json=offeringAt,proto3" json:"offering_at,omitempty"`
	Duration       *FilterBetween `protobuf:"bytes,15,opt,name=duration,proto3" json:"duration,omitempty"`
	OfferedAgentId []int64        `protobuf:"varint,16,rep,packed,name=offered_agent_id,json=offeredAgentId,proto3" json:"offered_agent_id,omitempty"`
}

func (x *SearchAttemptsRequest) Reset() {
	*x = SearchAttemptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAttemptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAttemptsRequest) ProtoMessage() {}

func (x *SearchAttemptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAttemptsRequest.ProtoReflect.Descriptor instead.
func (*SearchAttemptsRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{14}
}

func (x *SearchAttemptsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchAttemptsRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchAttemptsRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchAttemptsRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchAttemptsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchAttemptsRequest) GetJoinedAt() *FilterBetween {
	if x != nil {
		return x.JoinedAt
	}
	return nil
}

func (x *SearchAttemptsRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchAttemptsRequest) GetQueueId() []int64 {
	if x != nil {
		return x.QueueId
	}
	return nil
}

func (x *SearchAttemptsRequest) GetBucketId() []int64 {
	if x != nil {
		return x.BucketId
	}
	return nil
}

func (x *SearchAttemptsRequest) GetMemberId() []int64 {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *SearchAttemptsRequest) GetAgentId() []int64 {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *SearchAttemptsRequest) GetResult() []string {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SearchAttemptsRequest) GetLeavingAt() *FilterBetween {
	if x != nil {
		return x.LeavingAt
	}
	return nil
}

func (x *SearchAttemptsRequest) GetOfferingAt() *FilterBetween {
	if x != nil {
		return x.OfferingAt
	}
	return nil
}

func (x *SearchAttemptsRequest) GetDuration() *FilterBetween {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *SearchAttemptsRequest) GetOfferedAgentId() []int64 {
	if x != nil {
		return x.OfferedAgentId
	}
	return nil
}

type SearchMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        int32          `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size        int32          `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q           string         `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Sort        string         `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields      []string       `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
	Id          []int64        `protobuf:"varint,7,rep,packed,name=id,proto3" json:"id,omitempty"`
	QueueId     []int32        `protobuf:"varint,8,rep,packed,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	BucketId    []int32        `protobuf:"varint,9,rep,packed,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	Destination string         `protobuf:"bytes,10,opt,name=destination,proto3" json:"destination,omitempty"`
	CreatedAt   *FilterBetween `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	OfferingAt  *FilterBetween `protobuf:"bytes,12,opt,name=offering_at,json=offeringAt,proto3" json:"offering_at,omitempty"`
	StopCause   []string       `protobuf:"bytes,13,rep,name=stop_cause,json=stopCause,proto3" json:"stop_cause,omitempty"`
	Priority    *FilterBetween `protobuf:"bytes,14,opt,name=priority,proto3" json:"priority,omitempty"`
	Name        string         `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`
	Attempts    *FilterBetween `protobuf:"bytes,16,opt,name=attempts,proto3" json:"attempts,omitempty"`
	AgentId     []int32        `protobuf:"varint,17,rep,packed,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (x *SearchMembersRequest) Reset() {
	*x = SearchMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMembersRequest) ProtoMessage() {}

func (x *SearchMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMembersRequest.ProtoReflect.Descriptor instead.
func (*SearchMembersRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{15}
}

func (x *SearchMembersRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchMembersRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchMembersRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchMembersRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchMembersRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchMembersRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchMembersRequest) GetQueueId() []int32 {
	if x != nil {
		return x.QueueId
	}
	return nil
}

func (x *SearchMembersRequest) GetBucketId() []int32 {
	if x != nil {
		return x.BucketId
	}
	return nil
}

func (x *SearchMembersRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *SearchMembersRequest) GetCreatedAt() *FilterBetween {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SearchMembersRequest) GetOfferingAt() *FilterBetween {
	if x != nil {
		return x.OfferingAt
	}
	return nil
}

func (x *SearchMembersRequest) GetStopCause() []string {
	if x != nil {
		return x.StopCause
	}
	return nil
}

func (x *SearchMembersRequest) GetPriority() *FilterBetween {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *SearchMembersRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchMembersRequest) GetAttempts() *FilterBetween {
	if x != nil {
		return x.Attempts
	}
	return nil
}

func (x *SearchMembersRequest) GetAgentId() []int32 {
	if x != nil {
		return x.AgentId
	}
	return nil
}

type SearchMembersAttemptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId    int64  `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Page       int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size       int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	TimeFrom   int64  `protobuf:"varint,4,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	TimeTo     int64  `protobuf:"varint,5,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
	MemberId   int64  `protobuf:"varint,6,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	State      int32  `protobuf:"varint,7,opt,name=state,proto3" json:"state,omitempty"`
	Result     string `protobuf:"bytes,8,opt,name=result,proto3" json:"result,omitempty"`
	AgentId    int32  `protobuf:"varint,9,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	ResourceId int32  `protobuf:"varint,10,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	DomainId   int64  `protobuf:"varint,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *SearchMembersAttemptsRequest) Reset() {
	*x = SearchMembersAttemptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMembersAttemptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMembersAttemptsRequest) ProtoMessage() {}

func (x *SearchMembersAttemptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMembersAttemptsRequest.ProtoReflect.Descriptor instead.
func (*SearchMembersAttemptsRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{16}
}

func (x *SearchMembersAttemptsRequest) GetQueueId() int64 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *SearchMembersAttemptsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchMembersAttemptsRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchMembersAttemptsRequest) GetTimeFrom() int64 {
	if x != nil {
		return x.TimeFrom
	}
	return 0
}

func (x *SearchMembersAttemptsRequest) GetTimeTo() int64 {
	if x != nil {
		return x.TimeTo
	}
	return 0
}

func (x *SearchMembersAttemptsRequest) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *SearchMembersAttemptsRequest) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SearchMembersAttemptsRequest) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *SearchMembersAttemptsRequest) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *SearchMembersAttemptsRequest) GetResourceId() int32 {
	if x != nil {
		return x.ResourceId
	}
	return 0
}

func (x *SearchMembersAttemptsRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

type DeleteMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Q              string            `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	Id             []int64           `protobuf:"varint,2,rep,packed,name=id,proto3" json:"id,omitempty"`
	Ids            []int64           `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"` // deprecated
	QueueId        int64             `protobuf:"varint,4,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	BucketId       []int32           `protobuf:"varint,5,rep,packed,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	Destination    string            `protobuf:"bytes,6,opt,name=destination,proto3" json:"destination,omitempty"`
	CreatedAt      *FilterBetween    `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	OfferingAt     *FilterBetween    `protobuf:"bytes,8,opt,name=offering_at,json=offeringAt,proto3" json:"offering_at,omitempty"`
	StopCause      []string          `protobuf:"bytes,9,rep,name=stop_cause,json=stopCause,proto3" json:"stop_cause,omitempty"`
	Priority       *FilterBetween    `protobuf:"bytes,10,opt,name=priority,proto3" json:"priority,omitempty"`
	Name           string            `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Attempts       *FilterBetween    `protobuf:"bytes,12,opt,name=attempts,proto3" json:"attempts,omitempty"`
	AgentId        []int32           `protobuf:"varint,13,rep,packed,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Numbers        []string          `protobuf:"bytes,14,rep,name=numbers,proto3" json:"numbers,omitempty"`
	Variables      map[string]string `protobuf:"bytes,15,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Size           int32             `protobuf:"varint,16,opt,name=size,proto3" json:"size,omitempty"`
	Sort           string            `protobuf:"bytes,17,opt,name=sort,proto3" json:"sort,omitempty"`
	WithoutMembers bool              `protobuf:"varint,18,opt,name=without_members,json=withoutMembers,proto3" json:"without_members,omitempty"`
}

func (x *DeleteMembersRequest) Reset() {
	*x = DeleteMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMembersRequest) ProtoMessage() {}

func (x *DeleteMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMembersRequest.ProtoReflect.Descriptor instead.
func (*DeleteMembersRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteMembersRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *DeleteMembersRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeleteMembersRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteMembersRequest) GetQueueId() int64 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *DeleteMembersRequest) GetBucketId() []int32 {
	if x != nil {
		return x.BucketId
	}
	return nil
}

func (x *DeleteMembersRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *DeleteMembersRequest) GetCreatedAt() *FilterBetween {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DeleteMembersRequest) GetOfferingAt() *FilterBetween {
	if x != nil {
		return x.OfferingAt
	}
	return nil
}

func (x *DeleteMembersRequest) GetStopCause() []string {
	if x != nil {
		return x.StopCause
	}
	return nil
}

func (x *DeleteMembersRequest) GetPriority() *FilterBetween {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *DeleteMembersRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteMembersRequest) GetAttempts() *FilterBetween {
	if x != nil {
		return x.Attempts
	}
	return nil
}

func (x *DeleteMembersRequest) GetAgentId() []int32 {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *DeleteMembersRequest) GetNumbers() []string {
	if x != nil {
		return x.Numbers
	}
	return nil
}

func (x *DeleteMembersRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *DeleteMembersRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DeleteMembersRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *DeleteMembersRequest) GetWithoutMembers() bool {
	if x != nil {
		return x.WithoutMembers
	}
	return false
}

type DeleteAllMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Q              string            `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	Id             []int64           `protobuf:"varint,2,rep,packed,name=id,proto3" json:"id,omitempty"`
	QueueId        []int64           `protobuf:"varint,3,rep,packed,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	BucketId       []int32           `protobuf:"varint,4,rep,packed,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	Destination    string            `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty"`
	CreatedAt      *FilterBetween    `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	OfferingAt     *FilterBetween    `protobuf:"bytes,7,opt,name=offering_at,json=offeringAt,proto3" json:"offering_at,omitempty"`
	StopCause      []string          `protobuf:"bytes,8,rep,name=stop_cause,json=stopCause,proto3" json:"stop_cause,omitempty"`
	Priority       *FilterBetween    `protobuf:"bytes,9,opt,name=priority,proto3" json:"priority,omitempty"`
	Name           string            `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Attempts       *FilterBetween    `protobuf:"bytes,11,opt,name=attempts,proto3" json:"attempts,omitempty"`
	AgentId        []int32           `protobuf:"varint,12,rep,packed,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Numbers        []string          `protobuf:"bytes,13,rep,name=numbers,proto3" json:"numbers,omitempty"`
	Variables      map[string]string `protobuf:"bytes,14,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Size           int32             `protobuf:"varint,15,opt,name=size,proto3" json:"size,omitempty"`
	Sort           string            `protobuf:"bytes,16,opt,name=sort,proto3" json:"sort,omitempty"`
	WithoutMembers bool              `protobuf:"varint,17,opt,name=without_members,json=withoutMembers,proto3" json:"without_members,omitempty"`
}

func (x *DeleteAllMembersRequest) Reset() {
	*x = DeleteAllMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllMembersRequest) ProtoMessage() {}

func (x *DeleteAllMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllMembersRequest.ProtoReflect.Descriptor instead.
func (*DeleteAllMembersRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteAllMembersRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *DeleteAllMembersRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeleteAllMembersRequest) GetQueueId() []int64 {
	if x != nil {
		return x.QueueId
	}
	return nil
}

func (x *DeleteAllMembersRequest) GetBucketId() []int32 {
	if x != nil {
		return x.BucketId
	}
	return nil
}

func (x *DeleteAllMembersRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *DeleteAllMembersRequest) GetCreatedAt() *FilterBetween {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DeleteAllMembersRequest) GetOfferingAt() *FilterBetween {
	if x != nil {
		return x.OfferingAt
	}
	return nil
}

func (x *DeleteAllMembersRequest) GetStopCause() []string {
	if x != nil {
		return x.StopCause
	}
	return nil
}

func (x *DeleteAllMembersRequest) GetPriority() *FilterBetween {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *DeleteAllMembersRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteAllMembersRequest) GetAttempts() *FilterBetween {
	if x != nil {
		return x.Attempts
	}
	return nil
}

func (x *DeleteAllMembersRequest) GetAgentId() []int32 {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *DeleteAllMembersRequest) GetNumbers() []string {
	if x != nil {
		return x.Numbers
	}
	return nil
}

func (x *DeleteAllMembersRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *DeleteAllMembersRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DeleteAllMembersRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *DeleteAllMembersRequest) GetWithoutMembers() bool {
	if x != nil {
		return x.WithoutMembers
	}
	return false
}

type ResetMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId   int64             `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Ids       []int64           `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	BucketId  []int64           `protobuf:"varint,3,rep,packed,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	StopCause []string          `protobuf:"bytes,4,rep,name=stop_cause,json=stopCause,proto3" json:"stop_cause,omitempty"`
	AgentId   []int32           `protobuf:"varint,5,rep,packed,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Numbers   []string          `protobuf:"bytes,6,rep,name=numbers,proto3" json:"numbers,omitempty"`
	Variables map[string]string `protobuf:"bytes,7,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id        []int64           `protobuf:"varint,8,rep,packed,name=id,proto3" json:"id,omitempty"`
	CreatedAt *FilterBetween    `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Priority  *FilterBetween    `protobuf:"bytes,10,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *ResetMembersRequest) Reset() {
	*x = ResetMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetMembersRequest) ProtoMessage() {}

func (x *ResetMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetMembersRequest.ProtoReflect.Descriptor instead.
func (*ResetMembersRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{19}
}

func (x *ResetMembersRequest) GetQueueId() int64 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *ResetMembersRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ResetMembersRequest) GetBucketId() []int64 {
	if x != nil {
		return x.BucketId
	}
	return nil
}

func (x *ResetMembersRequest) GetStopCause() []string {
	if x != nil {
		return x.StopCause
	}
	return nil
}

func (x *ResetMembersRequest) GetAgentId() []int32 {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *ResetMembersRequest) GetNumbers() []string {
	if x != nil {
		return x.Numbers
	}
	return nil
}

func (x *ResetMembersRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *ResetMembersRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResetMembersRequest) GetCreatedAt() *FilterBetween {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ResetMembersRequest) GetPriority() *FilterBetween {
	if x != nil {
		return x.Priority
	}
	return nil
}

type ResetMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ResetMembersResponse) Reset() {
	*x = ResetMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetMembersResponse) ProtoMessage() {}

func (x *ResetMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetMembersResponse.ProtoReflect.Descriptor instead.
func (*ResetMembersResponse) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{20}
}

func (x *ResetMembersResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ListMemberAttempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next  bool             `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items []*MemberAttempt `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListMemberAttempt) Reset() {
	*x = ListMemberAttempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMemberAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMemberAttempt) ProtoMessage() {}

func (x *ListMemberAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMemberAttempt.ProtoReflect.Descriptor instead.
func (*ListMemberAttempt) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{21}
}

func (x *ListMemberAttempt) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListMemberAttempt) GetItems() []*MemberAttempt {
	if x != nil {
		return x.Items
	}
	return nil
}

type SearchMemberAttemptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId int64 `protobuf:"varint,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	QueueId  int64 `protobuf:"varint,2,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	DomainId int64 `protobuf:"varint,3,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *SearchMemberAttemptsRequest) Reset() {
	*x = SearchMemberAttemptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMemberAttemptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMemberAttemptsRequest) ProtoMessage() {}

func (x *SearchMemberAttemptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMemberAttemptsRequest.ProtoReflect.Descriptor instead.
func (*SearchMemberAttemptsRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{22}
}

func (x *SearchMemberAttemptsRequest) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *SearchMemberAttemptsRequest) GetQueueId() int64 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *SearchMemberAttemptsRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

type MemberAttempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Member      *Lookup         `protobuf:"bytes,2,opt,name=member,proto3" json:"member,omitempty"`
	CreatedAt   int64           `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Destination string          `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	Weight      int32           `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
	OriginateAt int64           `protobuf:"varint,6,opt,name=originate_at,json=originateAt,proto3" json:"originate_at,omitempty"`
	AnsweredAt  int64           `protobuf:"varint,7,opt,name=answered_at,json=answeredAt,proto3" json:"answered_at,omitempty"`
	BridgedAt   int64           `protobuf:"varint,8,opt,name=bridged_at,json=bridgedAt,proto3" json:"bridged_at,omitempty"`
	HangupAt    int64           `protobuf:"varint,9,opt,name=hangup_at,json=hangupAt,proto3" json:"hangup_at,omitempty"`
	Resource    *Lookup         `protobuf:"bytes,10,opt,name=resource,proto3" json:"resource,omitempty"`
	LegAId      string          `protobuf:"bytes,11,opt,name=leg_a_id,json=legAId,proto3" json:"leg_a_id,omitempty"`
	LegBId      string          `protobuf:"bytes,12,opt,name=leg_b_id,json=legBId,proto3" json:"leg_b_id,omitempty"`
	Node        string          `protobuf:"bytes,13,opt,name=node,proto3" json:"node,omitempty"`
	Result      string          `protobuf:"bytes,14,opt,name=result,proto3" json:"result,omitempty"`
	Agent       *Lookup         `protobuf:"bytes,15,opt,name=agent,proto3" json:"agent,omitempty"`
	Bucket      *Lookup         `protobuf:"bytes,16,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Logs        *structpb.Value `protobuf:"bytes,17,opt,name=logs,proto3" json:"logs,omitempty"`
	Active      bool            `protobuf:"varint,19,opt,name=active,proto3" json:"active,omitempty"`
	Attempts    int32           `protobuf:"varint,20,opt,name=attempts,proto3" json:"attempts,omitempty"`
}

func (x *MemberAttempt) Reset() {
	*x = MemberAttempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberAttempt) ProtoMessage() {}

func (x *MemberAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberAttempt.ProtoReflect.Descriptor instead.
func (*MemberAttempt) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{23}
}

func (x *MemberAttempt) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MemberAttempt) GetMember() *Lookup {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *MemberAttempt) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MemberAttempt) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *MemberAttempt) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *MemberAttempt) GetOriginateAt() int64 {
	if x != nil {
		return x.OriginateAt
	}
	return 0
}

func (x *MemberAttempt) GetAnsweredAt() int64 {
	if x != nil {
		return x.AnsweredAt
	}
	return 0
}

func (x *MemberAttempt) GetBridgedAt() int64 {
	if x != nil {
		return x.BridgedAt
	}
	return 0
}

func (x *MemberAttempt) GetHangupAt() int64 {
	if x != nil {
		return x.HangupAt
	}
	return 0
}

func (x *MemberAttempt) GetResource() *Lookup {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *MemberAttempt) GetLegAId() string {
	if x != nil {
		return x.LegAId
	}
	return ""
}

func (x *MemberAttempt) GetLegBId() string {
	if x != nil {
		return x.LegBId
	}
	return ""
}

func (x *MemberAttempt) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *MemberAttempt) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *MemberAttempt) GetAgent() *Lookup {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *MemberAttempt) GetBucket() *Lookup {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *MemberAttempt) GetLogs() *structpb.Value {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *MemberAttempt) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *MemberAttempt) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

type DeleteMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	QueueId  int64 `protobuf:"varint,2,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	DomainId int64 `protobuf:"varint,3,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Force    bool  `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteMemberRequest) Reset() {
	*x = DeleteMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMemberRequest) ProtoMessage() {}

func (x *DeleteMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMemberRequest.ProtoReflect.Descriptor instead.
func (*DeleteMemberRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteMemberRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteMemberRequest) GetQueueId() int64 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *DeleteMemberRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *DeleteMemberRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type PatchMemberOneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Priority       int32                               `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	ExpireAt       int64                               `protobuf:"varint,3,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	Variables      map[string]string                   `protobuf:"bytes,4,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Name           string                              `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Timezone       *Lookup                             `protobuf:"bytes,6,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Communications []*MemberCommunicationCreateRequest `protobuf:"bytes,7,rep,name=communications,proto3" json:"communications,omitempty"`
	Bucket         *Lookup                             `protobuf:"bytes,8,opt,name=bucket,proto3" json:"bucket,omitempty"`
	MinOfferingAt  int64                               `protobuf:"varint,9,opt,name=min_offering_at,json=minOfferingAt,proto3" json:"min_offering_at,omitempty"`
	StopCause      string                              `protobuf:"bytes,10,opt,name=stop_cause,json=stopCause,proto3" json:"stop_cause,omitempty"`
	Fields         []string                            `protobuf:"bytes,11,rep,name=fields,proto3" json:"fields,omitempty"`
	DomainId       int64                               `protobuf:"varint,12,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Agent          *Lookup                             `protobuf:"bytes,13,opt,name=agent,proto3" json:"agent,omitempty"`
	Skill          *Lookup                             `protobuf:"bytes,14,opt,name=skill,proto3" json:"skill,omitempty"`
	Attempts       int32                               `protobuf:"varint,15,opt,name=attempts,proto3" json:"attempts,omitempty"`
}

func (x *PatchMemberOneRequest) Reset() {
	*x = PatchMemberOneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchMemberOneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchMemberOneRequest) ProtoMessage() {}

func (x *PatchMemberOneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchMemberOneRequest.ProtoReflect.Descriptor instead.
func (*PatchMemberOneRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{25}
}

func (x *PatchMemberOneRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PatchMemberOneRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *PatchMemberOneRequest) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *PatchMemberOneRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *PatchMemberOneRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchMemberOneRequest) GetTimezone() *Lookup {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *PatchMemberOneRequest) GetCommunications() []*MemberCommunicationCreateRequest {
	if x != nil {
		return x.Communications
	}
	return nil
}

func (x *PatchMemberOneRequest) GetBucket() *Lookup {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *PatchMemberOneRequest) GetMinOfferingAt() int64 {
	if x != nil {
		return x.MinOfferingAt
	}
	return 0
}

func (x *PatchMemberOneRequest) GetStopCause() string {
	if x != nil {
		return x.StopCause
	}
	return ""
}

func (x *PatchMemberOneRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PatchMemberOneRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *PatchMemberOneRequest) GetAgent() *Lookup {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *PatchMemberOneRequest) GetSkill() *Lookup {
	if x != nil {
		return x.Skill
	}
	return nil
}

func (x *PatchMemberOneRequest) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

type UpdateMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	QueueId        int64                               `protobuf:"varint,2,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Priority       int32                               `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	ExpireAt       int64                               `protobuf:"varint,4,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	Variables      map[string]string                   `protobuf:"bytes,5,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Name           string                              `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Timezone       *Lookup                             `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Communications []*MemberCommunicationCreateRequest `protobuf:"bytes,8,rep,name=communications,proto3" json:"communications,omitempty"`
	Bucket         *Lookup                             `protobuf:"bytes,9,opt,name=bucket,proto3" json:"bucket,omitempty"`
	MinOfferingAt  int64                               `protobuf:"varint,11,opt,name=min_offering_at,json=minOfferingAt,proto3" json:"min_offering_at,omitempty"`
	StopCause      string                              `protobuf:"bytes,12,opt,name=stop_cause,json=stopCause,proto3" json:"stop_cause,omitempty"`
	DomainId       int64                               `protobuf:"varint,13,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Agent          *Lookup                             `protobuf:"bytes,14,opt,name=agent,proto3" json:"agent,omitempty"`
	Skill          *Lookup                             `protobuf:"bytes,15,opt,name=skill,proto3" json:"skill,omitempty"`
}

func (x *UpdateMemberRequest) Reset() {
	*x = UpdateMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemberRequest) ProtoMessage() {}

func (x *UpdateMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemberRequest.ProtoReflect.Descriptor instead.
func (*UpdateMemberRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateMemberRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateMemberRequest) GetQueueId() int64 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *UpdateMemberRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *UpdateMemberRequest) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *UpdateMemberRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *UpdateMemberRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateMemberRequest) GetTimezone() *Lookup {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *UpdateMemberRequest) GetCommunications() []*MemberCommunicationCreateRequest {
	if x != nil {
		return x.Communications
	}
	return nil
}

func (x *UpdateMemberRequest) GetBucket() *Lookup {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *UpdateMemberRequest) GetMinOfferingAt() int64 {
	if x != nil {
		return x.MinOfferingAt
	}
	return 0
}

func (x *UpdateMemberRequest) GetStopCause() string {
	if x != nil {
		return x.StopCause
	}
	return ""
}

func (x *UpdateMemberRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *UpdateMemberRequest) GetAgent() *Lookup {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *UpdateMemberRequest) GetSkill() *Lookup {
	if x != nil {
		return x.Skill
	}
	return nil
}

type ReadMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	QueueId  int64 `protobuf:"varint,2,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	DomainId int64 `protobuf:"varint,3,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *ReadMemberRequest) Reset() {
	*x = ReadMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadMemberRequest) ProtoMessage() {}

func (x *ReadMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadMemberRequest.ProtoReflect.Descriptor instead.
func (*ReadMemberRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{27}
}

func (x *ReadMemberRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReadMemberRequest) GetQueueId() int64 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *ReadMemberRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

type CreateMemberBulkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId  int64                   `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Items    []*CreateMemberBulkItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	FileName string                  `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *CreateMemberBulkRequest) Reset() {
	*x = CreateMemberBulkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMemberBulkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMemberBulkRequest) ProtoMessage() {}

func (x *CreateMemberBulkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMemberBulkRequest.ProtoReflect.Descriptor instead.
func (*CreateMemberBulkRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{28}
}

func (x *CreateMemberBulkRequest) GetQueueId() int64 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *CreateMemberBulkRequest) GetItems() []*CreateMemberBulkItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CreateMemberBulkRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type CreateMemberBulkItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority       int32                               `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	ExpireAt       int64                               `protobuf:"varint,2,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	Variables      map[string]string                   `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Name           string                              `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Timezone       *Lookup                             `protobuf:"bytes,5,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Communications []*MemberCommunicationCreateRequest `protobuf:"bytes,6,rep,name=communications,proto3" json:"communications,omitempty"`
	Bucket         *Lookup                             `protobuf:"bytes,7,opt,name=bucket,proto3" json:"bucket,omitempty"`
	MinOfferingAt  int64                               `protobuf:"varint,9,opt,name=min_offering_at,json=minOfferingAt,proto3" json:"min_offering_at,omitempty"`
	Agent          *Lookup                             `protobuf:"bytes,10,opt,name=agent,proto3" json:"agent,omitempty"`
	Skill          *Lookup                             `protobuf:"bytes,11,opt,name=skill,proto3" json:"skill,omitempty"`
}

func (x *CreateMemberBulkItem) Reset() {
	*x = CreateMemberBulkItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMemberBulkItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMemberBulkItem) ProtoMessage() {}

func (x *CreateMemberBulkItem) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMemberBulkItem.ProtoReflect.Descriptor instead.
func (*CreateMemberBulkItem) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{29}
}

func (x *CreateMemberBulkItem) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *CreateMemberBulkItem) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *CreateMemberBulkItem) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *CreateMemberBulkItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateMemberBulkItem) GetTimezone() *Lookup {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *CreateMemberBulkItem) GetCommunications() []*MemberCommunicationCreateRequest {
	if x != nil {
		return x.Communications
	}
	return nil
}

func (x *CreateMemberBulkItem) GetBucket() *Lookup {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *CreateMemberBulkItem) GetMinOfferingAt() int64 {
	if x != nil {
		return x.MinOfferingAt
	}
	return 0
}

func (x *CreateMemberBulkItem) GetAgent() *Lookup {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *CreateMemberBulkItem) GetSkill() *Lookup {
	if x != nil {
		return x.Skill
	}
	return nil
}

type MemberBulkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *MemberBulkResponse) Reset() {
	*x = MemberBulkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberBulkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberBulkResponse) ProtoMessage() {}

func (x *MemberBulkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberBulkResponse.ProtoReflect.Descriptor instead.
func (*MemberBulkResponse) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{30}
}

func (x *MemberBulkResponse) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type SearchMemberInQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        int32             `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size        int32             `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q           string            `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Sort        string            `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields      []string          `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
	Id          []int64           `protobuf:"varint,7,rep,packed,name=id,proto3" json:"id,omitempty"`
	QueueId     int32             `protobuf:"varint,8,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	BucketId    []int32           `protobuf:"varint,9,rep,packed,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	Destination string            `protobuf:"bytes,10,opt,name=destination,proto3" json:"destination,omitempty"`
	CreatedAt   *FilterBetween    `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	OfferingAt  *FilterBetween    `protobuf:"bytes,12,opt,name=offering_at,json=offeringAt,proto3" json:"offering_at,omitempty"`
	StopCause   []string          `protobuf:"bytes,13,rep,name=stop_cause,json=stopCause,proto3" json:"stop_cause,omitempty"`
	Priority    *FilterBetween    `protobuf:"bytes,14,opt,name=priority,proto3" json:"priority,omitempty"`
	Name        string            `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`
	Attempts    *FilterBetween    `protobuf:"bytes,16,opt,name=attempts,proto3" json:"attempts,omitempty"`
	AgentId     []int32           `protobuf:"varint,17,rep,packed,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Variables   map[string]string `protobuf:"bytes,18,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchMemberInQueueRequest) Reset() {
	*x = SearchMemberInQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMemberInQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMemberInQueueRequest) ProtoMessage() {}

func (x *SearchMemberInQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMemberInQueueRequest.ProtoReflect.Descriptor instead.
func (*SearchMemberInQueueRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{31}
}

func (x *SearchMemberInQueueRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchMemberInQueueRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchMemberInQueueRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchMemberInQueueRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchMemberInQueueRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchMemberInQueueRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchMemberInQueueRequest) GetQueueId() int32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *SearchMemberInQueueRequest) GetBucketId() []int32 {
	if x != nil {
		return x.BucketId
	}
	return nil
}

func (x *SearchMemberInQueueRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *SearchMemberInQueueRequest) GetCreatedAt() *FilterBetween {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SearchMemberInQueueRequest) GetOfferingAt() *FilterBetween {
	if x != nil {
		return x.OfferingAt
	}
	return nil
}

func (x *SearchMemberInQueueRequest) GetStopCause() []string {
	if x != nil {
		return x.StopCause
	}
	return nil
}

func (x *SearchMemberInQueueRequest) GetPriority() *FilterBetween {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *SearchMemberInQueueRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchMemberInQueueRequest) GetAttempts() *FilterBetween {
	if x != nil {
		return x.Attempts
	}
	return nil
}

func (x *SearchMemberInQueueRequest) GetAgentId() []int32 {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *SearchMemberInQueueRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

type ListMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next  bool             `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items []*MemberInQueue `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListMember) Reset() {
	*x = ListMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMember) ProtoMessage() {}

func (x *ListMember) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMember.ProtoReflect.Descriptor instead.
func (*ListMember) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{32}
}

func (x *ListMember) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListMember) GetItems() []*MemberInQueue {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId        int64                               `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Priority       int32                               `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	ExpireAt       int64                               `protobuf:"varint,3,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	Variables      map[string]string                   `protobuf:"bytes,4,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Name           string                              `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Timezone       *Lookup                             `protobuf:"bytes,6,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Communications []*MemberCommunicationCreateRequest `protobuf:"bytes,7,rep,name=communications,proto3" json:"communications,omitempty"`
	Bucket         *Lookup                             `protobuf:"bytes,8,opt,name=bucket,proto3" json:"bucket,omitempty"`
	MinOfferingAt  int64                               `protobuf:"varint,10,opt,name=min_offering_at,json=minOfferingAt,proto3" json:"min_offering_at,omitempty"`
	DomainId       int64                               `protobuf:"varint,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Agent          *Lookup                             `protobuf:"bytes,12,opt,name=agent,proto3" json:"agent,omitempty"`
	Skill          *Lookup                             `protobuf:"bytes,13,opt,name=skill,proto3" json:"skill,omitempty"`
}

func (x *CreateMemberRequest) Reset() {
	*x = CreateMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMemberRequest) ProtoMessage() {}

func (x *CreateMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMemberRequest.ProtoReflect.Descriptor instead.
func (*CreateMemberRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{33}
}

func (x *CreateMemberRequest) GetQueueId() int64 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *CreateMemberRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *CreateMemberRequest) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *CreateMemberRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *CreateMemberRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateMemberRequest) GetTimezone() *Lookup {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *CreateMemberRequest) GetCommunications() []*MemberCommunicationCreateRequest {
	if x != nil {
		return x.Communications
	}
	return nil
}

func (x *CreateMemberRequest) GetBucket() *Lookup {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *CreateMemberRequest) GetMinOfferingAt() int64 {
	if x != nil {
		return x.MinOfferingAt
	}
	return 0
}

func (x *CreateMemberRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *CreateMemberRequest) GetAgent() *Lookup {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *CreateMemberRequest) GetSkill() *Lookup {
	if x != nil {
		return x.Skill
	}
	return nil
}

type MemberInQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Queue          *Lookup                `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	Priority       int32                  `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	ExpireAt       int64                  `protobuf:"varint,4,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	CreatedAt      int64                  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Variables      map[string]string      `protobuf:"bytes,6,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Name           string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Timezone       *Lookup                `protobuf:"bytes,8,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Communications []*MemberCommunication `protobuf:"bytes,9,rep,name=communications,proto3" json:"communications,omitempty"`
	Bucket         *Lookup                `protobuf:"bytes,10,opt,name=bucket,proto3" json:"bucket,omitempty"`
	MinOfferingAt  int64                  `protobuf:"varint,12,opt,name=min_offering_at,json=minOfferingAt,proto3" json:"min_offering_at,omitempty"` // deprecated
	StopCause      string                 `protobuf:"bytes,13,opt,name=stop_cause,json=stopCause,proto3" json:"stop_cause,omitempty"`
	LastActivityAt int64                  `protobuf:"varint,14,opt,name=last_activity_at,json=lastActivityAt,proto3" json:"last_activity_at,omitempty"`
	Attempts       int32                  `protobuf:"varint,15,opt,name=attempts,proto3" json:"attempts,omitempty"`
	Reserved       bool                   `protobuf:"varint,16,opt,name=reserved,proto3" json:"reserved,omitempty"`
	Agent          *Lookup                `protobuf:"bytes,17,opt,name=agent,proto3" json:"agent,omitempty"`
	Skill          *Lookup                `protobuf:"bytes,18,opt,name=skill,proto3" json:"skill,omitempty"`
}

func (x *MemberInQueue) Reset() {
	*x = MemberInQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberInQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberInQueue) ProtoMessage() {}

func (x *MemberInQueue) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberInQueue.ProtoReflect.Descriptor instead.
func (*MemberInQueue) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{34}
}

func (x *MemberInQueue) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MemberInQueue) GetQueue() *Lookup {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *MemberInQueue) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *MemberInQueue) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *MemberInQueue) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MemberInQueue) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *MemberInQueue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MemberInQueue) GetTimezone() *Lookup {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *MemberInQueue) GetCommunications() []*MemberCommunication {
	if x != nil {
		return x.Communications
	}
	return nil
}

func (x *MemberInQueue) GetBucket() *Lookup {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *MemberInQueue) GetMinOfferingAt() int64 {
	if x != nil {
		return x.MinOfferingAt
	}
	return 0
}

func (x *MemberInQueue) GetStopCause() string {
	if x != nil {
		return x.StopCause
	}
	return ""
}

func (x *MemberInQueue) GetLastActivityAt() int64 {
	if x != nil {
		return x.LastActivityAt
	}
	return 0
}

func (x *MemberInQueue) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *MemberInQueue) GetReserved() bool {
	if x != nil {
		return x.Reserved
	}
	return false
}

func (x *MemberInQueue) GetAgent() *Lookup {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *MemberInQueue) GetSkill() *Lookup {
	if x != nil {
		return x.Skill
	}
	return nil
}

type MemberCommunication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Destination    string  `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	Type           *Lookup `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Priority       int32   `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	Description    string  `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Resource       *Lookup `protobuf:"bytes,6,opt,name=resource,proto3" json:"resource,omitempty"`
	Display        string  `protobuf:"bytes,7,opt,name=display,proto3" json:"display,omitempty"`
	State          int32   `protobuf:"varint,8,opt,name=state,proto3" json:"state,omitempty"`
	LastActivityAt int64   `protobuf:"varint,9,opt,name=last_activity_at,json=lastActivityAt,proto3" json:"last_activity_at,omitempty"`
	Attempts       int32   `protobuf:"varint,10,opt,name=attempts,proto3" json:"attempts,omitempty"`
	LastCause      string  `protobuf:"bytes,11,opt,name=last_cause,json=lastCause,proto3" json:"last_cause,omitempty"`
	StopAt         int64   `protobuf:"varint,12,opt,name=stop_at,json=stopAt,proto3" json:"stop_at,omitempty"`
	Dtmf           string  `protobuf:"bytes,13,opt,name=dtmf,proto3" json:"dtmf,omitempty"`
}

func (x *MemberCommunication) Reset() {
	*x = MemberCommunication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberCommunication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberCommunication) ProtoMessage() {}

func (x *MemberCommunication) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberCommunication.ProtoReflect.Descriptor instead.
func (*MemberCommunication) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{35}
}

func (x *MemberCommunication) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MemberCommunication) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *MemberCommunication) GetType() *Lookup {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MemberCommunication) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *MemberCommunication) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MemberCommunication) GetResource() *Lookup {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *MemberCommunication) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *MemberCommunication) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *MemberCommunication) GetLastActivityAt() int64 {
	if x != nil {
		return x.LastActivityAt
	}
	return 0
}

func (x *MemberCommunication) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *MemberCommunication) GetLastCause() string {
	if x != nil {
		return x.LastCause
	}
	return ""
}

func (x *MemberCommunication) GetStopAt() int64 {
	if x != nil {
		return x.StopAt
	}
	return 0
}

func (x *MemberCommunication) GetDtmf() string {
	if x != nil {
		return x.Dtmf
	}
	return ""
}

type MemberCommunicationCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination string  `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Type        *Lookup `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Priority    int32   `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	Description string  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Resource    *Lookup `protobuf:"bytes,5,opt,name=resource,proto3" json:"resource,omitempty"`
	Display     string  `protobuf:"bytes,6,opt,name=display,proto3" json:"display,omitempty"`
	StopAt      int64   `protobuf:"varint,7,opt,name=stop_at,json=stopAt,proto3" json:"stop_at,omitempty"`
	Dtmf        string  `protobuf:"bytes,8,opt,name=dtmf,proto3" json:"dtmf,omitempty"`
}

func (x *MemberCommunicationCreateRequest) Reset() {
	*x = MemberCommunicationCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberCommunicationCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberCommunicationCreateRequest) ProtoMessage() {}

func (x *MemberCommunicationCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberCommunicationCreateRequest.ProtoReflect.Descriptor instead.
func (*MemberCommunicationCreateRequest) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{36}
}

func (x *MemberCommunicationCreateRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *MemberCommunicationCreateRequest) GetType() *Lookup {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MemberCommunicationCreateRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *MemberCommunicationCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MemberCommunicationCreateRequest) GetResource() *Lookup {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *MemberCommunicationCreateRequest) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *MemberCommunicationCreateRequest) GetStopAt() int64 {
	if x != nil {
		return x.StopAt
	}
	return 0
}

func (x *MemberCommunicationCreateRequest) GetDtmf() string {
	if x != nil {
		return x.Dtmf
	}
	return ""
}

var File_member_proto protoreflect.FileDescriptor

var file_member_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x1a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x56, 0x0a, 0x1b, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x22, 0x1e, 0x0a, 0x1c, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x69, 0x64, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x05, 0x0a, 0x12, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x50,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x26, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x1a, 0x3c, 0x0a, 0x0e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x64, 0x22, 0xaa, 0x04, 0x0a, 0x16,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x41, 0x74, 0x12, 0x4b, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x1d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x77, 0x61, 0x69, 0x74, 0x42, 0x65,
	0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb0, 0x05, 0x0a, 0x14, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x1d, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x14, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x77, 0x61, 0x69,
	0x74, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x1a, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a,
	0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x15, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x56, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x48, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x91,
	0x07, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x35, 0x0a,
	0x0e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x89, 0x07, 0x0a, 0x07, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3d, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90,
	0x04, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x6a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65,
	0x6e, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x0b,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x84, 0x04, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65,
	0x6e, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x0b,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x6e, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xbb, 0x02, 0x0a, 0x1c, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xb6, 0x05, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0c, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x36, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x0a, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xaa, 0x05, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65,
	0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x4c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x3c,
	0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x03, 0x0a,
	0x13, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x2c, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x54, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x72, 0x0a, 0x1b, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xda, 0x04, 0x0a, 0x0d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x41, 0x74, 0x12, 0x2a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x6c, 0x65,
	0x67, 0x5f, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65,
	0x67, 0x41, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x6c, 0x65, 0x67, 0x5f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x67, 0x42, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x88, 0x05,
	0x0a, 0x15, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74,
	0x12, 0x4a, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x50, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26,
	0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6d, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x04, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x41, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x50,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x26, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x75, 0x6c, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x04, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x49, 0x0a,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x69, 0x6e,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x26, 0x0a, 0x12, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x75,
	0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x99, 0x05, 0x0a,
	0x1a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65,
	0x65, 0x6e, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a,
	0x0b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xbc, 0x04, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x41, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x50, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x26, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x05, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x26, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x1a, 0x3c, 0x0a, 0x0e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x03, 0x0a, 0x13, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x70, 0x41, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x74, 0x6d, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x74, 0x6d, 0x66, 0x22, 0x99, 0x02, 0x0a, 0x20, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x70, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x74, 0x6d, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x74, 0x6d, 0x66,
	0x32, 0xb8, 0x14, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x75, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01,
	0x2a, 0x22, 0x26, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x1f,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x62,
	0x75, 0x6c, 0x6b, 0x12, 0x5f, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14,
	0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x6c, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x12, 0x1d, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x32, 0x19, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x7d, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x22, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x7b,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x73, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x7b,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7a, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x30, 0x3a, 0x01, 0x2a, 0x1a, 0x2b, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x78, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x32,
	0x2b, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x77, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x2a, 0x2b, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x74, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x3a, 0x01, 0x2a, 0x2a, 0x26, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x6f, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x1f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x2a,
	0x1b, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x82, 0x01, 0x0a,
	0x0c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31,
	0x3a, 0x01, 0x2a, 0x32, 0x2c, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x12, 0x9b, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12,
	0x71, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x12, 0x1d, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x1a, 0x29,
	0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0x2c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0xa0, 0x01, 0x0a,
	0x15, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x32, 0x31, 0x2f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x12,
	0xa1, 0x01, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x3a, 0x01, 0x2a, 0x32, 0x48, 0x2f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x7b,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0x7f, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a,
	0x32, 0x22, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0x94, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x3a, 0x01, 0x2a, 0x22, 0x3b,
	0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x42, 0x22, 0x5a, 0x20, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_member_proto_rawDescOnce sync.Once
	file_member_proto_rawDescData = file_member_proto_rawDesc
)

func file_member_proto_rawDescGZIP() []byte {
	file_member_proto_rawDescOnce.Do(func() {
		file_member_proto_rawDescData = protoimpl.X.CompressGZIP(file_member_proto_rawDescData)
	})
	return file_member_proto_rawDescData
}

var file_member_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_member_proto_goTypes = []interface{}{
	(*AttemptRenewalResultRequest)(nil),      // 0: engine.AttemptRenewalResultRequest
	(*AttemptRenewalResultResponse)(nil),     // 1: engine.AttemptRenewalResultResponse
	(*ResetActiveAttemptsRequest)(nil),       // 2: engine.ResetActiveAttemptsRequest
	(*ResetActiveAttemptsResponse)(nil),      // 3: engine.ResetActiveAttemptsResponse
	(*PatchMemberRequest)(nil),               // 4: engine.PatchMemberRequest
	(*CreateAttemptRequest)(nil),             // 5: engine.CreateAttemptRequest
	(*CreateAttemptResponse)(nil),            // 6: engine.CreateAttemptResponse
	(*AttemptCallbackRequest)(nil),           // 7: engine.AttemptCallbackRequest
	(*AttemptResultRequest)(nil),             // 8: engine.AttemptResultRequest
	(*AttemptResultResponse)(nil),            // 9: engine.AttemptResultResponse
	(*ListHistoryAttempt)(nil),               // 10: engine.ListHistoryAttempt
	(*ListAttempt)(nil),                      // 11: engine.ListAttempt
	(*AttemptHistory)(nil),                   // 12: engine.AttemptHistory
	(*Attempt)(nil),                          // 13: engine.Attempt
	(*SearchAttemptsRequest)(nil),            // 14: engine.SearchAttemptsRequest
	(*SearchMembersRequest)(nil),             // 15: engine.SearchMembersRequest
	(*SearchMembersAttemptsRequest)(nil),     // 16: engine.SearchMembersAttemptsRequest
	(*DeleteMembersRequest)(nil),             // 17: engine.DeleteMembersRequest
	(*DeleteAllMembersRequest)(nil),          // 18: engine.DeleteAllMembersRequest
	(*ResetMembersRequest)(nil),              // 19: engine.ResetMembersRequest
	(*ResetMembersResponse)(nil),             // 20: engine.ResetMembersResponse
	(*ListMemberAttempt)(nil),                // 21: engine.ListMemberAttempt
	(*SearchMemberAttemptsRequest)(nil),      // 22: engine.SearchMemberAttemptsRequest
	(*MemberAttempt)(nil),                    // 23: engine.MemberAttempt
	(*DeleteMemberRequest)(nil),              // 24: engine.DeleteMemberRequest
	(*PatchMemberOneRequest)(nil),            // 25: engine.PatchMemberOneRequest
	(*UpdateMemberRequest)(nil),              // 26: engine.UpdateMemberRequest
	(*ReadMemberRequest)(nil),                // 27: engine.ReadMemberRequest
	(*CreateMemberBulkRequest)(nil),          // 28: engine.CreateMemberBulkRequest
	(*CreateMemberBulkItem)(nil),             // 29: engine.CreateMemberBulkItem
	(*MemberBulkResponse)(nil),               // 30: engine.MemberBulkResponse
	(*SearchMemberInQueueRequest)(nil),       // 31: engine.SearchMemberInQueueRequest
	(*ListMember)(nil),                       // 32: engine.ListMember
	(*CreateMemberRequest)(nil),              // 33: engine.CreateMemberRequest
	(*MemberInQueue)(nil),                    // 34: engine.MemberInQueue
	(*MemberCommunication)(nil),              // 35: engine.MemberCommunication
	(*MemberCommunicationCreateRequest)(nil), // 36: engine.MemberCommunicationCreateRequest
	nil,                                      // 37: engine.PatchMemberRequest.VariablesEntry
	nil,                                      // 38: engine.AttemptCallbackRequest.VariablesEntry
	nil,                                      // 39: engine.AttemptResultRequest.VariablesEntry
	nil,                                      // 40: engine.AttemptHistory.VariablesEntry
	nil,                                      // 41: engine.Attempt.VariablesEntry
	nil,                                      // 42: engine.DeleteMembersRequest.VariablesEntry
	nil,                                      // 43: engine.DeleteAllMembersRequest.VariablesEntry
	nil,                                      // 44: engine.ResetMembersRequest.VariablesEntry
	nil,                                      // 45: engine.PatchMemberOneRequest.VariablesEntry
	nil,                                      // 46: engine.UpdateMemberRequest.VariablesEntry
	nil,                                      // 47: engine.CreateMemberBulkItem.VariablesEntry
	nil,                                      // 48: engine.SearchMemberInQueueRequest.VariablesEntry
	nil,                                      // 49: engine.CreateMemberRequest.VariablesEntry
	nil,                                      // 50: engine.MemberInQueue.VariablesEntry
	(*Lookup)(nil),                           // 51: engine.Lookup
	(*FilterBetween)(nil),                    // 52: engine.FilterBetween
	(*structpb.Value)(nil),                   // 53: google.protobuf.Value
}
var file_member_proto_depIdxs = []int32{
	37,  // 0: engine.PatchMemberRequest.variables:type_name -> engine.PatchMemberRequest.VariablesEntry
	51,  // 1: engine.PatchMemberRequest.timezone:type_name -> engine.Lookup
	36,  // 2: engine.PatchMemberRequest.communications:type_name -> engine.MemberCommunicationCreateRequest
	51,  // 3: engine.PatchMemberRequest.bucket:type_name -> engine.Lookup
	51,  // 4: engine.PatchMemberRequest.agent:type_name -> engine.Lookup
	51,  // 5: engine.PatchMemberRequest.skill:type_name -> engine.Lookup
	38,  // 6: engine.AttemptCallbackRequest.variables:type_name -> engine.AttemptCallbackRequest.VariablesEntry
	39,  // 7: engine.AttemptResultRequest.variables:type_name -> engine.AttemptResultRequest.VariablesEntry
	12,  // 8: engine.ListHistoryAttempt.items:type_name -> engine.AttemptHistory
	13,  // 9: engine.ListAttempt.items:type_name -> engine.Attempt
	51,  // 10: engine.AttemptHistory.queue:type_name -> engine.Lookup
	51,  // 11: engine.AttemptHistory.member:type_name -> engine.Lookup
	40,  // 12: engine.AttemptHistory.variables:type_name -> engine.AttemptHistory.VariablesEntry
	51,  // 13: engine.AttemptHistory.agent:type_name -> engine.Lookup
	51,  // 14: engine.AttemptHistory.resource:type_name -> engine.Lookup
	51,  // 15: engine.AttemptHistory.bucket:type_name -> engine.Lookup
	51,  // 16: engine.AttemptHistory.list:type_name -> engine.Lookup
	35,  // 17: engine.AttemptHistory.destination:type_name -> engine.MemberCommunication
	51,  // 18: engine.AttemptHistory.offered_agents:type_name -> engine.Lookup
	51,  // 19: engine.Attempt.queue:type_name -> engine.Lookup
	51,  // 20: engine.Attempt.member:type_name -> engine.Lookup
	41,  // 21: engine.Attempt.variables:type_name -> engine.Attempt.VariablesEntry
	51,  // 22: engine.Attempt.agent:type_name -> engine.Lookup
	51,  // 23: engine.Attempt.resource:type_name -> engine.Lookup
	51,  // 24: engine.Attempt.bucket:type_name -> engine.Lookup
	51,  // 25: engine.Attempt.list:type_name -> engine.Lookup
	35,  // 26: engine.Attempt.destination:type_name -> engine.MemberCommunication
	52,  // 27: engine.SearchAttemptsRequest.joined_at:type_name -> engine.FilterBetween
	52,  // 28: engine.SearchAttemptsRequest.leaving_at:type_name -> engine.FilterBetween
	52,  // 29: engine.SearchAttemptsRequest.offering_at:type_name -> engine.FilterBetween
	52,  // 30: engine.SearchAttemptsRequest.duration:type_name -> engine.FilterBetween
	52,  // 31: engine.SearchMembersRequest.created_at:type_name -> engine.FilterBetween
	52,  // 32: engine.SearchMembersRequest.offering_at:type_name -> engine.FilterBetween
	52,  // 33: engine.SearchMembersRequest.priority:type_name -> engine.FilterBetween
	52,  // 34: engine.SearchMembersRequest.attempts:type_name -> engine.FilterBetween
	52,  // 35: engine.DeleteMembersRequest.created_at:type_name -> engine.FilterBetween
	52,  // 36: engine.DeleteMembersRequest.offering_at:type_name -> engine.FilterBetween
	52,  // 37: engine.DeleteMembersRequest.priority:type_name -> engine.FilterBetween
	52,  // 38: engine.DeleteMembersRequest.attempts:type_name -> engine.FilterBetween
	42,  // 39: engine.DeleteMembersRequest.variables:type_name -> engine.DeleteMembersRequest.VariablesEntry
	52,  // 40: engine.DeleteAllMembersRequest.created_at:type_name -> engine.FilterBetween
	52,  // 41: engine.DeleteAllMembersRequest.offering_at:type_name -> engine.FilterBetween
	52,  // 42: engine.DeleteAllMembersRequest.priority:type_name -> engine.FilterBetween
	52,  // 43: engine.DeleteAllMembersRequest.attempts:type_name -> engine.FilterBetween
	43,  // 44: engine.DeleteAllMembersRequest.variables:type_name -> engine.DeleteAllMembersRequest.VariablesEntry
	44,  // 45: engine.ResetMembersRequest.variables:type_name -> engine.ResetMembersRequest.VariablesEntry
	52,  // 46: engine.ResetMembersRequest.created_at:type_name -> engine.FilterBetween
	52,  // 47: engine.ResetMembersRequest.priority:type_name -> engine.FilterBetween
	23,  // 48: engine.ListMemberAttempt.items:type_name -> engine.MemberAttempt
	51,  // 49: engine.MemberAttempt.member:type_name -> engine.Lookup
	51,  // 50: engine.MemberAttempt.resource:type_name -> engine.Lookup
	51,  // 51: engine.MemberAttempt.agent:type_name -> engine.Lookup
	51,  // 52: engine.MemberAttempt.bucket:type_name -> engine.Lookup
	53,  // 53: engine.MemberAttempt.logs:type_name -> google.protobuf.Value
	45,  // 54: engine.PatchMemberOneRequest.variables:type_name -> engine.PatchMemberOneRequest.VariablesEntry
	51,  // 55: engine.PatchMemberOneRequest.timezone:type_name -> engine.Lookup
	36,  // 56: engine.PatchMemberOneRequest.communications:type_name -> engine.MemberCommunicationCreateRequest
	51,  // 57: engine.PatchMemberOneRequest.bucket:type_name -> engine.Lookup
	51,  // 58: engine.PatchMemberOneRequest.agent:type_name -> engine.Lookup
	51,  // 59: engine.PatchMemberOneRequest.skill:type_name -> engine.Lookup
	46,  // 60: engine.UpdateMemberRequest.variables:type_name -> engine.UpdateMemberRequest.VariablesEntry
	51,  // 61: engine.UpdateMemberRequest.timezone:type_name -> engine.Lookup
	36,  // 62: engine.UpdateMemberRequest.communications:type_name -> engine.MemberCommunicationCreateRequest
	51,  // 63: engine.UpdateMemberRequest.bucket:type_name -> engine.Lookup
	51,  // 64: engine.UpdateMemberRequest.agent:type_name -> engine.Lookup
	51,  // 65: engine.UpdateMemberRequest.skill:type_name -> engine.Lookup
	29,  // 66: engine.CreateMemberBulkRequest.items:type_name -> engine.CreateMemberBulkItem
	47,  // 67: engine.CreateMemberBulkItem.variables:type_name -> engine.CreateMemberBulkItem.VariablesEntry
	51,  // 68: engine.CreateMemberBulkItem.timezone:type_name -> engine.Lookup
	36,  // 69: engine.CreateMemberBulkItem.communications:type_name -> engine.MemberCommunicationCreateRequest
	51,  // 70: engine.CreateMemberBulkItem.bucket:type_name -> engine.Lookup
	51,  // 71: engine.CreateMemberBulkItem.agent:type_name -> engine.Lookup
	51,  // 72: engine.CreateMemberBulkItem.skill:type_name -> engine.Lookup
	52,  // 73: engine.SearchMemberInQueueRequest.created_at:type_name -> engine.FilterBetween
	52,  // 74: engine.SearchMemberInQueueRequest.offering_at:type_name -> engine.FilterBetween
	52,  // 75: engine.SearchMemberInQueueRequest.priority:type_name -> engine.FilterBetween
	52,  // 76: engine.SearchMemberInQueueRequest.attempts:type_name -> engine.FilterBetween
	48,  // 77: engine.SearchMemberInQueueRequest.variables:type_name -> engine.SearchMemberInQueueRequest.VariablesEntry
	34,  // 78: engine.ListMember.items:type_name -> engine.MemberInQueue
	49,  // 79: engine.CreateMemberRequest.variables:type_name -> engine.CreateMemberRequest.VariablesEntry
	51,  // 80: engine.CreateMemberRequest.timezone:type_name -> engine.Lookup
	36,  // 81: engine.CreateMemberRequest.communications:type_name -> engine.MemberCommunicationCreateRequest
	51,  // 82: engine.CreateMemberRequest.bucket:type_name -> engine.Lookup
	51,  // 83: engine.CreateMemberRequest.agent:type_name -> engine.Lookup
	51,  // 84: engine.CreateMemberRequest.skill:type_name -> engine.Lookup
	51,  // 85: engine.MemberInQueue.queue:type_name -> engine.Lookup
	50,  // 86: engine.MemberInQueue.variables:type_name -> engine.MemberInQueue.VariablesEntry
	51,  // 87: engine.MemberInQueue.timezone:type_name -> engine.Lookup
	35,  // 88: engine.MemberInQueue.communications:type_name -> engine.MemberCommunication
	51,  // 89: engine.MemberInQueue.bucket:type_name -> engine.Lookup
	51,  // 90: engine.MemberInQueue.agent:type_name -> engine.Lookup
	51,  // 91: engine.MemberInQueue.skill:type_name -> engine.Lookup
	51,  // 92: engine.MemberCommunication.type:type_name -> engine.Lookup
	51,  // 93: engine.MemberCommunication.resource:type_name -> engine.Lookup
	51,  // 94: engine.MemberCommunicationCreateRequest.type:type_name -> engine.Lookup
	51,  // 95: engine.MemberCommunicationCreateRequest.resource:type_name -> engine.Lookup
	33,  // 96: engine.MemberService.CreateMember:input_type -> engine.CreateMemberRequest
	28,  // 97: engine.MemberService.CreateMemberBulk:input_type -> engine.CreateMemberBulkRequest
	15,  // 98: engine.MemberService.SearchMembers:input_type -> engine.SearchMembersRequest
	25,  // 99: engine.MemberService.PatchMemberOne:input_type -> engine.PatchMemberOneRequest
	31,  // 100: engine.MemberService.SearchMemberInQueue:input_type -> engine.SearchMemberInQueueRequest
	27,  // 101: engine.MemberService.ReadMember:input_type -> engine.ReadMemberRequest
	26,  // 102: engine.MemberService.UpdateMember:input_type -> engine.UpdateMemberRequest
	4,   // 103: engine.MemberService.PatchMember:input_type -> engine.PatchMemberRequest
	24,  // 104: engine.MemberService.DeleteMember:input_type -> engine.DeleteMemberRequest
	17,  // 105: engine.MemberService.DeleteMembers:input_type -> engine.DeleteMembersRequest
	18,  // 106: engine.MemberService.DeleteAllMembers:input_type -> engine.DeleteAllMembersRequest
	19,  // 107: engine.MemberService.ResetMembers:input_type -> engine.ResetMembersRequest
	22,  // 108: engine.MemberService.SearchMemberAttempts:input_type -> engine.SearchMemberAttemptsRequest
	14,  // 109: engine.MemberService.SearchAttempts:input_type -> engine.SearchAttemptsRequest
	2,   // 110: engine.MemberService.ResetActiveAttempts:input_type -> engine.ResetActiveAttemptsRequest
	14,  // 111: engine.MemberService.SearchAttemptsHistory:input_type -> engine.SearchAttemptsRequest
	0,   // 112: engine.MemberService.AttemptsRenewalResult:input_type -> engine.AttemptRenewalResultRequest
	8,   // 113: engine.MemberService.AttemptResult:input_type -> engine.AttemptResultRequest
	7,   // 114: engine.MemberService.AttemptCallback:input_type -> engine.AttemptCallbackRequest
	5,   // 115: engine.MemberService.CreateAttempt:input_type -> engine.CreateAttemptRequest
	34,  // 116: engine.MemberService.CreateMember:output_type -> engine.MemberInQueue
	30,  // 117: engine.MemberService.CreateMemberBulk:output_type -> engine.MemberBulkResponse
	32,  // 118: engine.MemberService.SearchMembers:output_type -> engine.ListMember
	34,  // 119: engine.MemberService.PatchMemberOne:output_type -> engine.MemberInQueue
	32,  // 120: engine.MemberService.SearchMemberInQueue:output_type -> engine.ListMember
	34,  // 121: engine.MemberService.ReadMember:output_type -> engine.MemberInQueue
	34,  // 122: engine.MemberService.UpdateMember:output_type -> engine.MemberInQueue
	34,  // 123: engine.MemberService.PatchMember:output_type -> engine.MemberInQueue
	34,  // 124: engine.MemberService.DeleteMember:output_type -> engine.MemberInQueue
	32,  // 125: engine.MemberService.DeleteMembers:output_type -> engine.ListMember
	32,  // 126: engine.MemberService.DeleteAllMembers:output_type -> engine.ListMember
	20,  // 127: engine.MemberService.ResetMembers:output_type -> engine.ResetMembersResponse
	21,  // 128: engine.MemberService.SearchMemberAttempts:output_type -> engine.ListMemberAttempt
	11,  // 129: engine.MemberService.SearchAttempts:output_type -> engine.ListAttempt
	3,   // 130: engine.MemberService.ResetActiveAttempts:output_type -> engine.ResetActiveAttemptsResponse
	10,  // 131: engine.MemberService.SearchAttemptsHistory:output_type -> engine.ListHistoryAttempt
	1,   // 132: engine.MemberService.AttemptsRenewalResult:output_type -> engine.AttemptRenewalResultResponse
	9,   // 133: engine.MemberService.AttemptResult:output_type -> engine.AttemptResultResponse
	9,   // 134: engine.MemberService.AttemptCallback:output_type -> engine.AttemptResultResponse
	6,   // 135: engine.MemberService.CreateAttempt:output_type -> engine.CreateAttemptResponse
	116, // [116:136] is the sub-list for method output_type
	96,  // [96:116] is the sub-list for method input_type
	96,  // [96:96] is the sub-list for extension type_name
	96,  // [96:96] is the sub-list for extension extendee
	0,   // [0:96] is the sub-list for field type_name
}

func init() { file_member_proto_init() }
func file_member_proto_init() {
	if File_member_proto != nil {
		return
	}
	file_const_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_member_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttemptRenewalResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttemptRenewalResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetActiveAttemptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetActiveAttemptsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAttemptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAttemptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttemptCallbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttemptResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttemptResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHistoryAttempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAttempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttemptHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAttemptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMembersAttemptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAllMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMemberAttempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMemberAttemptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberAttempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchMemberOneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMemberBulkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMemberBulkItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberBulkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMemberInQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberInQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberCommunication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberCommunicationCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_member_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_member_proto_goTypes,
		DependencyIndexes: file_member_proto_depIdxs,
		MessageInfos:      file_member_proto_msgTypes,
	}.Build()
	File_member_proto = out.File
	file_member_proto_rawDesc = nil
	file_member_proto_goTypes = nil
	file_member_proto_depIdxs = nil
}
