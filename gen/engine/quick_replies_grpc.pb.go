// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: quick_replies.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuickRepliesService_CreateQuickReply_FullMethodName   = "/engine.QuickRepliesService/CreateQuickReply"
	QuickRepliesService_SearchQuickReplies_FullMethodName = "/engine.QuickRepliesService/SearchQuickReplies"
	QuickRepliesService_ReadQuickReply_FullMethodName     = "/engine.QuickRepliesService/ReadQuickReply"
	QuickRepliesService_PatchQuickReply_FullMethodName    = "/engine.QuickRepliesService/PatchQuickReply"
	QuickRepliesService_UpdateQuickReply_FullMethodName   = "/engine.QuickRepliesService/UpdateQuickReply"
	QuickRepliesService_DeleteQuickReply_FullMethodName   = "/engine.QuickRepliesService/DeleteQuickReply"
)

// QuickRepliesServiceClient is the client API for QuickRepliesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuickRepliesServiceClient interface {
	CreateQuickReply(ctx context.Context, in *CreateQuickReplyRequest, opts ...grpc.CallOption) (*QuickReply, error)
	SearchQuickReplies(ctx context.Context, in *SearchQuickRepliesRequest, opts ...grpc.CallOption) (*ListQuickReplies, error)
	ReadQuickReply(ctx context.Context, in *ReadQuickReplyRequest, opts ...grpc.CallOption) (*QuickReply, error)
	PatchQuickReply(ctx context.Context, in *PatchQuickReplyRequest, opts ...grpc.CallOption) (*QuickReply, error)
	UpdateQuickReply(ctx context.Context, in *UpdateQuickReplyRequest, opts ...grpc.CallOption) (*QuickReply, error)
	DeleteQuickReply(ctx context.Context, in *DeleteQuickReplyRequest, opts ...grpc.CallOption) (*QuickReply, error)
}

type quickRepliesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuickRepliesServiceClient(cc grpc.ClientConnInterface) QuickRepliesServiceClient {
	return &quickRepliesServiceClient{cc}
}

func (c *quickRepliesServiceClient) CreateQuickReply(ctx context.Context, in *CreateQuickReplyRequest, opts ...grpc.CallOption) (*QuickReply, error) {
	out := new(QuickReply)
	err := c.cc.Invoke(ctx, QuickRepliesService_CreateQuickReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickRepliesServiceClient) SearchQuickReplies(ctx context.Context, in *SearchQuickRepliesRequest, opts ...grpc.CallOption) (*ListQuickReplies, error) {
	out := new(ListQuickReplies)
	err := c.cc.Invoke(ctx, QuickRepliesService_SearchQuickReplies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickRepliesServiceClient) ReadQuickReply(ctx context.Context, in *ReadQuickReplyRequest, opts ...grpc.CallOption) (*QuickReply, error) {
	out := new(QuickReply)
	err := c.cc.Invoke(ctx, QuickRepliesService_ReadQuickReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickRepliesServiceClient) PatchQuickReply(ctx context.Context, in *PatchQuickReplyRequest, opts ...grpc.CallOption) (*QuickReply, error) {
	out := new(QuickReply)
	err := c.cc.Invoke(ctx, QuickRepliesService_PatchQuickReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickRepliesServiceClient) UpdateQuickReply(ctx context.Context, in *UpdateQuickReplyRequest, opts ...grpc.CallOption) (*QuickReply, error) {
	out := new(QuickReply)
	err := c.cc.Invoke(ctx, QuickRepliesService_UpdateQuickReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickRepliesServiceClient) DeleteQuickReply(ctx context.Context, in *DeleteQuickReplyRequest, opts ...grpc.CallOption) (*QuickReply, error) {
	out := new(QuickReply)
	err := c.cc.Invoke(ctx, QuickRepliesService_DeleteQuickReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuickRepliesServiceServer is the server API for QuickRepliesService service.
// All implementations must embed UnimplementedQuickRepliesServiceServer
// for forward compatibility
type QuickRepliesServiceServer interface {
	CreateQuickReply(context.Context, *CreateQuickReplyRequest) (*QuickReply, error)
	SearchQuickReplies(context.Context, *SearchQuickRepliesRequest) (*ListQuickReplies, error)
	ReadQuickReply(context.Context, *ReadQuickReplyRequest) (*QuickReply, error)
	PatchQuickReply(context.Context, *PatchQuickReplyRequest) (*QuickReply, error)
	UpdateQuickReply(context.Context, *UpdateQuickReplyRequest) (*QuickReply, error)
	DeleteQuickReply(context.Context, *DeleteQuickReplyRequest) (*QuickReply, error)
	mustEmbedUnimplementedQuickRepliesServiceServer()
}

// UnimplementedQuickRepliesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuickRepliesServiceServer struct {
}

func (UnimplementedQuickRepliesServiceServer) CreateQuickReply(context.Context, *CreateQuickReplyRequest) (*QuickReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuickReply not implemented")
}
func (UnimplementedQuickRepliesServiceServer) SearchQuickReplies(context.Context, *SearchQuickRepliesRequest) (*ListQuickReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchQuickReplies not implemented")
}
func (UnimplementedQuickRepliesServiceServer) ReadQuickReply(context.Context, *ReadQuickReplyRequest) (*QuickReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadQuickReply not implemented")
}
func (UnimplementedQuickRepliesServiceServer) PatchQuickReply(context.Context, *PatchQuickReplyRequest) (*QuickReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchQuickReply not implemented")
}
func (UnimplementedQuickRepliesServiceServer) UpdateQuickReply(context.Context, *UpdateQuickReplyRequest) (*QuickReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuickReply not implemented")
}
func (UnimplementedQuickRepliesServiceServer) DeleteQuickReply(context.Context, *DeleteQuickReplyRequest) (*QuickReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuickReply not implemented")
}
func (UnimplementedQuickRepliesServiceServer) mustEmbedUnimplementedQuickRepliesServiceServer() {}

// UnsafeQuickRepliesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuickRepliesServiceServer will
// result in compilation errors.
type UnsafeQuickRepliesServiceServer interface {
	mustEmbedUnimplementedQuickRepliesServiceServer()
}

func RegisterQuickRepliesServiceServer(s grpc.ServiceRegistrar, srv QuickRepliesServiceServer) {
	s.RegisterService(&QuickRepliesService_ServiceDesc, srv)
}

func _QuickRepliesService_CreateQuickReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuickReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickRepliesServiceServer).CreateQuickReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuickRepliesService_CreateQuickReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickRepliesServiceServer).CreateQuickReply(ctx, req.(*CreateQuickReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickRepliesService_SearchQuickReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQuickRepliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickRepliesServiceServer).SearchQuickReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuickRepliesService_SearchQuickReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickRepliesServiceServer).SearchQuickReplies(ctx, req.(*SearchQuickRepliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickRepliesService_ReadQuickReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadQuickReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickRepliesServiceServer).ReadQuickReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuickRepliesService_ReadQuickReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickRepliesServiceServer).ReadQuickReply(ctx, req.(*ReadQuickReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickRepliesService_PatchQuickReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchQuickReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickRepliesServiceServer).PatchQuickReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuickRepliesService_PatchQuickReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickRepliesServiceServer).PatchQuickReply(ctx, req.(*PatchQuickReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickRepliesService_UpdateQuickReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuickReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickRepliesServiceServer).UpdateQuickReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuickRepliesService_UpdateQuickReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickRepliesServiceServer).UpdateQuickReply(ctx, req.(*UpdateQuickReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickRepliesService_DeleteQuickReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuickReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickRepliesServiceServer).DeleteQuickReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuickRepliesService_DeleteQuickReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickRepliesServiceServer).DeleteQuickReply(ctx, req.(*DeleteQuickReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuickRepliesService_ServiceDesc is the grpc.ServiceDesc for QuickRepliesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuickRepliesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.QuickRepliesService",
	HandlerType: (*QuickRepliesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuickReply",
			Handler:    _QuickRepliesService_CreateQuickReply_Handler,
		},
		{
			MethodName: "SearchQuickReplies",
			Handler:    _QuickRepliesService_SearchQuickReplies_Handler,
		},
		{
			MethodName: "ReadQuickReply",
			Handler:    _QuickRepliesService_ReadQuickReply_Handler,
		},
		{
			MethodName: "PatchQuickReply",
			Handler:    _QuickRepliesService_PatchQuickReply_Handler,
		},
		{
			MethodName: "UpdateQuickReply",
			Handler:    _QuickRepliesService_UpdateQuickReply_Handler,
		},
		{
			MethodName: "DeleteQuickReply",
			Handler:    _QuickRepliesService_DeleteQuickReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quick_replies.proto",
}
