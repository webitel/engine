// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: team_hook.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TeamHookService_CreateTeamHook_FullMethodName = "/engine.TeamHookService/CreateTeamHook"
	TeamHookService_SearchTeamHook_FullMethodName = "/engine.TeamHookService/SearchTeamHook"
	TeamHookService_ReadTeamHook_FullMethodName   = "/engine.TeamHookService/ReadTeamHook"
	TeamHookService_UpdateTeamHook_FullMethodName = "/engine.TeamHookService/UpdateTeamHook"
	TeamHookService_PatchTeamHook_FullMethodName  = "/engine.TeamHookService/PatchTeamHook"
	TeamHookService_DeleteTeamHook_FullMethodName = "/engine.TeamHookService/DeleteTeamHook"
)

// TeamHookServiceClient is the client API for TeamHookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamHookServiceClient interface {
	CreateTeamHook(ctx context.Context, in *CreateTeamHookRequest, opts ...grpc.CallOption) (*TeamHook, error)
	SearchTeamHook(ctx context.Context, in *SearchTeamHookRequest, opts ...grpc.CallOption) (*ListTeamHook, error)
	ReadTeamHook(ctx context.Context, in *ReadTeamHookRequest, opts ...grpc.CallOption) (*TeamHook, error)
	UpdateTeamHook(ctx context.Context, in *UpdateTeamHookRequest, opts ...grpc.CallOption) (*TeamHook, error)
	PatchTeamHook(ctx context.Context, in *PatchTeamHookRequest, opts ...grpc.CallOption) (*TeamHook, error)
	DeleteTeamHook(ctx context.Context, in *DeleteTeamHookRequest, opts ...grpc.CallOption) (*TeamHook, error)
}

type teamHookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamHookServiceClient(cc grpc.ClientConnInterface) TeamHookServiceClient {
	return &teamHookServiceClient{cc}
}

func (c *teamHookServiceClient) CreateTeamHook(ctx context.Context, in *CreateTeamHookRequest, opts ...grpc.CallOption) (*TeamHook, error) {
	out := new(TeamHook)
	err := c.cc.Invoke(ctx, TeamHookService_CreateTeamHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamHookServiceClient) SearchTeamHook(ctx context.Context, in *SearchTeamHookRequest, opts ...grpc.CallOption) (*ListTeamHook, error) {
	out := new(ListTeamHook)
	err := c.cc.Invoke(ctx, TeamHookService_SearchTeamHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamHookServiceClient) ReadTeamHook(ctx context.Context, in *ReadTeamHookRequest, opts ...grpc.CallOption) (*TeamHook, error) {
	out := new(TeamHook)
	err := c.cc.Invoke(ctx, TeamHookService_ReadTeamHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamHookServiceClient) UpdateTeamHook(ctx context.Context, in *UpdateTeamHookRequest, opts ...grpc.CallOption) (*TeamHook, error) {
	out := new(TeamHook)
	err := c.cc.Invoke(ctx, TeamHookService_UpdateTeamHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamHookServiceClient) PatchTeamHook(ctx context.Context, in *PatchTeamHookRequest, opts ...grpc.CallOption) (*TeamHook, error) {
	out := new(TeamHook)
	err := c.cc.Invoke(ctx, TeamHookService_PatchTeamHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamHookServiceClient) DeleteTeamHook(ctx context.Context, in *DeleteTeamHookRequest, opts ...grpc.CallOption) (*TeamHook, error) {
	out := new(TeamHook)
	err := c.cc.Invoke(ctx, TeamHookService_DeleteTeamHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamHookServiceServer is the server API for TeamHookService service.
// All implementations must embed UnimplementedTeamHookServiceServer
// for forward compatibility
type TeamHookServiceServer interface {
	CreateTeamHook(context.Context, *CreateTeamHookRequest) (*TeamHook, error)
	SearchTeamHook(context.Context, *SearchTeamHookRequest) (*ListTeamHook, error)
	ReadTeamHook(context.Context, *ReadTeamHookRequest) (*TeamHook, error)
	UpdateTeamHook(context.Context, *UpdateTeamHookRequest) (*TeamHook, error)
	PatchTeamHook(context.Context, *PatchTeamHookRequest) (*TeamHook, error)
	DeleteTeamHook(context.Context, *DeleteTeamHookRequest) (*TeamHook, error)
	mustEmbedUnimplementedTeamHookServiceServer()
}

// UnimplementedTeamHookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTeamHookServiceServer struct {
}

func (UnimplementedTeamHookServiceServer) CreateTeamHook(context.Context, *CreateTeamHookRequest) (*TeamHook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeamHook not implemented")
}
func (UnimplementedTeamHookServiceServer) SearchTeamHook(context.Context, *SearchTeamHookRequest) (*ListTeamHook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTeamHook not implemented")
}
func (UnimplementedTeamHookServiceServer) ReadTeamHook(context.Context, *ReadTeamHookRequest) (*TeamHook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTeamHook not implemented")
}
func (UnimplementedTeamHookServiceServer) UpdateTeamHook(context.Context, *UpdateTeamHookRequest) (*TeamHook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeamHook not implemented")
}
func (UnimplementedTeamHookServiceServer) PatchTeamHook(context.Context, *PatchTeamHookRequest) (*TeamHook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchTeamHook not implemented")
}
func (UnimplementedTeamHookServiceServer) DeleteTeamHook(context.Context, *DeleteTeamHookRequest) (*TeamHook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeamHook not implemented")
}
func (UnimplementedTeamHookServiceServer) mustEmbedUnimplementedTeamHookServiceServer() {}

// UnsafeTeamHookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamHookServiceServer will
// result in compilation errors.
type UnsafeTeamHookServiceServer interface {
	mustEmbedUnimplementedTeamHookServiceServer()
}

func RegisterTeamHookServiceServer(s grpc.ServiceRegistrar, srv TeamHookServiceServer) {
	s.RegisterService(&TeamHookService_ServiceDesc, srv)
}

func _TeamHookService_CreateTeamHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamHookServiceServer).CreateTeamHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamHookService_CreateTeamHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamHookServiceServer).CreateTeamHook(ctx, req.(*CreateTeamHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamHookService_SearchTeamHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTeamHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamHookServiceServer).SearchTeamHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamHookService_SearchTeamHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamHookServiceServer).SearchTeamHook(ctx, req.(*SearchTeamHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamHookService_ReadTeamHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTeamHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamHookServiceServer).ReadTeamHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamHookService_ReadTeamHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamHookServiceServer).ReadTeamHook(ctx, req.(*ReadTeamHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamHookService_UpdateTeamHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamHookServiceServer).UpdateTeamHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamHookService_UpdateTeamHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamHookServiceServer).UpdateTeamHook(ctx, req.(*UpdateTeamHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamHookService_PatchTeamHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchTeamHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamHookServiceServer).PatchTeamHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamHookService_PatchTeamHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamHookServiceServer).PatchTeamHook(ctx, req.(*PatchTeamHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamHookService_DeleteTeamHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamHookServiceServer).DeleteTeamHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamHookService_DeleteTeamHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamHookServiceServer).DeleteTeamHook(ctx, req.(*DeleteTeamHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamHookService_ServiceDesc is the grpc.ServiceDesc for TeamHookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamHookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.TeamHookService",
	HandlerType: (*TeamHookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeamHook",
			Handler:    _TeamHookService_CreateTeamHook_Handler,
		},
		{
			MethodName: "SearchTeamHook",
			Handler:    _TeamHookService_SearchTeamHook_Handler,
		},
		{
			MethodName: "ReadTeamHook",
			Handler:    _TeamHookService_ReadTeamHook_Handler,
		},
		{
			MethodName: "UpdateTeamHook",
			Handler:    _TeamHookService_UpdateTeamHook_Handler,
		},
		{
			MethodName: "PatchTeamHook",
			Handler:    _TeamHookService_PatchTeamHook_Handler,
		},
		{
			MethodName: "DeleteTeamHook",
			Handler:    _TeamHookService_DeleteTeamHook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "team_hook.proto",
}
