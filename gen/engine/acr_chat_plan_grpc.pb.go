// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: acr_chat_plan.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoutingChatPlanService_CreateChatPlan_FullMethodName = "/engine.RoutingChatPlanService/CreateChatPlan"
	RoutingChatPlanService_SearchChatPlan_FullMethodName = "/engine.RoutingChatPlanService/SearchChatPlan"
	RoutingChatPlanService_ReadChatPlan_FullMethodName   = "/engine.RoutingChatPlanService/ReadChatPlan"
	RoutingChatPlanService_UpdateChatPlan_FullMethodName = "/engine.RoutingChatPlanService/UpdateChatPlan"
	RoutingChatPlanService_PatchChatPlan_FullMethodName  = "/engine.RoutingChatPlanService/PatchChatPlan"
	RoutingChatPlanService_DeleteChatPlan_FullMethodName = "/engine.RoutingChatPlanService/DeleteChatPlan"
)

// RoutingChatPlanServiceClient is the client API for RoutingChatPlanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutingChatPlanServiceClient interface {
	CreateChatPlan(ctx context.Context, in *CreateChatPlanRequest, opts ...grpc.CallOption) (*ChatPlan, error)
	SearchChatPlan(ctx context.Context, in *SearchChatPlanRequest, opts ...grpc.CallOption) (*ListChatPlan, error)
	ReadChatPlan(ctx context.Context, in *ReadChatPlanRequest, opts ...grpc.CallOption) (*ChatPlan, error)
	UpdateChatPlan(ctx context.Context, in *UpdateChatPlanRequest, opts ...grpc.CallOption) (*ChatPlan, error)
	PatchChatPlan(ctx context.Context, in *PatchChatPlanRequest, opts ...grpc.CallOption) (*ChatPlan, error)
	DeleteChatPlan(ctx context.Context, in *DeleteChatPlanRequest, opts ...grpc.CallOption) (*ChatPlan, error)
}

type routingChatPlanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutingChatPlanServiceClient(cc grpc.ClientConnInterface) RoutingChatPlanServiceClient {
	return &routingChatPlanServiceClient{cc}
}

func (c *routingChatPlanServiceClient) CreateChatPlan(ctx context.Context, in *CreateChatPlanRequest, opts ...grpc.CallOption) (*ChatPlan, error) {
	out := new(ChatPlan)
	err := c.cc.Invoke(ctx, RoutingChatPlanService_CreateChatPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingChatPlanServiceClient) SearchChatPlan(ctx context.Context, in *SearchChatPlanRequest, opts ...grpc.CallOption) (*ListChatPlan, error) {
	out := new(ListChatPlan)
	err := c.cc.Invoke(ctx, RoutingChatPlanService_SearchChatPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingChatPlanServiceClient) ReadChatPlan(ctx context.Context, in *ReadChatPlanRequest, opts ...grpc.CallOption) (*ChatPlan, error) {
	out := new(ChatPlan)
	err := c.cc.Invoke(ctx, RoutingChatPlanService_ReadChatPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingChatPlanServiceClient) UpdateChatPlan(ctx context.Context, in *UpdateChatPlanRequest, opts ...grpc.CallOption) (*ChatPlan, error) {
	out := new(ChatPlan)
	err := c.cc.Invoke(ctx, RoutingChatPlanService_UpdateChatPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingChatPlanServiceClient) PatchChatPlan(ctx context.Context, in *PatchChatPlanRequest, opts ...grpc.CallOption) (*ChatPlan, error) {
	out := new(ChatPlan)
	err := c.cc.Invoke(ctx, RoutingChatPlanService_PatchChatPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingChatPlanServiceClient) DeleteChatPlan(ctx context.Context, in *DeleteChatPlanRequest, opts ...grpc.CallOption) (*ChatPlan, error) {
	out := new(ChatPlan)
	err := c.cc.Invoke(ctx, RoutingChatPlanService_DeleteChatPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutingChatPlanServiceServer is the server API for RoutingChatPlanService service.
// All implementations must embed UnimplementedRoutingChatPlanServiceServer
// for forward compatibility
type RoutingChatPlanServiceServer interface {
	CreateChatPlan(context.Context, *CreateChatPlanRequest) (*ChatPlan, error)
	SearchChatPlan(context.Context, *SearchChatPlanRequest) (*ListChatPlan, error)
	ReadChatPlan(context.Context, *ReadChatPlanRequest) (*ChatPlan, error)
	UpdateChatPlan(context.Context, *UpdateChatPlanRequest) (*ChatPlan, error)
	PatchChatPlan(context.Context, *PatchChatPlanRequest) (*ChatPlan, error)
	DeleteChatPlan(context.Context, *DeleteChatPlanRequest) (*ChatPlan, error)
	mustEmbedUnimplementedRoutingChatPlanServiceServer()
}

// UnimplementedRoutingChatPlanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoutingChatPlanServiceServer struct {
}

func (UnimplementedRoutingChatPlanServiceServer) CreateChatPlan(context.Context, *CreateChatPlanRequest) (*ChatPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatPlan not implemented")
}
func (UnimplementedRoutingChatPlanServiceServer) SearchChatPlan(context.Context, *SearchChatPlanRequest) (*ListChatPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChatPlan not implemented")
}
func (UnimplementedRoutingChatPlanServiceServer) ReadChatPlan(context.Context, *ReadChatPlanRequest) (*ChatPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadChatPlan not implemented")
}
func (UnimplementedRoutingChatPlanServiceServer) UpdateChatPlan(context.Context, *UpdateChatPlanRequest) (*ChatPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatPlan not implemented")
}
func (UnimplementedRoutingChatPlanServiceServer) PatchChatPlan(context.Context, *PatchChatPlanRequest) (*ChatPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchChatPlan not implemented")
}
func (UnimplementedRoutingChatPlanServiceServer) DeleteChatPlan(context.Context, *DeleteChatPlanRequest) (*ChatPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatPlan not implemented")
}
func (UnimplementedRoutingChatPlanServiceServer) mustEmbedUnimplementedRoutingChatPlanServiceServer() {
}

// UnsafeRoutingChatPlanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutingChatPlanServiceServer will
// result in compilation errors.
type UnsafeRoutingChatPlanServiceServer interface {
	mustEmbedUnimplementedRoutingChatPlanServiceServer()
}

func RegisterRoutingChatPlanServiceServer(s grpc.ServiceRegistrar, srv RoutingChatPlanServiceServer) {
	s.RegisterService(&RoutingChatPlanService_ServiceDesc, srv)
}

func _RoutingChatPlanService_CreateChatPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingChatPlanServiceServer).CreateChatPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingChatPlanService_CreateChatPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingChatPlanServiceServer).CreateChatPlan(ctx, req.(*CreateChatPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingChatPlanService_SearchChatPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchChatPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingChatPlanServiceServer).SearchChatPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingChatPlanService_SearchChatPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingChatPlanServiceServer).SearchChatPlan(ctx, req.(*SearchChatPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingChatPlanService_ReadChatPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadChatPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingChatPlanServiceServer).ReadChatPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingChatPlanService_ReadChatPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingChatPlanServiceServer).ReadChatPlan(ctx, req.(*ReadChatPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingChatPlanService_UpdateChatPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChatPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingChatPlanServiceServer).UpdateChatPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingChatPlanService_UpdateChatPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingChatPlanServiceServer).UpdateChatPlan(ctx, req.(*UpdateChatPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingChatPlanService_PatchChatPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchChatPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingChatPlanServiceServer).PatchChatPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingChatPlanService_PatchChatPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingChatPlanServiceServer).PatchChatPlan(ctx, req.(*PatchChatPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingChatPlanService_DeleteChatPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingChatPlanServiceServer).DeleteChatPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingChatPlanService_DeleteChatPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingChatPlanServiceServer).DeleteChatPlan(ctx, req.(*DeleteChatPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutingChatPlanService_ServiceDesc is the grpc.ServiceDesc for RoutingChatPlanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutingChatPlanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.RoutingChatPlanService",
	HandlerType: (*RoutingChatPlanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChatPlan",
			Handler:    _RoutingChatPlanService_CreateChatPlan_Handler,
		},
		{
			MethodName: "SearchChatPlan",
			Handler:    _RoutingChatPlanService_SearchChatPlan_Handler,
		},
		{
			MethodName: "ReadChatPlan",
			Handler:    _RoutingChatPlanService_ReadChatPlan_Handler,
		},
		{
			MethodName: "UpdateChatPlan",
			Handler:    _RoutingChatPlanService_UpdateChatPlan_Handler,
		},
		{
			MethodName: "PatchChatPlan",
			Handler:    _RoutingChatPlanService_PatchChatPlan_Handler,
		},
		{
			MethodName: "DeleteChatPlan",
			Handler:    _RoutingChatPlanService_DeleteChatPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acr_chat_plan.proto",
}
