// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: schema_version.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SchemaVersionService_SearchSchemaVersion_FullMethodName = "/engine.SchemaVersionService/SearchSchemaVersion"
)

// SchemaVersionServiceClient is the client API for SchemaVersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemaVersionServiceClient interface {
	SearchSchemaVersion(ctx context.Context, in *SearchSchemaVersionRequest, opts ...grpc.CallOption) (*SearchSchemaVersionResponse, error)
}

type schemaVersionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemaVersionServiceClient(cc grpc.ClientConnInterface) SchemaVersionServiceClient {
	return &schemaVersionServiceClient{cc}
}

func (c *schemaVersionServiceClient) SearchSchemaVersion(ctx context.Context, in *SearchSchemaVersionRequest, opts ...grpc.CallOption) (*SearchSchemaVersionResponse, error) {
	out := new(SearchSchemaVersionResponse)
	err := c.cc.Invoke(ctx, SchemaVersionService_SearchSchemaVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaVersionServiceServer is the server API for SchemaVersionService service.
// All implementations must embed UnimplementedSchemaVersionServiceServer
// for forward compatibility
type SchemaVersionServiceServer interface {
	SearchSchemaVersion(context.Context, *SearchSchemaVersionRequest) (*SearchSchemaVersionResponse, error)
	mustEmbedUnimplementedSchemaVersionServiceServer()
}

// UnimplementedSchemaVersionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchemaVersionServiceServer struct {
}

func (UnimplementedSchemaVersionServiceServer) SearchSchemaVersion(context.Context, *SearchSchemaVersionRequest) (*SearchSchemaVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSchemaVersion not implemented")
}
func (UnimplementedSchemaVersionServiceServer) mustEmbedUnimplementedSchemaVersionServiceServer() {}

// UnsafeSchemaVersionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemaVersionServiceServer will
// result in compilation errors.
type UnsafeSchemaVersionServiceServer interface {
	mustEmbedUnimplementedSchemaVersionServiceServer()
}

func RegisterSchemaVersionServiceServer(s grpc.ServiceRegistrar, srv SchemaVersionServiceServer) {
	s.RegisterService(&SchemaVersionService_ServiceDesc, srv)
}

func _SchemaVersionService_SearchSchemaVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSchemaVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaVersionServiceServer).SearchSchemaVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaVersionService_SearchSchemaVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaVersionServiceServer).SearchSchemaVersion(ctx, req.(*SearchSchemaVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchemaVersionService_ServiceDesc is the grpc.ServiceDesc for SchemaVersionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchemaVersionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.SchemaVersionService",
	HandlerType: (*SchemaVersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchSchemaVersion",
			Handler:    _SchemaVersionService_SearchSchemaVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema_version.proto",
}
