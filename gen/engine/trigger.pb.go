// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: trigger.proto

package engine

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TriggerType int32

const (
	TriggerType_default_trigger_type TriggerType = 0
	TriggerType_cron                 TriggerType = 1
	TriggerType_event                TriggerType = 2
)

// Enum value maps for TriggerType.
var (
	TriggerType_name = map[int32]string{
		0: "default_trigger_type",
		1: "cron",
		2: "event",
	}
	TriggerType_value = map[string]int32{
		"default_trigger_type": 0,
		"cron":                 1,
		"event":                2,
	}
)

func (x TriggerType) Enum() *TriggerType {
	p := new(TriggerType)
	*p = x
	return p
}

func (x TriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_trigger_proto_enumTypes[0].Descriptor()
}

func (TriggerType) Type() protoreflect.EnumType {
	return &file_trigger_proto_enumTypes[0]
}

func (x TriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerType.Descriptor instead.
func (TriggerType) EnumDescriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{0}
}

type TriggerObjectType int32

const (
	TriggerObjectType_empty_trigger_object TriggerObjectType = 0
	TriggerObjectType_cases                TriggerObjectType = 1
	TriggerObjectType_case_files           TriggerObjectType = 2
	TriggerObjectType_case_comments        TriggerObjectType = 3
	TriggerObjectType_case_links           TriggerObjectType = 4
	TriggerObjectType_related_cases        TriggerObjectType = 5
)

// Enum value maps for TriggerObjectType.
var (
	TriggerObjectType_name = map[int32]string{
		0: "empty_trigger_object",
		1: "cases",
		2: "case_files",
		3: "case_comments",
		4: "case_links",
		5: "related_cases",
	}
	TriggerObjectType_value = map[string]int32{
		"empty_trigger_object": 0,
		"cases":                1,
		"case_files":           2,
		"case_comments":        3,
		"case_links":           4,
		"related_cases":        5,
	}
)

func (x TriggerObjectType) Enum() *TriggerObjectType {
	p := new(TriggerObjectType)
	*p = x
	return p
}

func (x TriggerObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_trigger_proto_enumTypes[1].Descriptor()
}

func (TriggerObjectType) Type() protoreflect.EnumType {
	return &file_trigger_proto_enumTypes[1]
}

func (x TriggerObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerObjectType.Descriptor instead.
func (TriggerObjectType) EnumDescriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{1}
}

type TriggerEventType int32

const (
	TriggerEventType_empty_trigger_event TriggerEventType = 0
	TriggerEventType_create              TriggerEventType = 1
	TriggerEventType_update              TriggerEventType = 2
	TriggerEventType_remove              TriggerEventType = 3
	TriggerEventType_resolution_time     TriggerEventType = 4
)

// Enum value maps for TriggerEventType.
var (
	TriggerEventType_name = map[int32]string{
		0: "empty_trigger_event",
		1: "create",
		2: "update",
		3: "remove",
		4: "resolution_time",
	}
	TriggerEventType_value = map[string]int32{
		"empty_trigger_event": 0,
		"create":              1,
		"update":              2,
		"remove":              3,
		"resolution_time":     4,
	}
)

func (x TriggerEventType) Enum() *TriggerEventType {
	p := new(TriggerEventType)
	*p = x
	return p
}

func (x TriggerEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_trigger_proto_enumTypes[2].Descriptor()
}

func (TriggerEventType) Type() protoreflect.EnumType {
	return &file_trigger_proto_enumTypes[2]
}

func (x TriggerEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerEventType.Descriptor instead.
func (TriggerEventType) EnumDescriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{2}
}

type TriggerJobState int32

const (
	TriggerJobState_idle   TriggerJobState = 0
	TriggerJobState_active TriggerJobState = 1
	TriggerJobState_done   TriggerJobState = 2
	TriggerJobState_error  TriggerJobState = 3
)

// Enum value maps for TriggerJobState.
var (
	TriggerJobState_name = map[int32]string{
		0: "idle",
		1: "active",
		2: "done",
		3: "error",
	}
	TriggerJobState_value = map[string]int32{
		"idle":   0,
		"active": 1,
		"done":   2,
		"error":  3,
	}
)

func (x TriggerJobState) Enum() *TriggerJobState {
	p := new(TriggerJobState)
	*p = x
	return p
}

func (x TriggerJobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerJobState) Descriptor() protoreflect.EnumDescriptor {
	return file_trigger_proto_enumTypes[3].Descriptor()
}

func (TriggerJobState) Type() protoreflect.EnumType {
	return &file_trigger_proto_enumTypes[3]
}

func (x TriggerJobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerJobState.Descriptor instead.
func (TriggerJobState) EnumDescriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{3}
}

type CreateTriggerJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerId int32             `protobuf:"varint,1,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
	Variables map[string]string `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateTriggerJobRequest) Reset() {
	*x = CreateTriggerJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trigger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTriggerJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTriggerJobRequest) ProtoMessage() {}

func (x *CreateTriggerJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTriggerJobRequest.ProtoReflect.Descriptor instead.
func (*CreateTriggerJobRequest) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTriggerJobRequest) GetTriggerId() int32 {
	if x != nil {
		return x.TriggerId
	}
	return 0
}

func (x *CreateTriggerJobRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

type TriggerJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Trigger    *Lookup         `protobuf:"bytes,2,opt,name=trigger,proto3" json:"trigger,omitempty"`
	State      TriggerJobState `protobuf:"varint,3,opt,name=state,proto3,enum=engine.TriggerJobState" json:"state,omitempty"`
	CreatedAt  int64           `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	StartedAt  int64           `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	StoppedAt  int64           `protobuf:"varint,6,opt,name=stopped_at,json=stoppedAt,proto3" json:"stopped_at,omitempty"`
	Parameters *structpb.Value `protobuf:"bytes,7,opt,name=parameters,proto3" json:"parameters,omitempty"`
	Error      string          `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
	Result     *structpb.Value `protobuf:"bytes,9,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TriggerJob) Reset() {
	*x = TriggerJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trigger_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerJob) ProtoMessage() {}

func (x *TriggerJob) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerJob.ProtoReflect.Descriptor instead.
func (*TriggerJob) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{1}
}

func (x *TriggerJob) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TriggerJob) GetTrigger() *Lookup {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *TriggerJob) GetState() TriggerJobState {
	if x != nil {
		return x.State
	}
	return TriggerJobState_idle
}

func (x *TriggerJob) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TriggerJob) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *TriggerJob) GetStoppedAt() int64 {
	if x != nil {
		return x.StoppedAt
	}
	return 0
}

func (x *TriggerJob) GetParameters() *structpb.Value {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *TriggerJob) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TriggerJob) GetResult() *structpb.Value {
	if x != nil {
		return x.Result
	}
	return nil
}

type SearchTriggerJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int32             `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size      int32             `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q         string            `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Sort      string            `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields    []string          `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	TriggerId int32             `protobuf:"varint,6,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
	CreatedAt *FilterBetween    `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	StartedAt *FilterBetween    `protobuf:"bytes,8,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	Duration  *FilterBetween    `protobuf:"bytes,9,opt,name=duration,proto3" json:"duration,omitempty"`
	State     []TriggerJobState `protobuf:"varint,10,rep,packed,name=state,proto3,enum=engine.TriggerJobState" json:"state,omitempty"`
}

func (x *SearchTriggerJobRequest) Reset() {
	*x = SearchTriggerJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trigger_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTriggerJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTriggerJobRequest) ProtoMessage() {}

func (x *SearchTriggerJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTriggerJobRequest.ProtoReflect.Descriptor instead.
func (*SearchTriggerJobRequest) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{2}
}

func (x *SearchTriggerJobRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchTriggerJobRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchTriggerJobRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchTriggerJobRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchTriggerJobRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchTriggerJobRequest) GetTriggerId() int32 {
	if x != nil {
		return x.TriggerId
	}
	return 0
}

func (x *SearchTriggerJobRequest) GetCreatedAt() *FilterBetween {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SearchTriggerJobRequest) GetStartedAt() *FilterBetween {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *SearchTriggerJobRequest) GetDuration() *FilterBetween {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *SearchTriggerJobRequest) GetState() []TriggerJobState {
	if x != nil {
		return x.State
	}
	return nil
}

type ListTriggerJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next  bool          `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items []*TriggerJob `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListTriggerJob) Reset() {
	*x = ListTriggerJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trigger_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTriggerJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTriggerJob) ProtoMessage() {}

func (x *ListTriggerJob) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTriggerJob.ProtoReflect.Descriptor instead.
func (*ListTriggerJob) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{3}
}

func (x *ListTriggerJob) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListTriggerJob) GetItems() []*TriggerJob {
	if x != nil {
		return x.Items
	}
	return nil
}

type Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Enabled     bool              `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Type        TriggerType       `protobuf:"varint,4,opt,name=type,proto3,enum=engine.TriggerType" json:"type,omitempty"`
	Schema      *Lookup           `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	Variables   map[string]string `protobuf:"bytes,6,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description string            `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Expression  string            `protobuf:"bytes,8,opt,name=expression,proto3" json:"expression,omitempty"`
	Timezone    *Lookup           `protobuf:"bytes,9,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Timeout     int32             `protobuf:"varint,10,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Object      TriggerObjectType `protobuf:"varint,11,opt,name=object,proto3,enum=engine.TriggerObjectType" json:"object,omitempty"`
	Event       TriggerEventType  `protobuf:"varint,12,opt,name=event,proto3,enum=engine.TriggerEventType" json:"event,omitempty"`
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trigger_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{4}
}

func (x *Trigger) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Trigger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Trigger) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Trigger) GetType() TriggerType {
	if x != nil {
		return x.Type
	}
	return TriggerType_default_trigger_type
}

func (x *Trigger) GetSchema() *Lookup {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Trigger) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *Trigger) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Trigger) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *Trigger) GetTimezone() *Lookup {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *Trigger) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Trigger) GetObject() TriggerObjectType {
	if x != nil {
		return x.Object
	}
	return TriggerObjectType_empty_trigger_object
}

func (x *Trigger) GetEvent() TriggerEventType {
	if x != nil {
		return x.Event
	}
	return TriggerEventType_empty_trigger_event
}

type CreateTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Enabled     bool              `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Type        TriggerType       `protobuf:"varint,3,opt,name=type,proto3,enum=engine.TriggerType" json:"type,omitempty"`
	Schema      *Lookup           `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	Variables   map[string]string `protobuf:"bytes,5,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description string            `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Expression  string            `protobuf:"bytes,7,opt,name=expression,proto3" json:"expression,omitempty"`
	Timezone    *Lookup           `protobuf:"bytes,8,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Timeout     int32             `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Object      TriggerObjectType `protobuf:"varint,11,opt,name=object,proto3,enum=engine.TriggerObjectType" json:"object,omitempty"`
	Event       TriggerEventType  `protobuf:"varint,12,opt,name=event,proto3,enum=engine.TriggerEventType" json:"event,omitempty"`
}

func (x *CreateTriggerRequest) Reset() {
	*x = CreateTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trigger_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTriggerRequest) ProtoMessage() {}

func (x *CreateTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTriggerRequest.ProtoReflect.Descriptor instead.
func (*CreateTriggerRequest) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{5}
}

func (x *CreateTriggerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTriggerRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CreateTriggerRequest) GetType() TriggerType {
	if x != nil {
		return x.Type
	}
	return TriggerType_default_trigger_type
}

func (x *CreateTriggerRequest) GetSchema() *Lookup {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CreateTriggerRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *CreateTriggerRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateTriggerRequest) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *CreateTriggerRequest) GetTimezone() *Lookup {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *CreateTriggerRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *CreateTriggerRequest) GetObject() TriggerObjectType {
	if x != nil {
		return x.Object
	}
	return TriggerObjectType_empty_trigger_object
}

func (x *CreateTriggerRequest) GetEvent() TriggerEventType {
	if x != nil {
		return x.Event
	}
	return TriggerEventType_empty_trigger_event
}

type ListTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next  bool       `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items []*Trigger `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListTrigger) Reset() {
	*x = ListTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trigger_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrigger) ProtoMessage() {}

func (x *ListTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrigger.ProtoReflect.Descriptor instead.
func (*ListTrigger) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{6}
}

func (x *ListTrigger) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListTrigger) GetItems() []*Trigger {
	if x != nil {
		return x.Items
	}
	return nil
}

type SearchTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size     int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q        string   `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Sort     string   `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields   []string `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
	Id       []int32  `protobuf:"varint,7,rep,packed,name=id,proto3" json:"id,omitempty"`
	SchemaId []int32  `protobuf:"varint,8,rep,packed,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
}

func (x *SearchTriggerRequest) Reset() {
	*x = SearchTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trigger_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTriggerRequest) ProtoMessage() {}

func (x *SearchTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTriggerRequest.ProtoReflect.Descriptor instead.
func (*SearchTriggerRequest) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{7}
}

func (x *SearchTriggerRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchTriggerRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchTriggerRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchTriggerRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchTriggerRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchTriggerRequest) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchTriggerRequest) GetSchemaId() []int32 {
	if x != nil {
		return x.SchemaId
	}
	return nil
}

type ReadTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReadTriggerRequest) Reset() {
	*x = ReadTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trigger_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTriggerRequest) ProtoMessage() {}

func (x *ReadTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTriggerRequest.ProtoReflect.Descriptor instead.
func (*ReadTriggerRequest) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{8}
}

func (x *ReadTriggerRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Enabled     bool              `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Type        TriggerType       `protobuf:"varint,4,opt,name=type,proto3,enum=engine.TriggerType" json:"type,omitempty"`
	Schema      *Lookup           `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	Variables   map[string]string `protobuf:"bytes,6,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description string            `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Expression  string            `protobuf:"bytes,8,opt,name=expression,proto3" json:"expression,omitempty"`
	Timezone    *Lookup           `protobuf:"bytes,9,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Timeout     int32             `protobuf:"varint,10,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Object      TriggerObjectType `protobuf:"varint,11,opt,name=object,proto3,enum=engine.TriggerObjectType" json:"object,omitempty"`
	Event       TriggerEventType  `protobuf:"varint,12,opt,name=event,proto3,enum=engine.TriggerEventType" json:"event,omitempty"`
}

func (x *UpdateTriggerRequest) Reset() {
	*x = UpdateTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trigger_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTriggerRequest) ProtoMessage() {}

func (x *UpdateTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTriggerRequest.ProtoReflect.Descriptor instead.
func (*UpdateTriggerRequest) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateTriggerRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateTriggerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTriggerRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *UpdateTriggerRequest) GetType() TriggerType {
	if x != nil {
		return x.Type
	}
	return TriggerType_default_trigger_type
}

func (x *UpdateTriggerRequest) GetSchema() *Lookup {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *UpdateTriggerRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *UpdateTriggerRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateTriggerRequest) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *UpdateTriggerRequest) GetTimezone() *Lookup {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *UpdateTriggerRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *UpdateTriggerRequest) GetObject() TriggerObjectType {
	if x != nil {
		return x.Object
	}
	return TriggerObjectType_empty_trigger_object
}

func (x *UpdateTriggerRequest) GetEvent() TriggerEventType {
	if x != nil {
		return x.Event
	}
	return TriggerEventType_empty_trigger_event
}

type PatchTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields      []string          `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Id          int32             `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name        string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Enabled     bool              `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Type        TriggerType       `protobuf:"varint,5,opt,name=type,proto3,enum=engine.TriggerType" json:"type,omitempty"`
	Schema      *Lookup           `protobuf:"bytes,6,opt,name=schema,proto3" json:"schema,omitempty"`
	Variables   map[string]string `protobuf:"bytes,7,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description string            `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Expression  string            `protobuf:"bytes,9,opt,name=expression,proto3" json:"expression,omitempty"`
	Timezone    *Lookup           `protobuf:"bytes,10,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Timeout     int32             `protobuf:"varint,11,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Object      TriggerObjectType `protobuf:"varint,12,opt,name=object,proto3,enum=engine.TriggerObjectType" json:"object,omitempty"`
	Event       TriggerEventType  `protobuf:"varint,13,opt,name=event,proto3,enum=engine.TriggerEventType" json:"event,omitempty"`
}

func (x *PatchTriggerRequest) Reset() {
	*x = PatchTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trigger_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchTriggerRequest) ProtoMessage() {}

func (x *PatchTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchTriggerRequest.ProtoReflect.Descriptor instead.
func (*PatchTriggerRequest) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{10}
}

func (x *PatchTriggerRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PatchTriggerRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PatchTriggerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchTriggerRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PatchTriggerRequest) GetType() TriggerType {
	if x != nil {
		return x.Type
	}
	return TriggerType_default_trigger_type
}

func (x *PatchTriggerRequest) GetSchema() *Lookup {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *PatchTriggerRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *PatchTriggerRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PatchTriggerRequest) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *PatchTriggerRequest) GetTimezone() *Lookup {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *PatchTriggerRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *PatchTriggerRequest) GetObject() TriggerObjectType {
	if x != nil {
		return x.Object
	}
	return TriggerObjectType_empty_trigger_object
}

func (x *PatchTriggerRequest) GetEvent() TriggerEventType {
	if x != nil {
		return x.Event
	}
	return TriggerEventType_empty_trigger_event
}

type DeleteTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTriggerRequest) Reset() {
	*x = DeleteTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trigger_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTriggerRequest) ProtoMessage() {}

func (x *DeleteTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTriggerRequest.ProtoReflect.Descriptor instead.
func (*DeleteTriggerRequest) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteTriggerRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_trigger_proto protoreflect.FileDescriptor

var file_trigger_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc4, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x09, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x02, 0x0a, 0x0a, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe8, 0x02, 0x0a, 0x17, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x0c,
	0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65,
	0x65, 0x6e, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4e, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xff, 0x03, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x3c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x04, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x49, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa5, 0x01,
	0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x0c,
	0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x99, 0x04, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x49, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf, 0x04, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x48, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x2a, 0x3c, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x63, 0x72,
	0x6f, 0x6e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x2a,
	0x7e, 0x0a, 0x11, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x61, 0x73,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x63, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a,
	0x63, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x10, 0x05, 0x2a,
	0x64, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x10, 0x04, 0x2a, 0x3c, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x03, 0x32, 0xf6, 0x05, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01,
	0x2a, 0x22, 0x08, 0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x0d, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22,
	0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x51, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x1a, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0x15, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x58, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x1a,
	0x0d, 0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x56,
	0x0a, 0x0c, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1b,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0x18, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x32, 0x0d, 0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x55, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x2a, 0x0d,
	0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6d, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4a, 0x6f,
	0x62, 0x12, 0x1f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01,
	0x2a, 0x22, 0x19, 0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x7b, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x12, 0x6e, 0x0a, 0x10,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4a, 0x6f, 0x62,
	0x12, 0x1f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x12, 0x19, 0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x7b, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x42, 0x22, 0x5a, 0x20,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trigger_proto_rawDescOnce sync.Once
	file_trigger_proto_rawDescData = file_trigger_proto_rawDesc
)

func file_trigger_proto_rawDescGZIP() []byte {
	file_trigger_proto_rawDescOnce.Do(func() {
		file_trigger_proto_rawDescData = protoimpl.X.CompressGZIP(file_trigger_proto_rawDescData)
	})
	return file_trigger_proto_rawDescData
}

var file_trigger_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_trigger_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_trigger_proto_goTypes = []interface{}{
	(TriggerType)(0),                // 0: engine.TriggerType
	(TriggerObjectType)(0),          // 1: engine.TriggerObjectType
	(TriggerEventType)(0),           // 2: engine.TriggerEventType
	(TriggerJobState)(0),            // 3: engine.TriggerJobState
	(*CreateTriggerJobRequest)(nil), // 4: engine.CreateTriggerJobRequest
	(*TriggerJob)(nil),              // 5: engine.TriggerJob
	(*SearchTriggerJobRequest)(nil), // 6: engine.SearchTriggerJobRequest
	(*ListTriggerJob)(nil),          // 7: engine.ListTriggerJob
	(*Trigger)(nil),                 // 8: engine.Trigger
	(*CreateTriggerRequest)(nil),    // 9: engine.CreateTriggerRequest
	(*ListTrigger)(nil),             // 10: engine.ListTrigger
	(*SearchTriggerRequest)(nil),    // 11: engine.SearchTriggerRequest
	(*ReadTriggerRequest)(nil),      // 12: engine.ReadTriggerRequest
	(*UpdateTriggerRequest)(nil),    // 13: engine.UpdateTriggerRequest
	(*PatchTriggerRequest)(nil),     // 14: engine.PatchTriggerRequest
	(*DeleteTriggerRequest)(nil),    // 15: engine.DeleteTriggerRequest
	nil,                             // 16: engine.CreateTriggerJobRequest.VariablesEntry
	nil,                             // 17: engine.Trigger.VariablesEntry
	nil,                             // 18: engine.CreateTriggerRequest.VariablesEntry
	nil,                             // 19: engine.UpdateTriggerRequest.VariablesEntry
	nil,                             // 20: engine.PatchTriggerRequest.VariablesEntry
	(*Lookup)(nil),                  // 21: engine.Lookup
	(*structpb.Value)(nil),          // 22: google.protobuf.Value
	(*FilterBetween)(nil),           // 23: engine.FilterBetween
}
var file_trigger_proto_depIdxs = []int32{
	16, // 0: engine.CreateTriggerJobRequest.variables:type_name -> engine.CreateTriggerJobRequest.VariablesEntry
	21, // 1: engine.TriggerJob.trigger:type_name -> engine.Lookup
	3,  // 2: engine.TriggerJob.state:type_name -> engine.TriggerJobState
	22, // 3: engine.TriggerJob.parameters:type_name -> google.protobuf.Value
	22, // 4: engine.TriggerJob.result:type_name -> google.protobuf.Value
	23, // 5: engine.SearchTriggerJobRequest.created_at:type_name -> engine.FilterBetween
	23, // 6: engine.SearchTriggerJobRequest.started_at:type_name -> engine.FilterBetween
	23, // 7: engine.SearchTriggerJobRequest.duration:type_name -> engine.FilterBetween
	3,  // 8: engine.SearchTriggerJobRequest.state:type_name -> engine.TriggerJobState
	5,  // 9: engine.ListTriggerJob.items:type_name -> engine.TriggerJob
	0,  // 10: engine.Trigger.type:type_name -> engine.TriggerType
	21, // 11: engine.Trigger.schema:type_name -> engine.Lookup
	17, // 12: engine.Trigger.variables:type_name -> engine.Trigger.VariablesEntry
	21, // 13: engine.Trigger.timezone:type_name -> engine.Lookup
	1,  // 14: engine.Trigger.object:type_name -> engine.TriggerObjectType
	2,  // 15: engine.Trigger.event:type_name -> engine.TriggerEventType
	0,  // 16: engine.CreateTriggerRequest.type:type_name -> engine.TriggerType
	21, // 17: engine.CreateTriggerRequest.schema:type_name -> engine.Lookup
	18, // 18: engine.CreateTriggerRequest.variables:type_name -> engine.CreateTriggerRequest.VariablesEntry
	21, // 19: engine.CreateTriggerRequest.timezone:type_name -> engine.Lookup
	1,  // 20: engine.CreateTriggerRequest.object:type_name -> engine.TriggerObjectType
	2,  // 21: engine.CreateTriggerRequest.event:type_name -> engine.TriggerEventType
	8,  // 22: engine.ListTrigger.items:type_name -> engine.Trigger
	0,  // 23: engine.UpdateTriggerRequest.type:type_name -> engine.TriggerType
	21, // 24: engine.UpdateTriggerRequest.schema:type_name -> engine.Lookup
	19, // 25: engine.UpdateTriggerRequest.variables:type_name -> engine.UpdateTriggerRequest.VariablesEntry
	21, // 26: engine.UpdateTriggerRequest.timezone:type_name -> engine.Lookup
	1,  // 27: engine.UpdateTriggerRequest.object:type_name -> engine.TriggerObjectType
	2,  // 28: engine.UpdateTriggerRequest.event:type_name -> engine.TriggerEventType
	0,  // 29: engine.PatchTriggerRequest.type:type_name -> engine.TriggerType
	21, // 30: engine.PatchTriggerRequest.schema:type_name -> engine.Lookup
	20, // 31: engine.PatchTriggerRequest.variables:type_name -> engine.PatchTriggerRequest.VariablesEntry
	21, // 32: engine.PatchTriggerRequest.timezone:type_name -> engine.Lookup
	1,  // 33: engine.PatchTriggerRequest.object:type_name -> engine.TriggerObjectType
	2,  // 34: engine.PatchTriggerRequest.event:type_name -> engine.TriggerEventType
	9,  // 35: engine.TriggerService.CreateTrigger:input_type -> engine.CreateTriggerRequest
	11, // 36: engine.TriggerService.SearchTrigger:input_type -> engine.SearchTriggerRequest
	12, // 37: engine.TriggerService.ReadTrigger:input_type -> engine.ReadTriggerRequest
	13, // 38: engine.TriggerService.UpdateTrigger:input_type -> engine.UpdateTriggerRequest
	14, // 39: engine.TriggerService.PatchTrigger:input_type -> engine.PatchTriggerRequest
	15, // 40: engine.TriggerService.DeleteTrigger:input_type -> engine.DeleteTriggerRequest
	4,  // 41: engine.TriggerService.CreateTriggerJob:input_type -> engine.CreateTriggerJobRequest
	6,  // 42: engine.TriggerService.SearchTriggerJob:input_type -> engine.SearchTriggerJobRequest
	8,  // 43: engine.TriggerService.CreateTrigger:output_type -> engine.Trigger
	10, // 44: engine.TriggerService.SearchTrigger:output_type -> engine.ListTrigger
	8,  // 45: engine.TriggerService.ReadTrigger:output_type -> engine.Trigger
	8,  // 46: engine.TriggerService.UpdateTrigger:output_type -> engine.Trigger
	8,  // 47: engine.TriggerService.PatchTrigger:output_type -> engine.Trigger
	8,  // 48: engine.TriggerService.DeleteTrigger:output_type -> engine.Trigger
	5,  // 49: engine.TriggerService.CreateTriggerJob:output_type -> engine.TriggerJob
	7,  // 50: engine.TriggerService.SearchTriggerJob:output_type -> engine.ListTriggerJob
	43, // [43:51] is the sub-list for method output_type
	35, // [35:43] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_trigger_proto_init() }
func file_trigger_proto_init() {
	if File_trigger_proto != nil {
		return
	}
	file_const_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_trigger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTriggerJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trigger_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trigger_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTriggerJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trigger_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTriggerJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trigger_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trigger_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trigger_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trigger_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trigger_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trigger_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trigger_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trigger_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trigger_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trigger_proto_goTypes,
		DependencyIndexes: file_trigger_proto_depIdxs,
		EnumInfos:         file_trigger_proto_enumTypes,
		MessageInfos:      file_trigger_proto_msgTypes,
	}.Build()
	File_trigger_proto = out.File
	file_trigger_proto_rawDesc = nil
	file_trigger_proto_goTypes = nil
	file_trigger_proto_depIdxs = nil
}
