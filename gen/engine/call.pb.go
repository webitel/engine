// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: call.proto

package engine

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HistoryFileJob_HistoryFileJobAction int32

const (
	HistoryFileJob_undefined HistoryFileJob_HistoryFileJobAction = 0
	HistoryFileJob_STT       HistoryFileJob_HistoryFileJobAction = 1
	HistoryFileJob_delete    HistoryFileJob_HistoryFileJobAction = 2
)

// Enum value maps for HistoryFileJob_HistoryFileJobAction.
var (
	HistoryFileJob_HistoryFileJobAction_name = map[int32]string{
		0: "undefined",
		1: "STT",
		2: "delete",
	}
	HistoryFileJob_HistoryFileJobAction_value = map[string]int32{
		"undefined": 0,
		"STT":       1,
		"delete":    2,
	}
)

func (x HistoryFileJob_HistoryFileJobAction) Enum() *HistoryFileJob_HistoryFileJobAction {
	p := new(HistoryFileJob_HistoryFileJobAction)
	*p = x
	return p
}

func (x HistoryFileJob_HistoryFileJobAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HistoryFileJob_HistoryFileJobAction) Descriptor() protoreflect.EnumDescriptor {
	return file_call_proto_enumTypes[0].Descriptor()
}

func (HistoryFileJob_HistoryFileJobAction) Type() protoreflect.EnumType {
	return &file_call_proto_enumTypes[0]
}

func (x HistoryFileJob_HistoryFileJobAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HistoryFileJob_HistoryFileJobAction.Descriptor instead.
func (HistoryFileJob_HistoryFileJobAction) EnumDescriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{18, 0}
}

type HistoryFileJob_HistoryFileJobState int32

const (
	HistoryFileJob_idle     HistoryFileJob_HistoryFileJobState = 0
	HistoryFileJob_active   HistoryFileJob_HistoryFileJobState = 1
	HistoryFileJob_finished HistoryFileJob_HistoryFileJobState = 2
	HistoryFileJob_error    HistoryFileJob_HistoryFileJobState = 3 // TODO
)

// Enum value maps for HistoryFileJob_HistoryFileJobState.
var (
	HistoryFileJob_HistoryFileJobState_name = map[int32]string{
		0: "idle",
		1: "active",
		2: "finished",
		3: "error",
	}
	HistoryFileJob_HistoryFileJobState_value = map[string]int32{
		"idle":     0,
		"active":   1,
		"finished": 2,
		"error":    3,
	}
)

func (x HistoryFileJob_HistoryFileJobState) Enum() *HistoryFileJob_HistoryFileJobState {
	p := new(HistoryFileJob_HistoryFileJobState)
	*p = x
	return p
}

func (x HistoryFileJob_HistoryFileJobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HistoryFileJob_HistoryFileJobState) Descriptor() protoreflect.EnumDescriptor {
	return file_call_proto_enumTypes[1].Descriptor()
}

func (HistoryFileJob_HistoryFileJobState) Type() protoreflect.EnumType {
	return &file_call_proto_enumTypes[1]
}

func (x HistoryFileJob_HistoryFileJobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HistoryFileJob_HistoryFileJobState.Descriptor instead.
func (HistoryFileJob_HistoryFileJobState) EnumDescriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{18, 1}
}

type RedialCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallId string `protobuf:"bytes,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
}

func (x *RedialCallRequest) Reset() {
	*x = RedialCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedialCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedialCallRequest) ProtoMessage() {}

func (x *RedialCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedialCallRequest.ProtoReflect.Descriptor instead.
func (*RedialCallRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{0}
}

func (x *RedialCallRequest) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

type PatchHistoryCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Variables  map[string]string     `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HideMissed *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=hide_missed,json=hideMissed,proto3" json:"hide_missed,omitempty"`
}

func (x *PatchHistoryCallRequest) Reset() {
	*x = PatchHistoryCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchHistoryCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchHistoryCallRequest) ProtoMessage() {}

func (x *PatchHistoryCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchHistoryCallRequest.ProtoReflect.Descriptor instead.
func (*PatchHistoryCallRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{1}
}

func (x *PatchHistoryCallRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PatchHistoryCallRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *PatchHistoryCallRequest) GetHideMissed() *wrapperspb.BoolValue {
	if x != nil {
		return x.HideMissed
	}
	return nil
}

type SetVariablesCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Variables map[string]string `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetVariablesCallRequest) Reset() {
	*x = SetVariablesCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVariablesCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVariablesCallRequest) ProtoMessage() {}

func (x *SetVariablesCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVariablesCallRequest.ProtoReflect.Descriptor instead.
func (*SetVariablesCallRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{2}
}

func (x *SetVariablesCallRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetVariablesCallRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

type SetVariablesCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetVariablesCallResponse) Reset() {
	*x = SetVariablesCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVariablesCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVariablesCallResponse) ProtoMessage() {}

func (x *SetVariablesCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVariablesCallResponse.ProtoReflect.Descriptor instead.
func (*SetVariablesCallResponse) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{3}
}

type ConfirmPushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ConfirmPushRequest) Reset() {
	*x = ConfirmPushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmPushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmPushRequest) ProtoMessage() {}

func (x *ConfirmPushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmPushRequest.ProtoReflect.Descriptor instead.
func (*ConfirmPushRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{4}
}

func (x *ConfirmPushRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ConfirmPushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfirmPushResponse) Reset() {
	*x = ConfirmPushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmPushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmPushResponse) ProtoMessage() {}

func (x *ConfirmPushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmPushResponse.ProtoReflect.Descriptor instead.
func (*ConfirmPushResponse) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{5}
}

type SearchHistoryCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page             int32                 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size             int32                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q                string                `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Sort             string                `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields           []string              `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	CreatedAt        *FilterBetween        `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UserId           []int64               `protobuf:"varint,7,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AgentId          []int64               `protobuf:"varint,8,rep,packed,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	QueueId          []int64               `protobuf:"varint,9,rep,packed,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	TeamId           []int64               `protobuf:"varint,10,rep,packed,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	MemberId         []int64               `protobuf:"varint,11,rep,packed,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	GatewayId        []int64               `protobuf:"varint,12,rep,packed,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	Duration         *FilterBetween        `protobuf:"bytes,13,opt,name=duration,proto3" json:"duration,omitempty"`
	SkipParent       bool                  `protobuf:"varint,14,opt,name=skip_parent,json=skipParent,proto3" json:"skip_parent,omitempty"`
	ParentId         string                `protobuf:"bytes,15,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Cause            []string              `protobuf:"bytes,16,rep,name=cause,proto3" json:"cause,omitempty"`
	HasFile          *wrapperspb.BoolValue `protobuf:"bytes,17,opt,name=has_file,json=hasFile,proto3" json:"has_file,omitempty"`
	DomainId         int64                 `protobuf:"varint,18,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Number           string                `protobuf:"bytes,19,opt,name=number,proto3" json:"number,omitempty"`
	Direction        string                `protobuf:"bytes,20,opt,name=direction,proto3" json:"direction,omitempty"`
	AnsweredAt       *FilterBetween        `protobuf:"bytes,21,opt,name=answered_at,json=answeredAt,proto3" json:"answered_at,omitempty"`
	Missed           bool                  `protobuf:"varint,22,opt,name=missed,proto3" json:"missed,omitempty"`
	StoredAt         *FilterBetween        `protobuf:"bytes,23,opt,name=stored_at,json=storedAt,proto3" json:"stored_at,omitempty"`
	Id               []string              `protobuf:"bytes,24,rep,name=id,proto3" json:"id,omitempty"`
	TransferFrom     []string              `protobuf:"bytes,25,rep,name=transfer_from,json=transferFrom,proto3" json:"transfer_from,omitempty"`
	TransferTo       []string              `protobuf:"bytes,26,rep,name=transfer_to,json=transferTo,proto3" json:"transfer_to,omitempty"`
	DependencyId     string                `protobuf:"bytes,27,opt,name=dependency_id,json=dependencyId,proto3" json:"dependency_id,omitempty"`
	Tags             []string              `protobuf:"bytes,28,rep,name=tags,proto3" json:"tags,omitempty"`
	Variables        map[string]string     `protobuf:"bytes,29,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AmdResult        []string              `protobuf:"bytes,30,rep,name=amd_result,json=amdResult,proto3" json:"amd_result,omitempty"`
	Fts              string                `protobuf:"bytes,31,opt,name=fts,proto3" json:"fts,omitempty"`
	Directions       []string              `protobuf:"bytes,32,rep,name=directions,proto3" json:"directions,omitempty"`
	HasTranscript    *wrapperspb.BoolValue `protobuf:"bytes,33,opt,name=has_transcript,json=hasTranscript,proto3" json:"has_transcript,omitempty"`
	AgentDescription string                `protobuf:"bytes,34,opt,name=agent_description,json=agentDescription,proto3" json:"agent_description,omitempty"`
	OwnerId          []int64               `protobuf:"varint,35,rep,packed,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	GranteeId        []int64               `protobuf:"varint,36,rep,packed,name=grantee_id,json=granteeId,proto3" json:"grantee_id,omitempty"`
	AmdAiResult      []string              `protobuf:"bytes,37,rep,name=amd_ai_result,json=amdAiResult,proto3" json:"amd_ai_result,omitempty"`
	Talk             *FilterBetween        `protobuf:"bytes,38,opt,name=talk,proto3" json:"talk,omitempty"`
	Rated            *wrapperspb.BoolValue `protobuf:"bytes,39,opt,name=rated,proto3" json:"rated,omitempty"`
	RatedBy          []int64               `protobuf:"varint,40,rep,packed,name=rated_by,json=ratedBy,proto3" json:"rated_by,omitempty"`
	ScoreRequired    *FilterBetween        `protobuf:"bytes,41,opt,name=score_required,json=scoreRequired,proto3" json:"score_required,omitempty"`
	ScoreOptional    *FilterBetween        `protobuf:"bytes,42,opt,name=score_optional,json=scoreOptional,proto3" json:"score_optional,omitempty"`
	RatedUser        []int64               `protobuf:"varint,43,rep,packed,name=rated_user,json=ratedUser,proto3" json:"rated_user,omitempty"`
	ContactId        []int64               `protobuf:"varint,44,rep,packed,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	SchemaId         []int32               `protobuf:"varint,45,rep,packed,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	HasTransfer      *wrapperspb.BoolValue `protobuf:"bytes,46,opt,name=has_transfer,json=hasTransfer,proto3" json:"has_transfer,omitempty"`
	Timeline         *wrapperspb.BoolValue `protobuf:"bytes,47,opt,name=timeline,proto3" json:"timeline,omitempty"`
}

func (x *SearchHistoryCallRequest) Reset() {
	*x = SearchHistoryCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchHistoryCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchHistoryCallRequest) ProtoMessage() {}

func (x *SearchHistoryCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchHistoryCallRequest.ProtoReflect.Descriptor instead.
func (*SearchHistoryCallRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{6}
}

func (x *SearchHistoryCallRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchHistoryCallRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchHistoryCallRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchHistoryCallRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchHistoryCallRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetCreatedAt() *FilterBetween {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetUserId() []int64 {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetAgentId() []int64 {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetQueueId() []int64 {
	if x != nil {
		return x.QueueId
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetTeamId() []int64 {
	if x != nil {
		return x.TeamId
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetMemberId() []int64 {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetGatewayId() []int64 {
	if x != nil {
		return x.GatewayId
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetDuration() *FilterBetween {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetSkipParent() bool {
	if x != nil {
		return x.SkipParent
	}
	return false
}

func (x *SearchHistoryCallRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *SearchHistoryCallRequest) GetCause() []string {
	if x != nil {
		return x.Cause
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetHasFile() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasFile
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *SearchHistoryCallRequest) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *SearchHistoryCallRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *SearchHistoryCallRequest) GetAnsweredAt() *FilterBetween {
	if x != nil {
		return x.AnsweredAt
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetMissed() bool {
	if x != nil {
		return x.Missed
	}
	return false
}

func (x *SearchHistoryCallRequest) GetStoredAt() *FilterBetween {
	if x != nil {
		return x.StoredAt
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetTransferFrom() []string {
	if x != nil {
		return x.TransferFrom
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetTransferTo() []string {
	if x != nil {
		return x.TransferTo
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetDependencyId() string {
	if x != nil {
		return x.DependencyId
	}
	return ""
}

func (x *SearchHistoryCallRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetAmdResult() []string {
	if x != nil {
		return x.AmdResult
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetFts() string {
	if x != nil {
		return x.Fts
	}
	return ""
}

func (x *SearchHistoryCallRequest) GetDirections() []string {
	if x != nil {
		return x.Directions
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetHasTranscript() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasTranscript
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetAgentDescription() string {
	if x != nil {
		return x.AgentDescription
	}
	return ""
}

func (x *SearchHistoryCallRequest) GetOwnerId() []int64 {
	if x != nil {
		return x.OwnerId
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetGranteeId() []int64 {
	if x != nil {
		return x.GranteeId
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetAmdAiResult() []string {
	if x != nil {
		return x.AmdAiResult
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetTalk() *FilterBetween {
	if x != nil {
		return x.Talk
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetRated() *wrapperspb.BoolValue {
	if x != nil {
		return x.Rated
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetRatedBy() []int64 {
	if x != nil {
		return x.RatedBy
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetScoreRequired() *FilterBetween {
	if x != nil {
		return x.ScoreRequired
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetScoreOptional() *FilterBetween {
	if x != nil {
		return x.ScoreOptional
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetRatedUser() []int64 {
	if x != nil {
		return x.RatedUser
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetContactId() []int64 {
	if x != nil {
		return x.ContactId
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetSchemaId() []int32 {
	if x != nil {
		return x.SchemaId
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetHasTransfer() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasTransfer
	}
	return nil
}

func (x *SearchHistoryCallRequest) GetTimeline() *wrapperspb.BoolValue {
	if x != nil {
		return x.Timeline
	}
	return nil
}

type AggregateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Group []*AggregateRequest_Group `protobuf:"bytes,2,rep,name=group,proto3" json:"group,omitempty"`
	Min   []string                  `protobuf:"bytes,3,rep,name=min,proto3" json:"min,omitempty"`
	Max   []string                  `protobuf:"bytes,4,rep,name=max,proto3" json:"max,omitempty"`
	Sum   []string                  `protobuf:"bytes,5,rep,name=sum,proto3" json:"sum,omitempty"`
	Avg   []string                  `protobuf:"bytes,6,rep,name=avg,proto3" json:"avg,omitempty"`
	Count []string                  `protobuf:"bytes,7,rep,name=count,proto3" json:"count,omitempty"`
	Sort  []string                  `protobuf:"bytes,8,rep,name=sort,proto3" json:"sort,omitempty"`
	Limit int32                     `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *AggregateRequest) Reset() {
	*x = AggregateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateRequest) ProtoMessage() {}

func (x *AggregateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateRequest.ProtoReflect.Descriptor instead.
func (*AggregateRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{7}
}

func (x *AggregateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AggregateRequest) GetGroup() []*AggregateRequest_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *AggregateRequest) GetMin() []string {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AggregateRequest) GetMax() []string {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AggregateRequest) GetSum() []string {
	if x != nil {
		return x.Sum
	}
	return nil
}

func (x *AggregateRequest) GetAvg() []string {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *AggregateRequest) GetCount() []string {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *AggregateRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *AggregateRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AggregateHistoryCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page             int32                 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size             int32                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q                string                `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Aggs             []*AggregateRequest   `protobuf:"bytes,4,rep,name=aggs,proto3" json:"aggs,omitempty"`
	CreatedAt        *FilterBetween        `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UserId           []int64               `protobuf:"varint,6,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AgentId          []int64               `protobuf:"varint,7,rep,packed,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	QueueId          []int64               `protobuf:"varint,8,rep,packed,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	TeamId           []int64               `protobuf:"varint,9,rep,packed,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	MemberId         []int64               `protobuf:"varint,10,rep,packed,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	GatewayId        []int64               `protobuf:"varint,11,rep,packed,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	Duration         *FilterBetween        `protobuf:"bytes,12,opt,name=duration,proto3" json:"duration,omitempty"`
	SkipParent       bool                  `protobuf:"varint,13,opt,name=skip_parent,json=skipParent,proto3" json:"skip_parent,omitempty"`
	ParentId         string                `protobuf:"bytes,14,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Cause            []string              `protobuf:"bytes,15,rep,name=cause,proto3" json:"cause,omitempty"`
	HasFile          *wrapperspb.BoolValue `protobuf:"bytes,16,opt,name=has_file,json=hasFile,proto3" json:"has_file,omitempty"`
	DomainId         int64                 `protobuf:"varint,17,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Number           string                `protobuf:"bytes,18,opt,name=number,proto3" json:"number,omitempty"`
	Direction        string                `protobuf:"bytes,19,opt,name=direction,proto3" json:"direction,omitempty"`
	AnsweredAt       *FilterBetween        `protobuf:"bytes,20,opt,name=answered_at,json=answeredAt,proto3" json:"answered_at,omitempty"`
	Missed           bool                  `protobuf:"varint,21,opt,name=missed,proto3" json:"missed,omitempty"`
	StoredAt         *FilterBetween        `protobuf:"bytes,22,opt,name=stored_at,json=storedAt,proto3" json:"stored_at,omitempty"`
	Id               []string              `protobuf:"bytes,23,rep,name=id,proto3" json:"id,omitempty"`
	TransferFrom     []string              `protobuf:"bytes,24,rep,name=transfer_from,json=transferFrom,proto3" json:"transfer_from,omitempty"`
	TransferTo       []string              `protobuf:"bytes,25,rep,name=transfer_to,json=transferTo,proto3" json:"transfer_to,omitempty"`
	DependencyId     string                `protobuf:"bytes,26,opt,name=dependency_id,json=dependencyId,proto3" json:"dependency_id,omitempty"`
	Tags             []string              `protobuf:"bytes,27,rep,name=tags,proto3" json:"tags,omitempty"`
	Variables        map[string]string     `protobuf:"bytes,28,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AmdResult        []string              `protobuf:"bytes,29,rep,name=amd_result,json=amdResult,proto3" json:"amd_result,omitempty"`
	Fts              string                `protobuf:"bytes,30,opt,name=fts,proto3" json:"fts,omitempty"`
	Directions       []string              `protobuf:"bytes,31,rep,name=directions,proto3" json:"directions,omitempty"`
	HasTranscript    *wrapperspb.BoolValue `protobuf:"bytes,32,opt,name=has_transcript,json=hasTranscript,proto3" json:"has_transcript,omitempty"`
	AgentDescription string                `protobuf:"bytes,33,opt,name=agent_description,json=agentDescription,proto3" json:"agent_description,omitempty"`
	ContactId        []int64               `protobuf:"varint,34,rep,packed,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
}

func (x *AggregateHistoryCallRequest) Reset() {
	*x = AggregateHistoryCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateHistoryCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateHistoryCallRequest) ProtoMessage() {}

func (x *AggregateHistoryCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateHistoryCallRequest.ProtoReflect.Descriptor instead.
func (*AggregateHistoryCallRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{8}
}

func (x *AggregateHistoryCallRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AggregateHistoryCallRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AggregateHistoryCallRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *AggregateHistoryCallRequest) GetAggs() []*AggregateRequest {
	if x != nil {
		return x.Aggs
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetCreatedAt() *FilterBetween {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetUserId() []int64 {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetAgentId() []int64 {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetQueueId() []int64 {
	if x != nil {
		return x.QueueId
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetTeamId() []int64 {
	if x != nil {
		return x.TeamId
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetMemberId() []int64 {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetGatewayId() []int64 {
	if x != nil {
		return x.GatewayId
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetDuration() *FilterBetween {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetSkipParent() bool {
	if x != nil {
		return x.SkipParent
	}
	return false
}

func (x *AggregateHistoryCallRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *AggregateHistoryCallRequest) GetCause() []string {
	if x != nil {
		return x.Cause
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetHasFile() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasFile
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *AggregateHistoryCallRequest) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *AggregateHistoryCallRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *AggregateHistoryCallRequest) GetAnsweredAt() *FilterBetween {
	if x != nil {
		return x.AnsweredAt
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetMissed() bool {
	if x != nil {
		return x.Missed
	}
	return false
}

func (x *AggregateHistoryCallRequest) GetStoredAt() *FilterBetween {
	if x != nil {
		return x.StoredAt
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetTransferFrom() []string {
	if x != nil {
		return x.TransferFrom
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetTransferTo() []string {
	if x != nil {
		return x.TransferTo
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetDependencyId() string {
	if x != nil {
		return x.DependencyId
	}
	return ""
}

func (x *AggregateHistoryCallRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetAmdResult() []string {
	if x != nil {
		return x.AmdResult
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetFts() string {
	if x != nil {
		return x.Fts
	}
	return ""
}

func (x *AggregateHistoryCallRequest) GetDirections() []string {
	if x != nil {
		return x.Directions
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetHasTranscript() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasTranscript
	}
	return nil
}

func (x *AggregateHistoryCallRequest) GetAgentDescription() string {
	if x != nil {
		return x.AgentDescription
	}
	return ""
}

func (x *AggregateHistoryCallRequest) GetContactId() []int64 {
	if x != nil {
		return x.ContactId
	}
	return nil
}

type AggregateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data *structpb.Value `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AggregateResult) Reset() {
	*x = AggregateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateResult) ProtoMessage() {}

func (x *AggregateResult) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateResult.ProtoReflect.Descriptor instead.
func (*AggregateResult) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{9}
}

func (x *AggregateResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AggregateResult) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListAggregate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AggregateResult `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListAggregate) Reset() {
	*x = ListAggregate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregate) ProtoMessage() {}

func (x *ListAggregate) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregate.ProtoReflect.Descriptor instead.
func (*ListAggregate) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{10}
}

func (x *ListAggregate) GetItems() []*AggregateResult {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListHistoryCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next  bool           `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items []*HistoryCall `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListHistoryCall) Reset() {
	*x = ListHistoryCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHistoryCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoryCall) ProtoMessage() {}

func (x *ListHistoryCall) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoryCall.ProtoReflect.Descriptor instead.
func (*ListHistoryCall) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{11}
}

func (x *ListHistoryCall) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListHistoryCall) GetItems() []*HistoryCall {
	if x != nil {
		return x.Items
	}
	return nil
}

type CallFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Size     int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	MimeType string `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	StartAt  int64  `protobuf:"varint,5,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	StopAt   int64  `protobuf:"varint,6,opt,name=stop_at,json=stopAt,proto3" json:"stop_at,omitempty"`
}

func (x *CallFile) Reset() {
	*x = CallFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallFile) ProtoMessage() {}

func (x *CallFile) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallFile.ProtoReflect.Descriptor instead.
func (*CallFile) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{12}
}

func (x *CallFile) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CallFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CallFile) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CallFile) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *CallFile) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *CallFile) GetStopAt() int64 {
	if x != nil {
		return x.StopAt
	}
	return 0
}

type CallHold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int64   `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Stop  int64   `protobuf:"varint,2,opt,name=stop,proto3" json:"stop,omitempty"`
	Sec   float32 `protobuf:"fixed32,3,opt,name=sec,proto3" json:"sec,omitempty"`
}

func (x *CallHold) Reset() {
	*x = CallHold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHold) ProtoMessage() {}

func (x *CallHold) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHold.ProtoReflect.Descriptor instead.
func (*CallHold) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{13}
}

func (x *CallHold) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *CallHold) GetStop() int64 {
	if x != nil {
		return x.Stop
	}
	return 0
}

func (x *CallHold) GetSec() float32 {
	if x != nil {
		return x.Sec
	}
	return 0
}

type CallAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CallId    string  `protobuf:"bytes,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	CreatedBy *Lookup `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt int64   `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedBy *Lookup `protobuf:"bytes,5,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	UpdatedAt int64   `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Note      string  `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	StartSec  int32   `protobuf:"varint,8,opt,name=start_sec,json=startSec,proto3" json:"start_sec,omitempty"`
	EndSec    int32   `protobuf:"varint,9,opt,name=end_sec,json=endSec,proto3" json:"end_sec,omitempty"`
}

func (x *CallAnnotation) Reset() {
	*x = CallAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallAnnotation) ProtoMessage() {}

func (x *CallAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallAnnotation.ProtoReflect.Descriptor instead.
func (*CallAnnotation) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{14}
}

func (x *CallAnnotation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CallAnnotation) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

func (x *CallAnnotation) GetCreatedBy() *Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *CallAnnotation) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CallAnnotation) GetUpdatedBy() *Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *CallAnnotation) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *CallAnnotation) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CallAnnotation) GetStartSec() int32 {
	if x != nil {
		return x.StartSec
	}
	return 0
}

func (x *CallAnnotation) GetEndSec() int32 {
	if x != nil {
		return x.EndSec
	}
	return 0
}

type CreateCallAnnotationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallId   string `protobuf:"bytes,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	Note     string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	StartSec int32  `protobuf:"varint,3,opt,name=start_sec,json=startSec,proto3" json:"start_sec,omitempty"`
	EndSec   int32  `protobuf:"varint,4,opt,name=end_sec,json=endSec,proto3" json:"end_sec,omitempty"`
}

func (x *CreateCallAnnotationRequest) Reset() {
	*x = CreateCallAnnotationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCallAnnotationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCallAnnotationRequest) ProtoMessage() {}

func (x *CreateCallAnnotationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCallAnnotationRequest.ProtoReflect.Descriptor instead.
func (*CreateCallAnnotationRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{15}
}

func (x *CreateCallAnnotationRequest) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

func (x *CreateCallAnnotationRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateCallAnnotationRequest) GetStartSec() int32 {
	if x != nil {
		return x.StartSec
	}
	return 0
}

func (x *CreateCallAnnotationRequest) GetEndSec() int32 {
	if x != nil {
		return x.EndSec
	}
	return 0
}

type UpdateCallAnnotationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CallId   string `protobuf:"bytes,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	Note     string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	StartSec int32  `protobuf:"varint,4,opt,name=start_sec,json=startSec,proto3" json:"start_sec,omitempty"`
	EndSec   int32  `protobuf:"varint,5,opt,name=end_sec,json=endSec,proto3" json:"end_sec,omitempty"`
}

func (x *UpdateCallAnnotationRequest) Reset() {
	*x = UpdateCallAnnotationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCallAnnotationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCallAnnotationRequest) ProtoMessage() {}

func (x *UpdateCallAnnotationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCallAnnotationRequest.ProtoReflect.Descriptor instead.
func (*UpdateCallAnnotationRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateCallAnnotationRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCallAnnotationRequest) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

func (x *UpdateCallAnnotationRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *UpdateCallAnnotationRequest) GetStartSec() int32 {
	if x != nil {
		return x.StartSec
	}
	return 0
}

func (x *UpdateCallAnnotationRequest) GetEndSec() int32 {
	if x != nil {
		return x.EndSec
	}
	return 0
}

type DeleteCallAnnotationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CallId string `protobuf:"bytes,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
}

func (x *DeleteCallAnnotationRequest) Reset() {
	*x = DeleteCallAnnotationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCallAnnotationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCallAnnotationRequest) ProtoMessage() {}

func (x *DeleteCallAnnotationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCallAnnotationRequest.ProtoReflect.Descriptor instead.
func (*DeleteCallAnnotationRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteCallAnnotationRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteCallAnnotationRequest) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

type HistoryFileJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FileId      int64                               `protobuf:"varint,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	CreatedAt   int64                               `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Action      HistoryFileJob_HistoryFileJobAction `protobuf:"varint,4,opt,name=action,proto3,enum=engine.HistoryFileJob_HistoryFileJobAction" json:"action,omitempty"`
	State       HistoryFileJob_HistoryFileJobState  `protobuf:"varint,5,opt,name=state,proto3,enum=engine.HistoryFileJob_HistoryFileJobState" json:"state,omitempty"`
	ErrorDetail string                              `protobuf:"bytes,6,opt,name=error_detail,json=errorDetail,proto3" json:"error_detail,omitempty"`
}

func (x *HistoryFileJob) Reset() {
	*x = HistoryFileJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryFileJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryFileJob) ProtoMessage() {}

func (x *HistoryFileJob) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryFileJob.ProtoReflect.Descriptor instead.
func (*HistoryFileJob) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{18}
}

func (x *HistoryFileJob) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HistoryFileJob) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *HistoryFileJob) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *HistoryFileJob) GetAction() HistoryFileJob_HistoryFileJobAction {
	if x != nil {
		return x.Action
	}
	return HistoryFileJob_undefined
}

func (x *HistoryFileJob) GetState() HistoryFileJob_HistoryFileJobState {
	if x != nil {
		return x.State
	}
	return HistoryFileJob_idle
}

func (x *HistoryFileJob) GetErrorDetail() string {
	if x != nil {
		return x.ErrorDetail
	}
	return ""
}

type TranscriptLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Locale string  `protobuf:"bytes,2,opt,name=locale,proto3" json:"locale,omitempty"`
	FileId int64   `protobuf:"varint,3,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"` // deprecated
	File   *Lookup `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *TranscriptLookup) Reset() {
	*x = TranscriptLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptLookup) ProtoMessage() {}

func (x *TranscriptLookup) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptLookup.ProtoReflect.Descriptor instead.
func (*TranscriptLookup) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{19}
}

func (x *TranscriptLookup) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TranscriptLookup) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *TranscriptLookup) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *TranscriptLookup) GetFile() *Lookup {
	if x != nil {
		return x.File
	}
	return nil
}

type HistoryCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AppId             string                       `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Type              string                       `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	ParentId          string                       `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	User              *Lookup                      `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Extension         string                       `protobuf:"bytes,6,opt,name=extension,proto3" json:"extension,omitempty"`
	Gateway           *Lookup                      `protobuf:"bytes,7,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Direction         string                       `protobuf:"bytes,8,opt,name=direction,proto3" json:"direction,omitempty"`
	Destination       string                       `protobuf:"bytes,9,opt,name=destination,proto3" json:"destination,omitempty"`
	From              *Endpoint                    `protobuf:"bytes,10,opt,name=from,proto3" json:"from,omitempty"`
	To                *Endpoint                    `protobuf:"bytes,11,opt,name=to,proto3" json:"to,omitempty"`
	Variables         map[string]string            `protobuf:"bytes,12,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreatedAt         int64                        `protobuf:"varint,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	AnsweredAt        int64                        `protobuf:"varint,14,opt,name=answered_at,json=answeredAt,proto3" json:"answered_at,omitempty"`
	BridgedAt         int64                        `protobuf:"varint,15,opt,name=bridged_at,json=bridgedAt,proto3" json:"bridged_at,omitempty"`
	HangupAt          int64                        `protobuf:"varint,16,opt,name=hangup_at,json=hangupAt,proto3" json:"hangup_at,omitempty"`
	HangupBy          string                       `protobuf:"bytes,17,opt,name=hangup_by,json=hangupBy,proto3" json:"hangup_by,omitempty"`
	Cause             string                       `protobuf:"bytes,18,opt,name=cause,proto3" json:"cause,omitempty"`
	Duration          int32                        `protobuf:"varint,19,opt,name=duration,proto3" json:"duration,omitempty"`
	HoldSec           int32                        `protobuf:"varint,20,opt,name=hold_sec,json=holdSec,proto3" json:"hold_sec,omitempty"`
	WaitSec           int32                        `protobuf:"varint,21,opt,name=wait_sec,json=waitSec,proto3" json:"wait_sec,omitempty"`
	BillSec           int32                        `protobuf:"varint,22,opt,name=bill_sec,json=billSec,proto3" json:"bill_sec,omitempty"`
	SipCode           int32                        `protobuf:"varint,23,opt,name=sip_code,json=sipCode,proto3" json:"sip_code,omitempty"`
	Files             []*CallFile                  `protobuf:"bytes,24,rep,name=files,proto3" json:"files,omitempty"`
	Queue             *Lookup                      `protobuf:"bytes,25,opt,name=queue,proto3" json:"queue,omitempty"`
	Member            *Lookup                      `protobuf:"bytes,26,opt,name=member,proto3" json:"member,omitempty"`
	Team              *Lookup                      `protobuf:"bytes,27,opt,name=team,proto3" json:"team,omitempty"`
	Agent             *Lookup                      `protobuf:"bytes,28,opt,name=agent,proto3" json:"agent,omitempty"`
	JoinedAt          int64                        `protobuf:"varint,29,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	LeavingAt         int64                        `protobuf:"varint,30,opt,name=leaving_at,json=leavingAt,proto3" json:"leaving_at,omitempty"`
	ReportingAt       int64                        `protobuf:"varint,31,opt,name=reporting_at,json=reportingAt,proto3" json:"reporting_at,omitempty"`
	QueueBridgedAt    int64                        `protobuf:"varint,32,opt,name=queue_bridged_at,json=queueBridgedAt,proto3" json:"queue_bridged_at,omitempty"`
	QueueWaitSec      int32                        `protobuf:"varint,33,opt,name=queue_wait_sec,json=queueWaitSec,proto3" json:"queue_wait_sec,omitempty"`
	QueueDurationSec  int32                        `protobuf:"varint,34,opt,name=queue_duration_sec,json=queueDurationSec,proto3" json:"queue_duration_sec,omitempty"`
	ReportingSec      int32                        `protobuf:"varint,35,opt,name=reporting_sec,json=reportingSec,proto3" json:"reporting_sec,omitempty"`
	Result            string                       `protobuf:"bytes,36,opt,name=result,proto3" json:"result,omitempty"`
	Tags              []string                     `protobuf:"bytes,37,rep,name=tags,proto3" json:"tags,omitempty"`
	Display           string                       `protobuf:"bytes,38,opt,name=display,proto3" json:"display,omitempty"`
	StoredAt          int64                        `protobuf:"varint,39,opt,name=stored_at,json=storedAt,proto3" json:"stored_at,omitempty"`
	TransferFrom      string                       `protobuf:"bytes,40,opt,name=transfer_from,json=transferFrom,proto3" json:"transfer_from,omitempty"`
	TransferTo        string                       `protobuf:"bytes,41,opt,name=transfer_to,json=transferTo,proto3" json:"transfer_to,omitempty"`
	HasChildren       bool                         `protobuf:"varint,42,opt,name=has_children,json=hasChildren,proto3" json:"has_children,omitempty"`
	AgentDescription  string                       `protobuf:"bytes,43,opt,name=agent_description,json=agentDescription,proto3" json:"agent_description,omitempty"`
	Hold              []*CallHold                  `protobuf:"bytes,44,rep,name=hold,proto3" json:"hold,omitempty"`
	Annotations       []*CallAnnotation            `protobuf:"bytes,45,rep,name=annotations,proto3" json:"annotations,omitempty"`
	AmdResult         string                       `protobuf:"bytes,46,opt,name=amd_result,json=amdResult,proto3" json:"amd_result,omitempty"`
	HangupDisposition string                       `protobuf:"bytes,47,opt,name=hangup_disposition,json=hangupDisposition,proto3" json:"hangup_disposition,omitempty"`
	BlindTransfer     string                       `protobuf:"bytes,48,opt,name=blind_transfer,json=blindTransfer,proto3" json:"blind_transfer,omitempty"`
	FilesJob          []*HistoryFileJob            `protobuf:"bytes,49,rep,name=files_job,json=filesJob,proto3" json:"files_job,omitempty"`
	Transcripts       []*TranscriptLookup          `protobuf:"bytes,50,rep,name=transcripts,proto3" json:"transcripts,omitempty"`
	TalkSec           int32                        `protobuf:"varint,51,opt,name=talk_sec,json=talkSec,proto3" json:"talk_sec,omitempty"`
	Grantee           *Lookup                      `protobuf:"bytes,52,opt,name=grantee,proto3" json:"grantee,omitempty"`
	AmdAiResult       string                       `protobuf:"bytes,53,opt,name=amd_ai_result,json=amdAiResult,proto3" json:"amd_ai_result,omitempty"`
	AmdAiLogs         []string                     `protobuf:"bytes,54,rep,name=amd_ai_logs,json=amdAiLogs,proto3" json:"amd_ai_logs,omitempty"`
	RateId            int64                        `protobuf:"varint,55,opt,name=rate_id,json=rateId,proto3" json:"rate_id,omitempty"`
	RatedUser         *Lookup                      `protobuf:"bytes,56,opt,name=rated_user,json=ratedUser,proto3" json:"rated_user,omitempty"`
	RatedBy           *Lookup                      `protobuf:"bytes,57,opt,name=rated_by,json=ratedBy,proto3" json:"rated_by,omitempty"`
	ScoreOptional     float32                      `protobuf:"fixed32,58,opt,name=score_optional,json=scoreOptional,proto3" json:"score_optional,omitempty"`
	ScoreRequired     float32                      `protobuf:"fixed32,59,opt,name=score_required,json=scoreRequired,proto3" json:"score_required,omitempty"`
	AttemptId         int64                        `protobuf:"varint,60,opt,name=attempt_id,json=attemptId,proto3" json:"attempt_id,omitempty"`
	AllowEvaluation   bool                         `protobuf:"varint,61,opt,name=allow_evaluation,json=allowEvaluation,proto3" json:"allow_evaluation,omitempty"`
	FormFields        *structpb.Value              `protobuf:"bytes,62,opt,name=form_fields,json=formFields,proto3" json:"form_fields,omitempty"`
	BridgedId         string                       `protobuf:"bytes,63,opt,name=bridged_id,json=bridgedId,proto3" json:"bridged_id,omitempty"`
	Contact           *Lookup                      `protobuf:"bytes,64,opt,name=contact,proto3" json:"contact,omitempty"`
	MemberId          int64                        `protobuf:"varint,65,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	Schemas           []*Lookup                    `protobuf:"bytes,67,rep,name=schemas,proto3" json:"schemas,omitempty"`
	HangupPhrase      string                       `protobuf:"bytes,68,opt,name=hangup_phrase,json=hangupPhrase,proto3" json:"hangup_phrase,omitempty"`
	BlindTransfers    []*HistoryCall_BlindTransfer `protobuf:"bytes,69,rep,name=blind_transfers,json=blindTransfers,proto3" json:"blind_transfers,omitempty"`
	FromNumber        string                       `protobuf:"bytes,70,opt,name=from_number,json=fromNumber,proto3" json:"from_number,omitempty"`
	ToNumber          string                       `protobuf:"bytes,71,opt,name=to_number,json=toNumber,proto3" json:"to_number,omitempty"`
}

func (x *HistoryCall) Reset() {
	*x = HistoryCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryCall) ProtoMessage() {}

func (x *HistoryCall) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryCall.ProtoReflect.Descriptor instead.
func (*HistoryCall) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{20}
}

func (x *HistoryCall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HistoryCall) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *HistoryCall) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HistoryCall) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *HistoryCall) GetUser() *Lookup {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *HistoryCall) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *HistoryCall) GetGateway() *Lookup {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *HistoryCall) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *HistoryCall) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *HistoryCall) GetFrom() *Endpoint {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *HistoryCall) GetTo() *Endpoint {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *HistoryCall) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *HistoryCall) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *HistoryCall) GetAnsweredAt() int64 {
	if x != nil {
		return x.AnsweredAt
	}
	return 0
}

func (x *HistoryCall) GetBridgedAt() int64 {
	if x != nil {
		return x.BridgedAt
	}
	return 0
}

func (x *HistoryCall) GetHangupAt() int64 {
	if x != nil {
		return x.HangupAt
	}
	return 0
}

func (x *HistoryCall) GetHangupBy() string {
	if x != nil {
		return x.HangupBy
	}
	return ""
}

func (x *HistoryCall) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *HistoryCall) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *HistoryCall) GetHoldSec() int32 {
	if x != nil {
		return x.HoldSec
	}
	return 0
}

func (x *HistoryCall) GetWaitSec() int32 {
	if x != nil {
		return x.WaitSec
	}
	return 0
}

func (x *HistoryCall) GetBillSec() int32 {
	if x != nil {
		return x.BillSec
	}
	return 0
}

func (x *HistoryCall) GetSipCode() int32 {
	if x != nil {
		return x.SipCode
	}
	return 0
}

func (x *HistoryCall) GetFiles() []*CallFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *HistoryCall) GetQueue() *Lookup {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *HistoryCall) GetMember() *Lookup {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *HistoryCall) GetTeam() *Lookup {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *HistoryCall) GetAgent() *Lookup {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *HistoryCall) GetJoinedAt() int64 {
	if x != nil {
		return x.JoinedAt
	}
	return 0
}

func (x *HistoryCall) GetLeavingAt() int64 {
	if x != nil {
		return x.LeavingAt
	}
	return 0
}

func (x *HistoryCall) GetReportingAt() int64 {
	if x != nil {
		return x.ReportingAt
	}
	return 0
}

func (x *HistoryCall) GetQueueBridgedAt() int64 {
	if x != nil {
		return x.QueueBridgedAt
	}
	return 0
}

func (x *HistoryCall) GetQueueWaitSec() int32 {
	if x != nil {
		return x.QueueWaitSec
	}
	return 0
}

func (x *HistoryCall) GetQueueDurationSec() int32 {
	if x != nil {
		return x.QueueDurationSec
	}
	return 0
}

func (x *HistoryCall) GetReportingSec() int32 {
	if x != nil {
		return x.ReportingSec
	}
	return 0
}

func (x *HistoryCall) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *HistoryCall) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *HistoryCall) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *HistoryCall) GetStoredAt() int64 {
	if x != nil {
		return x.StoredAt
	}
	return 0
}

func (x *HistoryCall) GetTransferFrom() string {
	if x != nil {
		return x.TransferFrom
	}
	return ""
}

func (x *HistoryCall) GetTransferTo() string {
	if x != nil {
		return x.TransferTo
	}
	return ""
}

func (x *HistoryCall) GetHasChildren() bool {
	if x != nil {
		return x.HasChildren
	}
	return false
}

func (x *HistoryCall) GetAgentDescription() string {
	if x != nil {
		return x.AgentDescription
	}
	return ""
}

func (x *HistoryCall) GetHold() []*CallHold {
	if x != nil {
		return x.Hold
	}
	return nil
}

func (x *HistoryCall) GetAnnotations() []*CallAnnotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *HistoryCall) GetAmdResult() string {
	if x != nil {
		return x.AmdResult
	}
	return ""
}

func (x *HistoryCall) GetHangupDisposition() string {
	if x != nil {
		return x.HangupDisposition
	}
	return ""
}

func (x *HistoryCall) GetBlindTransfer() string {
	if x != nil {
		return x.BlindTransfer
	}
	return ""
}

func (x *HistoryCall) GetFilesJob() []*HistoryFileJob {
	if x != nil {
		return x.FilesJob
	}
	return nil
}

func (x *HistoryCall) GetTranscripts() []*TranscriptLookup {
	if x != nil {
		return x.Transcripts
	}
	return nil
}

func (x *HistoryCall) GetTalkSec() int32 {
	if x != nil {
		return x.TalkSec
	}
	return 0
}

func (x *HistoryCall) GetGrantee() *Lookup {
	if x != nil {
		return x.Grantee
	}
	return nil
}

func (x *HistoryCall) GetAmdAiResult() string {
	if x != nil {
		return x.AmdAiResult
	}
	return ""
}

func (x *HistoryCall) GetAmdAiLogs() []string {
	if x != nil {
		return x.AmdAiLogs
	}
	return nil
}

func (x *HistoryCall) GetRateId() int64 {
	if x != nil {
		return x.RateId
	}
	return 0
}

func (x *HistoryCall) GetRatedUser() *Lookup {
	if x != nil {
		return x.RatedUser
	}
	return nil
}

func (x *HistoryCall) GetRatedBy() *Lookup {
	if x != nil {
		return x.RatedBy
	}
	return nil
}

func (x *HistoryCall) GetScoreOptional() float32 {
	if x != nil {
		return x.ScoreOptional
	}
	return 0
}

func (x *HistoryCall) GetScoreRequired() float32 {
	if x != nil {
		return x.ScoreRequired
	}
	return 0
}

func (x *HistoryCall) GetAttemptId() int64 {
	if x != nil {
		return x.AttemptId
	}
	return 0
}

func (x *HistoryCall) GetAllowEvaluation() bool {
	if x != nil {
		return x.AllowEvaluation
	}
	return false
}

func (x *HistoryCall) GetFormFields() *structpb.Value {
	if x != nil {
		return x.FormFields
	}
	return nil
}

func (x *HistoryCall) GetBridgedId() string {
	if x != nil {
		return x.BridgedId
	}
	return ""
}

func (x *HistoryCall) GetContact() *Lookup {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *HistoryCall) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *HistoryCall) GetSchemas() []*Lookup {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *HistoryCall) GetHangupPhrase() string {
	if x != nil {
		return x.HangupPhrase
	}
	return ""
}

func (x *HistoryCall) GetBlindTransfers() []*HistoryCall_BlindTransfer {
	if x != nil {
		return x.BlindTransfers
	}
	return nil
}

func (x *HistoryCall) GetFromNumber() string {
	if x != nil {
		return x.FromNumber
	}
	return ""
}

func (x *HistoryCall) GetToNumber() string {
	if x != nil {
		return x.ToNumber
	}
	return ""
}

type EavesdropCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AppId    string                                `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Control  bool                                  `protobuf:"varint,3,opt,name=control,proto3" json:"control,omitempty"`
	ListenA  bool                                  `protobuf:"varint,4,opt,name=listen_a,json=listenA,proto3" json:"listen_a,omitempty"`
	ListenB  bool                                  `protobuf:"varint,5,opt,name=listen_b,json=listenB,proto3" json:"listen_b,omitempty"`
	WhisperA bool                                  `protobuf:"varint,6,opt,name=whisper_a,json=whisperA,proto3" json:"whisper_a,omitempty"`
	WhisperB bool                                  `protobuf:"varint,7,opt,name=whisper_b,json=whisperB,proto3" json:"whisper_b,omitempty"`
	From     *EavesdropCallRequest_EndpointRequest `protobuf:"bytes,9,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *EavesdropCallRequest) Reset() {
	*x = EavesdropCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EavesdropCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EavesdropCallRequest) ProtoMessage() {}

func (x *EavesdropCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EavesdropCallRequest.ProtoReflect.Descriptor instead.
func (*EavesdropCallRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{21}
}

func (x *EavesdropCallRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EavesdropCallRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *EavesdropCallRequest) GetControl() bool {
	if x != nil {
		return x.Control
	}
	return false
}

func (x *EavesdropCallRequest) GetListenA() bool {
	if x != nil {
		return x.ListenA
	}
	return false
}

func (x *EavesdropCallRequest) GetListenB() bool {
	if x != nil {
		return x.ListenB
	}
	return false
}

func (x *EavesdropCallRequest) GetWhisperA() bool {
	if x != nil {
		return x.WhisperA
	}
	return false
}

func (x *EavesdropCallRequest) GetWhisperB() bool {
	if x != nil {
		return x.WhisperB
	}
	return false
}

func (x *EavesdropCallRequest) GetFrom() *EavesdropCallRequest_EndpointRequest {
	if x != nil {
		return x.From
	}
	return nil
}

type BlindTransferCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AppId       string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Destination string `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	DomainId    int64  `protobuf:"varint,4,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *BlindTransferCallRequest) Reset() {
	*x = BlindTransferCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlindTransferCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlindTransferCallRequest) ProtoMessage() {}

func (x *BlindTransferCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlindTransferCallRequest.ProtoReflect.Descriptor instead.
func (*BlindTransferCallRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{22}
}

func (x *BlindTransferCallRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlindTransferCallRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *BlindTransferCallRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *BlindTransferCallRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

type BlindTransferCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlindTransferCallResponse) Reset() {
	*x = BlindTransferCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlindTransferCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlindTransferCallResponse) ProtoMessage() {}

func (x *BlindTransferCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlindTransferCallResponse.ProtoReflect.Descriptor instead.
func (*BlindTransferCallResponse) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{23}
}

type DtmfCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DtmfCallResponse) Reset() {
	*x = DtmfCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DtmfCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DtmfCallResponse) ProtoMessage() {}

func (x *DtmfCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DtmfCallResponse.ProtoReflect.Descriptor instead.
func (*DtmfCallResponse) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{24}
}

type DtmfCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AppId    string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Digit    string `protobuf:"bytes,3,opt,name=digit,proto3" json:"digit,omitempty"`
	DomainId int64  `protobuf:"varint,4,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *DtmfCallRequest) Reset() {
	*x = DtmfCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DtmfCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DtmfCallRequest) ProtoMessage() {}

func (x *DtmfCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DtmfCallRequest.ProtoReflect.Descriptor instead.
func (*DtmfCallRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{25}
}

func (x *DtmfCallRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DtmfCallRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DtmfCallRequest) GetDigit() string {
	if x != nil {
		return x.Digit
	}
	return ""
}

func (x *DtmfCallRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

type UserCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AppId    string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	DomainId int64  `protobuf:"varint,3,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *UserCallRequest) Reset() {
	*x = UserCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCallRequest) ProtoMessage() {}

func (x *UserCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCallRequest.ProtoReflect.Descriptor instead.
func (*UserCallRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{26}
}

func (x *UserCallRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserCallRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *UserCallRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

type HoldCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *HoldCallResponse) Reset() {
	*x = HoldCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldCallResponse) ProtoMessage() {}

func (x *HoldCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldCallResponse.ProtoReflect.Descriptor instead.
func (*HoldCallResponse) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{27}
}

func (x *HoldCallResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type CreateCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateCallResponse) Reset() {
	*x = CreateCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCallResponse) ProtoMessage() {}

func (x *CreateCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCallResponse.ProtoReflect.Descriptor instead.
func (*CreateCallResponse) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{28}
}

func (x *CreateCallResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type HangupCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HangupCallResponse) Reset() {
	*x = HangupCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HangupCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HangupCallResponse) ProtoMessage() {}

func (x *HangupCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HangupCallResponse.ProtoReflect.Descriptor instead.
func (*HangupCallResponse) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{29}
}

type HangupCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Cause    string `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"`
	AppId    string `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	DomainId int64  `protobuf:"varint,4,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *HangupCallRequest) Reset() {
	*x = HangupCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HangupCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HangupCallRequest) ProtoMessage() {}

func (x *HangupCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HangupCallRequest.ProtoReflect.Descriptor instead.
func (*HangupCallRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{30}
}

func (x *HangupCallRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HangupCallRequest) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *HangupCallRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *HangupCallRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

type ReadCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DomainId int64  `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *ReadCallRequest) Reset() {
	*x = ReadCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCallRequest) ProtoMessage() {}

func (x *ReadCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCallRequest.ProtoReflect.Descriptor instead.
func (*ReadCallRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{31}
}

func (x *ReadCallRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadCallRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

type SearchCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         int32          `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size         int32          `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q            string         `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Sort         string         `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields       []string       `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	CreatedAt    *FilterBetween `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UserId       []int64        `protobuf:"varint,7,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AgentId      []int64        `protobuf:"varint,8,rep,packed,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	QueueId      []int64        `protobuf:"varint,9,rep,packed,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	TeamId       []int64        `protobuf:"varint,10,rep,packed,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	MemberId     []int64        `protobuf:"varint,11,rep,packed,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	GatewayId    []int64        `protobuf:"varint,12,rep,packed,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	Duration     *FilterBetween `protobuf:"bytes,13,opt,name=duration,proto3" json:"duration,omitempty"`
	SkipParent   bool           `protobuf:"varint,14,opt,name=skip_parent,json=skipParent,proto3" json:"skip_parent,omitempty"`
	ParentId     string         `protobuf:"bytes,15,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Cause        []string       `protobuf:"bytes,16,rep,name=cause,proto3" json:"cause,omitempty"`
	ExistsFile   bool           `protobuf:"varint,17,opt,name=exists_file,json=existsFile,proto3" json:"exists_file,omitempty"`
	DomainId     int64          `protobuf:"varint,18,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Number       string         `protobuf:"bytes,19,opt,name=number,proto3" json:"number,omitempty"`
	Direction    []string       `protobuf:"bytes,20,rep,name=direction,proto3" json:"direction,omitempty"`
	AnsweredAt   *FilterBetween `protobuf:"bytes,21,opt,name=answered_at,json=answeredAt,proto3" json:"answered_at,omitempty"`
	Missed       bool           `protobuf:"varint,22,opt,name=missed,proto3" json:"missed,omitempty"`
	StoredAt     *FilterBetween `protobuf:"bytes,23,opt,name=stored_at,json=storedAt,proto3" json:"stored_at,omitempty"`
	SupervisorId []int64        `protobuf:"varint,24,rep,packed,name=supervisor_id,json=supervisorId,proto3" json:"supervisor_id,omitempty"`
	State        []string       `protobuf:"bytes,25,rep,name=state,proto3" json:"state,omitempty"`
}

func (x *SearchCallRequest) Reset() {
	*x = SearchCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCallRequest) ProtoMessage() {}

func (x *SearchCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCallRequest.ProtoReflect.Descriptor instead.
func (*SearchCallRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{32}
}

func (x *SearchCallRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchCallRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchCallRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchCallRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchCallRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchCallRequest) GetCreatedAt() *FilterBetween {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SearchCallRequest) GetUserId() []int64 {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *SearchCallRequest) GetAgentId() []int64 {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *SearchCallRequest) GetQueueId() []int64 {
	if x != nil {
		return x.QueueId
	}
	return nil
}

func (x *SearchCallRequest) GetTeamId() []int64 {
	if x != nil {
		return x.TeamId
	}
	return nil
}

func (x *SearchCallRequest) GetMemberId() []int64 {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *SearchCallRequest) GetGatewayId() []int64 {
	if x != nil {
		return x.GatewayId
	}
	return nil
}

func (x *SearchCallRequest) GetDuration() *FilterBetween {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *SearchCallRequest) GetSkipParent() bool {
	if x != nil {
		return x.SkipParent
	}
	return false
}

func (x *SearchCallRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *SearchCallRequest) GetCause() []string {
	if x != nil {
		return x.Cause
	}
	return nil
}

func (x *SearchCallRequest) GetExistsFile() bool {
	if x != nil {
		return x.ExistsFile
	}
	return false
}

func (x *SearchCallRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *SearchCallRequest) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *SearchCallRequest) GetDirection() []string {
	if x != nil {
		return x.Direction
	}
	return nil
}

func (x *SearchCallRequest) GetAnsweredAt() *FilterBetween {
	if x != nil {
		return x.AnsweredAt
	}
	return nil
}

func (x *SearchCallRequest) GetMissed() bool {
	if x != nil {
		return x.Missed
	}
	return false
}

func (x *SearchCallRequest) GetStoredAt() *FilterBetween {
	if x != nil {
		return x.StoredAt
	}
	return nil
}

func (x *SearchCallRequest) GetSupervisorId() []int64 {
	if x != nil {
		return x.SupervisorId
	}
	return nil
}

func (x *SearchCallRequest) GetState() []string {
	if x != nil {
		return x.State
	}
	return nil
}

type ActiveCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AppId            string            `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	State            string            `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Timestamp        int64             `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type             string            `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	ParentId         string            `protobuf:"bytes,6,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	User             *Lookup           `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
	Extension        string            `protobuf:"bytes,8,opt,name=extension,proto3" json:"extension,omitempty"`
	Gateway          *Lookup           `protobuf:"bytes,9,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Direction        string            `protobuf:"bytes,10,opt,name=direction,proto3" json:"direction,omitempty"`
	Destination      string            `protobuf:"bytes,11,opt,name=destination,proto3" json:"destination,omitempty"`
	From             *Endpoint         `protobuf:"bytes,12,opt,name=from,proto3" json:"from,omitempty"`
	To               *Endpoint         `protobuf:"bytes,13,opt,name=to,proto3" json:"to,omitempty"`
	Variables        map[string]string `protobuf:"bytes,14,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreatedAt        int64             `protobuf:"varint,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	AnsweredAt       int64             `protobuf:"varint,16,opt,name=answered_at,json=answeredAt,proto3" json:"answered_at,omitempty"`
	BridgedAt        int64             `protobuf:"varint,17,opt,name=bridged_at,json=bridgedAt,proto3" json:"bridged_at,omitempty"`
	Duration         int32             `protobuf:"varint,21,opt,name=duration,proto3" json:"duration,omitempty"`
	HoldSec          int32             `protobuf:"varint,22,opt,name=hold_sec,json=holdSec,proto3" json:"hold_sec,omitempty"`
	WaitSec          int32             `protobuf:"varint,23,opt,name=wait_sec,json=waitSec,proto3" json:"wait_sec,omitempty"`
	BillSec          int32             `protobuf:"varint,24,opt,name=bill_sec,json=billSec,proto3" json:"bill_sec,omitempty"`
	Queue            *Lookup           `protobuf:"bytes,25,opt,name=queue,proto3" json:"queue,omitempty"`
	Member           *Lookup           `protobuf:"bytes,26,opt,name=member,proto3" json:"member,omitempty"`
	Team             *Lookup           `protobuf:"bytes,27,opt,name=team,proto3" json:"team,omitempty"`
	Agent            *Lookup           `protobuf:"bytes,28,opt,name=agent,proto3" json:"agent,omitempty"`
	JoinedAt         int64             `protobuf:"varint,29,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	LeavingAt        int64             `protobuf:"varint,30,opt,name=leaving_at,json=leavingAt,proto3" json:"leaving_at,omitempty"`
	ReportingAt      int64             `protobuf:"varint,31,opt,name=reporting_at,json=reportingAt,proto3" json:"reporting_at,omitempty"`
	QueueBridgedAt   int64             `protobuf:"varint,32,opt,name=queue_bridged_at,json=queueBridgedAt,proto3" json:"queue_bridged_at,omitempty"`
	QueueWaitSec     int32             `protobuf:"varint,33,opt,name=queue_wait_sec,json=queueWaitSec,proto3" json:"queue_wait_sec,omitempty"`
	QueueDurationSec int32             `protobuf:"varint,34,opt,name=queue_duration_sec,json=queueDurationSec,proto3" json:"queue_duration_sec,omitempty"`
	ReportingSec     int32             `protobuf:"varint,35,opt,name=reporting_sec,json=reportingSec,proto3" json:"reporting_sec,omitempty"`
	Display          string            `protobuf:"bytes,36,opt,name=display,proto3" json:"display,omitempty"`
	Supervisor       []*Lookup         `protobuf:"bytes,37,rep,name=supervisor,proto3" json:"supervisor,omitempty"`
	BlindTransfer    string            `protobuf:"bytes,38,opt,name=blind_transfer,json=blindTransfer,proto3" json:"blind_transfer,omitempty"`
	BridgedId        string            `protobuf:"bytes,39,opt,name=bridged_id,json=bridgedId,proto3" json:"bridged_id,omitempty"`
}

func (x *ActiveCall) Reset() {
	*x = ActiveCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveCall) ProtoMessage() {}

func (x *ActiveCall) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveCall.ProtoReflect.Descriptor instead.
func (*ActiveCall) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{33}
}

func (x *ActiveCall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActiveCall) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ActiveCall) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ActiveCall) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ActiveCall) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ActiveCall) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *ActiveCall) GetUser() *Lookup {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ActiveCall) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *ActiveCall) GetGateway() *Lookup {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *ActiveCall) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *ActiveCall) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *ActiveCall) GetFrom() *Endpoint {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ActiveCall) GetTo() *Endpoint {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *ActiveCall) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *ActiveCall) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ActiveCall) GetAnsweredAt() int64 {
	if x != nil {
		return x.AnsweredAt
	}
	return 0
}

func (x *ActiveCall) GetBridgedAt() int64 {
	if x != nil {
		return x.BridgedAt
	}
	return 0
}

func (x *ActiveCall) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ActiveCall) GetHoldSec() int32 {
	if x != nil {
		return x.HoldSec
	}
	return 0
}

func (x *ActiveCall) GetWaitSec() int32 {
	if x != nil {
		return x.WaitSec
	}
	return 0
}

func (x *ActiveCall) GetBillSec() int32 {
	if x != nil {
		return x.BillSec
	}
	return 0
}

func (x *ActiveCall) GetQueue() *Lookup {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *ActiveCall) GetMember() *Lookup {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *ActiveCall) GetTeam() *Lookup {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *ActiveCall) GetAgent() *Lookup {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *ActiveCall) GetJoinedAt() int64 {
	if x != nil {
		return x.JoinedAt
	}
	return 0
}

func (x *ActiveCall) GetLeavingAt() int64 {
	if x != nil {
		return x.LeavingAt
	}
	return 0
}

func (x *ActiveCall) GetReportingAt() int64 {
	if x != nil {
		return x.ReportingAt
	}
	return 0
}

func (x *ActiveCall) GetQueueBridgedAt() int64 {
	if x != nil {
		return x.QueueBridgedAt
	}
	return 0
}

func (x *ActiveCall) GetQueueWaitSec() int32 {
	if x != nil {
		return x.QueueWaitSec
	}
	return 0
}

func (x *ActiveCall) GetQueueDurationSec() int32 {
	if x != nil {
		return x.QueueDurationSec
	}
	return 0
}

func (x *ActiveCall) GetReportingSec() int32 {
	if x != nil {
		return x.ReportingSec
	}
	return 0
}

func (x *ActiveCall) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *ActiveCall) GetSupervisor() []*Lookup {
	if x != nil {
		return x.Supervisor
	}
	return nil
}

func (x *ActiveCall) GetBlindTransfer() string {
	if x != nil {
		return x.BlindTransfer
	}
	return ""
}

func (x *ActiveCall) GetBridgedId() string {
	if x != nil {
		return x.BridgedId
	}
	return ""
}

type ListCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next  bool          `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items []*ActiveCall `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListCall) Reset() {
	*x = ListCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCall) ProtoMessage() {}

func (x *ListCall) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCall.ProtoReflect.Descriptor instead.
func (*ListCall) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{34}
}

func (x *ListCall) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListCall) GetItems() []*ActiveCall {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From        *CreateCallRequest_EndpointRequest `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To          *CreateCallRequest_EndpointRequest `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Destination string                             `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	Params      *CreateCallRequest_CallSettings    `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
	DomainId    int64                              `protobuf:"varint,5,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *CreateCallRequest) Reset() {
	*x = CreateCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCallRequest) ProtoMessage() {}

func (x *CreateCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCallRequest.ProtoReflect.Descriptor instead.
func (*CreateCallRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{35}
}

func (x *CreateCallRequest) GetFrom() *CreateCallRequest_EndpointRequest {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CreateCallRequest) GetTo() *CreateCallRequest_EndpointRequest {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CreateCallRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *CreateCallRequest) GetParams() *CreateCallRequest_CallSettings {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CreateCallRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Number string `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Id     string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{36}
}

func (x *Endpoint) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Endpoint) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Endpoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Endpoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt int64     `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy *Lookup   `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Timestamp int64     `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ParentId  string    `protobuf:"bytes,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	AppId     string    `protobuf:"bytes,6,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	State     string    `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	Direction string    `protobuf:"bytes,8,opt,name=direction,proto3" json:"direction,omitempty"`
	From      *Endpoint `protobuf:"bytes,9,opt,name=from,proto3" json:"from,omitempty"`
	To        *Endpoint `protobuf:"bytes,10,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *Call) Reset() {
	*x = Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call) ProtoMessage() {}

func (x *Call) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call.ProtoReflect.Descriptor instead.
func (*Call) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{37}
}

func (x *Call) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Call) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Call) GetCreatedBy() *Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Call) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Call) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *Call) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Call) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Call) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *Call) GetFrom() *Endpoint {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Call) GetTo() *Endpoint {
	if x != nil {
		return x.To
	}
	return nil
}

type AggregateRequest_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Interval  string `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	Aggregate string `protobuf:"bytes,3,opt,name=aggregate,proto3" json:"aggregate,omitempty"`
	Field     string `protobuf:"bytes,4,opt,name=field,proto3" json:"field,omitempty"`
	Top       int32  `protobuf:"varint,5,opt,name=top,proto3" json:"top,omitempty"`
	Desc      bool   `protobuf:"varint,6,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *AggregateRequest_Group) Reset() {
	*x = AggregateRequest_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateRequest_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateRequest_Group) ProtoMessage() {}

func (x *AggregateRequest_Group) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateRequest_Group.ProtoReflect.Descriptor instead.
func (*AggregateRequest_Group) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{7, 0}
}

func (x *AggregateRequest_Group) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AggregateRequest_Group) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *AggregateRequest_Group) GetAggregate() string {
	if x != nil {
		return x.Aggregate
	}
	return ""
}

func (x *AggregateRequest_Group) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *AggregateRequest_Group) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *AggregateRequest_Group) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

type HistoryCall_BlindTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number string  `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	Time   int64   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	User   *Lookup `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *HistoryCall_BlindTransfer) Reset() {
	*x = HistoryCall_BlindTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryCall_BlindTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryCall_BlindTransfer) ProtoMessage() {}

func (x *HistoryCall_BlindTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryCall_BlindTransfer.ProtoReflect.Descriptor instead.
func (*HistoryCall_BlindTransfer) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{20, 0}
}

func (x *HistoryCall_BlindTransfer) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *HistoryCall_BlindTransfer) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *HistoryCall_BlindTransfer) GetUser() *Lookup {
	if x != nil {
		return x.User
	}
	return nil
}

type EavesdropCallRequest_EndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Id        int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Extension string `protobuf:"bytes,4,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EavesdropCallRequest_EndpointRequest) Reset() {
	*x = EavesdropCallRequest_EndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EavesdropCallRequest_EndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EavesdropCallRequest_EndpointRequest) ProtoMessage() {}

func (x *EavesdropCallRequest_EndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EavesdropCallRequest_EndpointRequest.ProtoReflect.Descriptor instead.
func (*EavesdropCallRequest_EndpointRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{21, 0}
}

func (x *EavesdropCallRequest_EndpointRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *EavesdropCallRequest_EndpointRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EavesdropCallRequest_EndpointRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EavesdropCallRequest_EndpointRequest) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type CreateCallRequest_CallSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout           int32             `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Audio             bool              `protobuf:"varint,2,opt,name=audio,proto3" json:"audio,omitempty"`
	Video             bool              `protobuf:"varint,3,opt,name=video,proto3" json:"video,omitempty"`
	Screen            bool              `protobuf:"varint,4,opt,name=screen,proto3" json:"screen,omitempty"`
	Record            bool              `protobuf:"varint,5,opt,name=record,proto3" json:"record,omitempty"`
	Variables         map[string]string `protobuf:"bytes,6,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Display           string            `protobuf:"bytes,8,opt,name=display,proto3" json:"display,omitempty"`
	DisableStun       bool              `protobuf:"varint,9,opt,name=disable_stun,json=disableStun,proto3" json:"disable_stun,omitempty"`
	CancelDistribute  bool              `protobuf:"varint,10,opt,name=cancel_distribute,json=cancelDistribute,proto3" json:"cancel_distribute,omitempty"`
	IsOnline          bool              `protobuf:"varint,11,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	DisableAutoAnswer bool              `protobuf:"varint,12,opt,name=disable_auto_answer,json=disableAutoAnswer,proto3" json:"disable_auto_answer,omitempty"`
	HideNumber        bool              `protobuf:"varint,13,opt,name=hide_number,json=hideNumber,proto3" json:"hide_number,omitempty"`
}

func (x *CreateCallRequest_CallSettings) Reset() {
	*x = CreateCallRequest_CallSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCallRequest_CallSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCallRequest_CallSettings) ProtoMessage() {}

func (x *CreateCallRequest_CallSettings) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCallRequest_CallSettings.ProtoReflect.Descriptor instead.
func (*CreateCallRequest_CallSettings) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{35, 0}
}

func (x *CreateCallRequest_CallSettings) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *CreateCallRequest_CallSettings) GetAudio() bool {
	if x != nil {
		return x.Audio
	}
	return false
}

func (x *CreateCallRequest_CallSettings) GetVideo() bool {
	if x != nil {
		return x.Video
	}
	return false
}

func (x *CreateCallRequest_CallSettings) GetScreen() bool {
	if x != nil {
		return x.Screen
	}
	return false
}

func (x *CreateCallRequest_CallSettings) GetRecord() bool {
	if x != nil {
		return x.Record
	}
	return false
}

func (x *CreateCallRequest_CallSettings) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *CreateCallRequest_CallSettings) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *CreateCallRequest_CallSettings) GetDisableStun() bool {
	if x != nil {
		return x.DisableStun
	}
	return false
}

func (x *CreateCallRequest_CallSettings) GetCancelDistribute() bool {
	if x != nil {
		return x.CancelDistribute
	}
	return false
}

func (x *CreateCallRequest_CallSettings) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *CreateCallRequest_CallSettings) GetDisableAutoAnswer() bool {
	if x != nil {
		return x.DisableAutoAnswer
	}
	return false
}

func (x *CreateCallRequest_CallSettings) GetHideNumber() bool {
	if x != nil {
		return x.HideNumber
	}
	return false
}

type CreateCallRequest_EndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Id        int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Extension string `protobuf:"bytes,4,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CreateCallRequest_EndpointRequest) Reset() {
	*x = CreateCallRequest_EndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_call_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCallRequest_EndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCallRequest_EndpointRequest) ProtoMessage() {}

func (x *CreateCallRequest_EndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_call_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCallRequest_EndpointRequest.ProtoReflect.Descriptor instead.
func (*CreateCallRequest_EndpointRequest) Descriptor() ([]byte, []int) {
	return file_call_proto_rawDescGZIP(), []int{35, 1}
}

func (x *CreateCallRequest_EndpointRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *CreateCallRequest_EndpointRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateCallRequest_EndpointRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateCallRequest_EndpointRequest) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

var File_call_proto protoreflect.FileDescriptor

var file_call_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x1a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2c, 0x0a,
	0x11, 0x52, 0x65, 0x64, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x17,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x4d, 0x69, 0x73, 0x73,
	0x65, 0x64, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xb5, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xec, 0x0d, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x01, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x34, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x61, 0x75, 0x73, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x68, 0x61, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65,
	0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x74, 0x6f, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4d,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x74, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x20, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41,
	0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x6d, 0x64, 0x5f,
	0x61, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x6d, 0x64, 0x41, 0x69, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x04,
	0x74, 0x61, 0x6c, 0x6b, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65,
	0x6e, 0x52, 0x04, 0x74, 0x61, 0x6c, 0x6b, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x28, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x6e, 0x52, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65,
	0x6e, 0x52, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x2b,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x68,
	0x61, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x68,
	0x61, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xf4, 0x02, 0x0a, 0x10, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x8d, 0x01, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x74, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xef, 0x09, 0x0a, 0x1b, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x2c, 0x0a,
	0x04, 0x61, 0x67, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x61, 0x67, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x6b, 0x69, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x68, 0x61, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x68, 0x61, 0x73, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65,
	0x65, 0x6e, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x19,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x74,
	0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0e,
	0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x68, 0x61, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x2b, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x1a, 0x3c, 0x0a, 0x0e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x0f, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3e, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x50, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e,
	0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x93,
	0x01, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x6f, 0x70, 0x41, 0x74, 0x22, 0x46, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x6f, 0x6c, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x65, 0x63, 0x22, 0x9f, 0x02, 0x0a,
	0x0e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x65, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x22, 0x80,
	0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x53, 0x65,
	0x63, 0x22, 0x90, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e,
	0x64, 0x53, 0x65, 0x63, 0x22, 0x46, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x84, 0x03, 0x0a,
	0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x2e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x4a, 0x6f, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x22, 0x3a, 0x0a, 0x14, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x54, 0x54, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x02, 0x22, 0x44, 0x0a,
	0x13, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x03, 0x22, 0x77, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xfe, 0x14, 0x0a,
	0x0b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x40, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x6e,
	0x67, 0x75, 0x70, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x68, 0x61,
	0x6e, 0x67, 0x75, 0x70, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x67, 0x75, 0x70,
	0x5f, 0x62, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x67, 0x75,
	0x70, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63,
	0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62,
	0x69, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69, 0x70, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x69, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x26, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x05, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63,
	0x12, 0x2c, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x68, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12,
	0x2b, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x04, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x68,
	0x61, 0x6e, 0x67, 0x75, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x68, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x44,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6c,
	0x69, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x33, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x31,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x4a, 0x6f, 0x62, 0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x63, 0x12, 0x28, 0x0a,
	0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x6d, 0x64, 0x5f, 0x61,
	0x69, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x6d, 0x64, 0x41, 0x69, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x61,
	0x6d, 0x64, 0x5f, 0x61, 0x69, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x36, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x6d, 0x64, 0x41, 0x69, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x64, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x18, 0x43, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x5f, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x50, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x45, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61,
	0x6c, 0x6c, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x0e, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x5f,
	0x0a, 0x0d, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a,
	0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf5, 0x02,
	0x0a, 0x14, 0x45, 0x61, 0x76, 0x65, 0x73, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x5f, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x41, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x62, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x42, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x41, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x68,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77,
	0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x42, 0x12, 0x40, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x45,
	0x61, 0x76, 0x65, 0x73, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x1a, 0x6a, 0x0a, 0x0f, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x44, 0x74, 0x6d, 0x66, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x0a, 0x0f, 0x44, 0x74, 0x6d,
	0x66, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x67, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x69, 0x67, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x28, 0x0a,
	0x10, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a,
	0x12, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a, 0x11, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x22, 0x3e, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x22, 0x89, 0x06, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65,
	0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6b,
	0x69, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x0a, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12,
	0x32, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x81,
	0x0a, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x3f, 0x0a,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x6f, 0x6c,
	0x64, 0x53, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x62, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x05,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65,
	0x63, 0x12, 0x2c, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x2e,
	0x0a, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x25, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x64, 0x49, 0x64, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x48, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65,
	0x78, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xea, 0x06, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x39, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x1a, 0xef, 0x03, 0x0a, 0x0c,
	0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x53, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x75,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x75, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a,
	0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6a, 0x0a,
	0x0f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x08, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x02, 0x74, 0x6f, 0x32, 0x98, 0x11, 0x0a, 0x0b, 0x43,
	0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x11, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x20, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x10, 0x12, 0x0e, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x6d, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01,
	0x2a, 0x22, 0x0e, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x68, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x32, 0x13, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x77, 0x0a, 0x14, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x23, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x53, 0x0a, 0x08,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x17, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x56, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x3a, 0x01,
	0x2a, 0x22, 0x06, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4e, 0x41, 0x12, 0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x62, 0x0a, 0x0a, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a,
	0x01, 0x2a, 0x2a, 0x12, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x61, 0x0a, 0x08, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x17, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a,
	0x32, 0x17, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x65, 0x0a, 0x0a, 0x55, 0x6e, 0x48,
	0x6f, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x17, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x32, 0x19, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x61, 0x0a, 0x08, 0x44, 0x74, 0x6d, 0x66, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x17, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x74, 0x6d, 0x66, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x44,
	0x74, 0x6d, 0x66, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x32, 0x17, 0x2f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x64,
	0x74, 0x6d, 0x66, 0x12, 0x80, 0x01, 0x0a, 0x11, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x20, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x32, 0x1b, 0x2f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x72, 0x0a, 0x0d, 0x45, 0x61, 0x76, 0x65, 0x73, 0x64,
	0x72, 0x6f, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x45, 0x61, 0x76, 0x65, 0x73, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x65, 0x61, 0x76, 0x65, 0x73, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x6f, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x75, 0x73, 0x68, 0x12, 0x1a, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x32, 0x1f, 0x2f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x12, 0x7e, 0x0a, 0x10, 0x53,
	0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x1f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x32, 0x1c, 0x2f,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x88, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a,
	0x01, 0x2a, 0x1a, 0x28, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2f, 0x7b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x85, 0x01, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x2a, 0x28, 0x2f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6f, 0x0a, 0x0a, 0x52, 0x65, 0x64, 0x69, 0x61, 0x6c, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x69,
	0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72,
	0x65, 0x64, 0x69, 0x61, 0x6c, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_call_proto_rawDescOnce sync.Once
	file_call_proto_rawDescData = file_call_proto_rawDesc
)

func file_call_proto_rawDescGZIP() []byte {
	file_call_proto_rawDescOnce.Do(func() {
		file_call_proto_rawDescData = protoimpl.X.CompressGZIP(file_call_proto_rawDescData)
	})
	return file_call_proto_rawDescData
}

var file_call_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_call_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_call_proto_goTypes = []interface{}{
	(HistoryFileJob_HistoryFileJobAction)(0),     // 0: engine.HistoryFileJob.HistoryFileJobAction
	(HistoryFileJob_HistoryFileJobState)(0),      // 1: engine.HistoryFileJob.HistoryFileJobState
	(*RedialCallRequest)(nil),                    // 2: engine.RedialCallRequest
	(*PatchHistoryCallRequest)(nil),              // 3: engine.PatchHistoryCallRequest
	(*SetVariablesCallRequest)(nil),              // 4: engine.SetVariablesCallRequest
	(*SetVariablesCallResponse)(nil),             // 5: engine.SetVariablesCallResponse
	(*ConfirmPushRequest)(nil),                   // 6: engine.ConfirmPushRequest
	(*ConfirmPushResponse)(nil),                  // 7: engine.ConfirmPushResponse
	(*SearchHistoryCallRequest)(nil),             // 8: engine.SearchHistoryCallRequest
	(*AggregateRequest)(nil),                     // 9: engine.AggregateRequest
	(*AggregateHistoryCallRequest)(nil),          // 10: engine.AggregateHistoryCallRequest
	(*AggregateResult)(nil),                      // 11: engine.AggregateResult
	(*ListAggregate)(nil),                        // 12: engine.ListAggregate
	(*ListHistoryCall)(nil),                      // 13: engine.ListHistoryCall
	(*CallFile)(nil),                             // 14: engine.CallFile
	(*CallHold)(nil),                             // 15: engine.CallHold
	(*CallAnnotation)(nil),                       // 16: engine.CallAnnotation
	(*CreateCallAnnotationRequest)(nil),          // 17: engine.CreateCallAnnotationRequest
	(*UpdateCallAnnotationRequest)(nil),          // 18: engine.UpdateCallAnnotationRequest
	(*DeleteCallAnnotationRequest)(nil),          // 19: engine.DeleteCallAnnotationRequest
	(*HistoryFileJob)(nil),                       // 20: engine.HistoryFileJob
	(*TranscriptLookup)(nil),                     // 21: engine.TranscriptLookup
	(*HistoryCall)(nil),                          // 22: engine.HistoryCall
	(*EavesdropCallRequest)(nil),                 // 23: engine.EavesdropCallRequest
	(*BlindTransferCallRequest)(nil),             // 24: engine.BlindTransferCallRequest
	(*BlindTransferCallResponse)(nil),            // 25: engine.BlindTransferCallResponse
	(*DtmfCallResponse)(nil),                     // 26: engine.DtmfCallResponse
	(*DtmfCallRequest)(nil),                      // 27: engine.DtmfCallRequest
	(*UserCallRequest)(nil),                      // 28: engine.UserCallRequest
	(*HoldCallResponse)(nil),                     // 29: engine.HoldCallResponse
	(*CreateCallResponse)(nil),                   // 30: engine.CreateCallResponse
	(*HangupCallResponse)(nil),                   // 31: engine.HangupCallResponse
	(*HangupCallRequest)(nil),                    // 32: engine.HangupCallRequest
	(*ReadCallRequest)(nil),                      // 33: engine.ReadCallRequest
	(*SearchCallRequest)(nil),                    // 34: engine.SearchCallRequest
	(*ActiveCall)(nil),                           // 35: engine.ActiveCall
	(*ListCall)(nil),                             // 36: engine.ListCall
	(*CreateCallRequest)(nil),                    // 37: engine.CreateCallRequest
	(*Endpoint)(nil),                             // 38: engine.Endpoint
	(*Call)(nil),                                 // 39: engine.Call
	nil,                                          // 40: engine.PatchHistoryCallRequest.VariablesEntry
	nil,                                          // 41: engine.SetVariablesCallRequest.VariablesEntry
	nil,                                          // 42: engine.SearchHistoryCallRequest.VariablesEntry
	(*AggregateRequest_Group)(nil),               // 43: engine.AggregateRequest.Group
	nil,                                          // 44: engine.AggregateHistoryCallRequest.VariablesEntry
	(*HistoryCall_BlindTransfer)(nil),            // 45: engine.HistoryCall.BlindTransfer
	nil,                                          // 46: engine.HistoryCall.VariablesEntry
	(*EavesdropCallRequest_EndpointRequest)(nil), // 47: engine.EavesdropCallRequest.EndpointRequest
	nil,                                    // 48: engine.ActiveCall.VariablesEntry
	(*CreateCallRequest_CallSettings)(nil), // 49: engine.CreateCallRequest.CallSettings
	(*CreateCallRequest_EndpointRequest)(nil), // 50: engine.CreateCallRequest.EndpointRequest
	nil,                          // 51: engine.CreateCallRequest.CallSettings.VariablesEntry
	(*wrapperspb.BoolValue)(nil), // 52: google.protobuf.BoolValue
	(*FilterBetween)(nil),        // 53: engine.FilterBetween
	(*structpb.Value)(nil),       // 54: google.protobuf.Value
	(*Lookup)(nil),               // 55: engine.Lookup
}
var file_call_proto_depIdxs = []int32{
	40, // 0: engine.PatchHistoryCallRequest.variables:type_name -> engine.PatchHistoryCallRequest.VariablesEntry
	52, // 1: engine.PatchHistoryCallRequest.hide_missed:type_name -> google.protobuf.BoolValue
	41, // 2: engine.SetVariablesCallRequest.variables:type_name -> engine.SetVariablesCallRequest.VariablesEntry
	53, // 3: engine.SearchHistoryCallRequest.created_at:type_name -> engine.FilterBetween
	53, // 4: engine.SearchHistoryCallRequest.duration:type_name -> engine.FilterBetween
	52, // 5: engine.SearchHistoryCallRequest.has_file:type_name -> google.protobuf.BoolValue
	53, // 6: engine.SearchHistoryCallRequest.answered_at:type_name -> engine.FilterBetween
	53, // 7: engine.SearchHistoryCallRequest.stored_at:type_name -> engine.FilterBetween
	42, // 8: engine.SearchHistoryCallRequest.variables:type_name -> engine.SearchHistoryCallRequest.VariablesEntry
	52, // 9: engine.SearchHistoryCallRequest.has_transcript:type_name -> google.protobuf.BoolValue
	53, // 10: engine.SearchHistoryCallRequest.talk:type_name -> engine.FilterBetween
	52, // 11: engine.SearchHistoryCallRequest.rated:type_name -> google.protobuf.BoolValue
	53, // 12: engine.SearchHistoryCallRequest.score_required:type_name -> engine.FilterBetween
	53, // 13: engine.SearchHistoryCallRequest.score_optional:type_name -> engine.FilterBetween
	52, // 14: engine.SearchHistoryCallRequest.has_transfer:type_name -> google.protobuf.BoolValue
	52, // 15: engine.SearchHistoryCallRequest.timeline:type_name -> google.protobuf.BoolValue
	43, // 16: engine.AggregateRequest.group:type_name -> engine.AggregateRequest.Group
	9,  // 17: engine.AggregateHistoryCallRequest.aggs:type_name -> engine.AggregateRequest
	53, // 18: engine.AggregateHistoryCallRequest.created_at:type_name -> engine.FilterBetween
	53, // 19: engine.AggregateHistoryCallRequest.duration:type_name -> engine.FilterBetween
	52, // 20: engine.AggregateHistoryCallRequest.has_file:type_name -> google.protobuf.BoolValue
	53, // 21: engine.AggregateHistoryCallRequest.answered_at:type_name -> engine.FilterBetween
	53, // 22: engine.AggregateHistoryCallRequest.stored_at:type_name -> engine.FilterBetween
	44, // 23: engine.AggregateHistoryCallRequest.variables:type_name -> engine.AggregateHistoryCallRequest.VariablesEntry
	52, // 24: engine.AggregateHistoryCallRequest.has_transcript:type_name -> google.protobuf.BoolValue
	54, // 25: engine.AggregateResult.data:type_name -> google.protobuf.Value
	11, // 26: engine.ListAggregate.items:type_name -> engine.AggregateResult
	22, // 27: engine.ListHistoryCall.items:type_name -> engine.HistoryCall
	55, // 28: engine.CallAnnotation.created_by:type_name -> engine.Lookup
	55, // 29: engine.CallAnnotation.updated_by:type_name -> engine.Lookup
	0,  // 30: engine.HistoryFileJob.action:type_name -> engine.HistoryFileJob.HistoryFileJobAction
	1,  // 31: engine.HistoryFileJob.state:type_name -> engine.HistoryFileJob.HistoryFileJobState
	55, // 32: engine.TranscriptLookup.file:type_name -> engine.Lookup
	55, // 33: engine.HistoryCall.user:type_name -> engine.Lookup
	55, // 34: engine.HistoryCall.gateway:type_name -> engine.Lookup
	38, // 35: engine.HistoryCall.from:type_name -> engine.Endpoint
	38, // 36: engine.HistoryCall.to:type_name -> engine.Endpoint
	46, // 37: engine.HistoryCall.variables:type_name -> engine.HistoryCall.VariablesEntry
	14, // 38: engine.HistoryCall.files:type_name -> engine.CallFile
	55, // 39: engine.HistoryCall.queue:type_name -> engine.Lookup
	55, // 40: engine.HistoryCall.member:type_name -> engine.Lookup
	55, // 41: engine.HistoryCall.team:type_name -> engine.Lookup
	55, // 42: engine.HistoryCall.agent:type_name -> engine.Lookup
	15, // 43: engine.HistoryCall.hold:type_name -> engine.CallHold
	16, // 44: engine.HistoryCall.annotations:type_name -> engine.CallAnnotation
	20, // 45: engine.HistoryCall.files_job:type_name -> engine.HistoryFileJob
	21, // 46: engine.HistoryCall.transcripts:type_name -> engine.TranscriptLookup
	55, // 47: engine.HistoryCall.grantee:type_name -> engine.Lookup
	55, // 48: engine.HistoryCall.rated_user:type_name -> engine.Lookup
	55, // 49: engine.HistoryCall.rated_by:type_name -> engine.Lookup
	54, // 50: engine.HistoryCall.form_fields:type_name -> google.protobuf.Value
	55, // 51: engine.HistoryCall.contact:type_name -> engine.Lookup
	55, // 52: engine.HistoryCall.schemas:type_name -> engine.Lookup
	45, // 53: engine.HistoryCall.blind_transfers:type_name -> engine.HistoryCall.BlindTransfer
	47, // 54: engine.EavesdropCallRequest.from:type_name -> engine.EavesdropCallRequest.EndpointRequest
	53, // 55: engine.SearchCallRequest.created_at:type_name -> engine.FilterBetween
	53, // 56: engine.SearchCallRequest.duration:type_name -> engine.FilterBetween
	53, // 57: engine.SearchCallRequest.answered_at:type_name -> engine.FilterBetween
	53, // 58: engine.SearchCallRequest.stored_at:type_name -> engine.FilterBetween
	55, // 59: engine.ActiveCall.user:type_name -> engine.Lookup
	55, // 60: engine.ActiveCall.gateway:type_name -> engine.Lookup
	38, // 61: engine.ActiveCall.from:type_name -> engine.Endpoint
	38, // 62: engine.ActiveCall.to:type_name -> engine.Endpoint
	48, // 63: engine.ActiveCall.variables:type_name -> engine.ActiveCall.VariablesEntry
	55, // 64: engine.ActiveCall.queue:type_name -> engine.Lookup
	55, // 65: engine.ActiveCall.member:type_name -> engine.Lookup
	55, // 66: engine.ActiveCall.team:type_name -> engine.Lookup
	55, // 67: engine.ActiveCall.agent:type_name -> engine.Lookup
	55, // 68: engine.ActiveCall.supervisor:type_name -> engine.Lookup
	35, // 69: engine.ListCall.items:type_name -> engine.ActiveCall
	50, // 70: engine.CreateCallRequest.from:type_name -> engine.CreateCallRequest.EndpointRequest
	50, // 71: engine.CreateCallRequest.to:type_name -> engine.CreateCallRequest.EndpointRequest
	49, // 72: engine.CreateCallRequest.params:type_name -> engine.CreateCallRequest.CallSettings
	55, // 73: engine.Call.created_by:type_name -> engine.Lookup
	38, // 74: engine.Call.from:type_name -> engine.Endpoint
	38, // 75: engine.Call.to:type_name -> engine.Endpoint
	55, // 76: engine.HistoryCall.BlindTransfer.user:type_name -> engine.Lookup
	51, // 77: engine.CreateCallRequest.CallSettings.variables:type_name -> engine.CreateCallRequest.CallSettings.VariablesEntry
	8,  // 78: engine.CallService.SearchHistoryCall:input_type -> engine.SearchHistoryCallRequest
	8,  // 79: engine.CallService.SearchHistoryCallPost:input_type -> engine.SearchHistoryCallRequest
	3,  // 80: engine.CallService.PatchHistoryCall:input_type -> engine.PatchHistoryCallRequest
	10, // 81: engine.CallService.AggregateHistoryCall:input_type -> engine.AggregateHistoryCallRequest
	34, // 82: engine.CallService.SearchActiveCall:input_type -> engine.SearchCallRequest
	33, // 83: engine.CallService.ReadCall:input_type -> engine.ReadCallRequest
	37, // 84: engine.CallService.CreateCall:input_type -> engine.CreateCallRequest
	37, // 85: engine.CallService.CreateCallNA:input_type -> engine.CreateCallRequest
	32, // 86: engine.CallService.HangupCall:input_type -> engine.HangupCallRequest
	28, // 87: engine.CallService.HoldCall:input_type -> engine.UserCallRequest
	28, // 88: engine.CallService.UnHoldCall:input_type -> engine.UserCallRequest
	27, // 89: engine.CallService.DtmfCall:input_type -> engine.DtmfCallRequest
	24, // 90: engine.CallService.BlindTransferCall:input_type -> engine.BlindTransferCallRequest
	23, // 91: engine.CallService.EavesdropCall:input_type -> engine.EavesdropCallRequest
	6,  // 92: engine.CallService.ConfirmPush:input_type -> engine.ConfirmPushRequest
	4,  // 93: engine.CallService.SetVariablesCall:input_type -> engine.SetVariablesCallRequest
	17, // 94: engine.CallService.CreateCallAnnotation:input_type -> engine.CreateCallAnnotationRequest
	18, // 95: engine.CallService.UpdateCallAnnotation:input_type -> engine.UpdateCallAnnotationRequest
	19, // 96: engine.CallService.DeleteCallAnnotation:input_type -> engine.DeleteCallAnnotationRequest
	2,  // 97: engine.CallService.RedialCall:input_type -> engine.RedialCallRequest
	13, // 98: engine.CallService.SearchHistoryCall:output_type -> engine.ListHistoryCall
	13, // 99: engine.CallService.SearchHistoryCallPost:output_type -> engine.ListHistoryCall
	22, // 100: engine.CallService.PatchHistoryCall:output_type -> engine.HistoryCall
	12, // 101: engine.CallService.AggregateHistoryCall:output_type -> engine.ListAggregate
	36, // 102: engine.CallService.SearchActiveCall:output_type -> engine.ListCall
	35, // 103: engine.CallService.ReadCall:output_type -> engine.ActiveCall
	30, // 104: engine.CallService.CreateCall:output_type -> engine.CreateCallResponse
	30, // 105: engine.CallService.CreateCallNA:output_type -> engine.CreateCallResponse
	31, // 106: engine.CallService.HangupCall:output_type -> engine.HangupCallResponse
	29, // 107: engine.CallService.HoldCall:output_type -> engine.HoldCallResponse
	29, // 108: engine.CallService.UnHoldCall:output_type -> engine.HoldCallResponse
	26, // 109: engine.CallService.DtmfCall:output_type -> engine.DtmfCallResponse
	25, // 110: engine.CallService.BlindTransferCall:output_type -> engine.BlindTransferCallResponse
	30, // 111: engine.CallService.EavesdropCall:output_type -> engine.CreateCallResponse
	7,  // 112: engine.CallService.ConfirmPush:output_type -> engine.ConfirmPushResponse
	5,  // 113: engine.CallService.SetVariablesCall:output_type -> engine.SetVariablesCallResponse
	16, // 114: engine.CallService.CreateCallAnnotation:output_type -> engine.CallAnnotation
	16, // 115: engine.CallService.UpdateCallAnnotation:output_type -> engine.CallAnnotation
	16, // 116: engine.CallService.DeleteCallAnnotation:output_type -> engine.CallAnnotation
	30, // 117: engine.CallService.RedialCall:output_type -> engine.CreateCallResponse
	98, // [98:118] is the sub-list for method output_type
	78, // [78:98] is the sub-list for method input_type
	78, // [78:78] is the sub-list for extension type_name
	78, // [78:78] is the sub-list for extension extendee
	0,  // [0:78] is the sub-list for field type_name
}

func init() { file_call_proto_init() }
func file_call_proto_init() {
	if File_call_proto != nil {
		return
	}
	file_const_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_call_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedialCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchHistoryCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVariablesCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVariablesCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmPushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmPushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchHistoryCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateHistoryCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHistoryCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCallAnnotationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCallAnnotationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCallAnnotationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryFileJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EavesdropCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlindTransferCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlindTransferCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DtmfCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DtmfCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HangupCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HangupCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateRequest_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryCall_BlindTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EavesdropCallRequest_EndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCallRequest_CallSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_call_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCallRequest_EndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_call_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_call_proto_goTypes,
		DependencyIndexes: file_call_proto_depIdxs,
		EnumInfos:         file_call_proto_enumTypes,
		MessageInfos:      file_call_proto_msgTypes,
	}.Build()
	File_call_proto = out.File
	file_call_proto_rawDesc = nil
	file_call_proto_goTypes = nil
	file_call_proto_depIdxs = nil
}
