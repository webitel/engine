// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: queue.proto

package engine

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchQueueReportGeneralRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32          `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size     int32          `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	JoinedAt *FilterBetween `protobuf:"bytes,3,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	DomainId int64          `protobuf:"varint,4,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Fields   []string       `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	Sort     string         `protobuf:"bytes,6,opt,name=sort,proto3" json:"sort,omitempty"`
	Q        string         `protobuf:"bytes,7,opt,name=q,proto3" json:"q,omitempty"`
	QueueId  []int32        `protobuf:"varint,8,rep,packed,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	TeamId   []int32        `protobuf:"varint,9,rep,packed,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Type     []int32        `protobuf:"varint,10,rep,packed,name=type,proto3" json:"type,omitempty"`
}

func (x *SearchQueueReportGeneralRequest) Reset() {
	*x = SearchQueueReportGeneralRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQueueReportGeneralRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQueueReportGeneralRequest) ProtoMessage() {}

func (x *SearchQueueReportGeneralRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQueueReportGeneralRequest.ProtoReflect.Descriptor instead.
func (*SearchQueueReportGeneralRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{0}
}

func (x *SearchQueueReportGeneralRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchQueueReportGeneralRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchQueueReportGeneralRequest) GetJoinedAt() *FilterBetween {
	if x != nil {
		return x.JoinedAt
	}
	return nil
}

func (x *SearchQueueReportGeneralRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *SearchQueueReportGeneralRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchQueueReportGeneralRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchQueueReportGeneralRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchQueueReportGeneralRequest) GetQueueId() []int32 {
	if x != nil {
		return x.QueueId
	}
	return nil
}

func (x *SearchQueueReportGeneralRequest) GetTeamId() []int32 {
	if x != nil {
		return x.TeamId
	}
	return nil
}

func (x *SearchQueueReportGeneralRequest) GetType() []int32 {
	if x != nil {
		return x.Type
	}
	return nil
}

type ListReportGeneral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next  bool                           `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items []*QueueReportGeneral          `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	Aggs  *QueueReportGeneralAgentStatus `protobuf:"bytes,3,opt,name=aggs,proto3" json:"aggs,omitempty"`
}

func (x *ListReportGeneral) Reset() {
	*x = ListReportGeneral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportGeneral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportGeneral) ProtoMessage() {}

func (x *ListReportGeneral) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportGeneral.ProtoReflect.Descriptor instead.
func (*ListReportGeneral) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{1}
}

func (x *ListReportGeneral) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListReportGeneral) GetItems() []*QueueReportGeneral {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListReportGeneral) GetAggs() *QueueReportGeneralAgentStatus {
	if x != nil {
		return x.Aggs
	}
	return nil
}

type QueueReportGeneralAgentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online  uint32 `protobuf:"varint,1,opt,name=online,proto3" json:"online,omitempty"`
	Pause   uint32 `protobuf:"varint,2,opt,name=pause,proto3" json:"pause,omitempty"`
	Offline uint32 `protobuf:"varint,3,opt,name=offline,proto3" json:"offline,omitempty"`
	Free    uint32 `protobuf:"varint,4,opt,name=free,proto3" json:"free,omitempty"`
	Total   uint32 `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *QueueReportGeneralAgentStatus) Reset() {
	*x = QueueReportGeneralAgentStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueReportGeneralAgentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueReportGeneralAgentStatus) ProtoMessage() {}

func (x *QueueReportGeneralAgentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueReportGeneralAgentStatus.ProtoReflect.Descriptor instead.
func (*QueueReportGeneralAgentStatus) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{2}
}

func (x *QueueReportGeneralAgentStatus) GetOnline() uint32 {
	if x != nil {
		return x.Online
	}
	return 0
}

func (x *QueueReportGeneralAgentStatus) GetPause() uint32 {
	if x != nil {
		return x.Pause
	}
	return 0
}

func (x *QueueReportGeneralAgentStatus) GetOffline() uint32 {
	if x != nil {
		return x.Offline
	}
	return 0
}

func (x *QueueReportGeneralAgentStatus) GetFree() uint32 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *QueueReportGeneralAgentStatus) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueueReportGeneral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue       *Lookup                        `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	AgentStatus *QueueReportGeneralAgentStatus `protobuf:"bytes,2,opt,name=agent_status,json=agentStatus,proto3" json:"agent_status,omitempty"`
	Team        *Lookup                        `protobuf:"bytes,3,opt,name=team,proto3" json:"team,omitempty"`
	Missed      uint32                         `protobuf:"varint,4,opt,name=missed,proto3" json:"missed,omitempty"`
	Processed   uint32                         `protobuf:"varint,5,opt,name=processed,proto3" json:"processed,omitempty"`
	Waiting     uint32                         `protobuf:"varint,6,opt,name=waiting,proto3" json:"waiting,omitempty"`
	Count       uint64                         `protobuf:"varint,11,opt,name=count,proto3" json:"count,omitempty"`
	Transferred uint32                         `protobuf:"varint,12,opt,name=transferred,proto3" json:"transferred,omitempty"`
	Abandoned   uint32                         `protobuf:"varint,13,opt,name=abandoned,proto3" json:"abandoned,omitempty"`
	Attempts    uint32                         `protobuf:"varint,14,opt,name=attempts,proto3" json:"attempts,omitempty"`
	SumBillSec  float32                        `protobuf:"fixed32,15,opt,name=sum_bill_sec,json=sumBillSec,proto3" json:"sum_bill_sec,omitempty"`
	AvgWrapSec  float32                        `protobuf:"fixed32,16,opt,name=avg_wrap_sec,json=avgWrapSec,proto3" json:"avg_wrap_sec,omitempty"`
	AvgAwtSec   float32                        `protobuf:"fixed32,17,opt,name=avg_awt_sec,json=avgAwtSec,proto3" json:"avg_awt_sec,omitempty"`
	AvgAsaSec   float32                        `protobuf:"fixed32,18,opt,name=avg_asa_sec,json=avgAsaSec,proto3" json:"avg_asa_sec,omitempty"`
	AvgAhtSec   float32                        `protobuf:"fixed32,19,opt,name=avg_aht_sec,json=avgAhtSec,proto3" json:"avg_aht_sec,omitempty"`
	Bridged     float32                        `protobuf:"fixed32,20,opt,name=bridged,proto3" json:"bridged,omitempty"`
	Sl20        float32                        `protobuf:"fixed32,21,opt,name=sl20,proto3" json:"sl20,omitempty"`
	Sl30        float32                        `protobuf:"fixed32,22,opt,name=sl30,proto3" json:"sl30,omitempty"`
}

func (x *QueueReportGeneral) Reset() {
	*x = QueueReportGeneral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueReportGeneral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueReportGeneral) ProtoMessage() {}

func (x *QueueReportGeneral) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueReportGeneral.ProtoReflect.Descriptor instead.
func (*QueueReportGeneral) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{3}
}

func (x *QueueReportGeneral) GetQueue() *Lookup {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *QueueReportGeneral) GetAgentStatus() *QueueReportGeneralAgentStatus {
	if x != nil {
		return x.AgentStatus
	}
	return nil
}

func (x *QueueReportGeneral) GetTeam() *Lookup {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *QueueReportGeneral) GetMissed() uint32 {
	if x != nil {
		return x.Missed
	}
	return 0
}

func (x *QueueReportGeneral) GetProcessed() uint32 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *QueueReportGeneral) GetWaiting() uint32 {
	if x != nil {
		return x.Waiting
	}
	return 0
}

func (x *QueueReportGeneral) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *QueueReportGeneral) GetTransferred() uint32 {
	if x != nil {
		return x.Transferred
	}
	return 0
}

func (x *QueueReportGeneral) GetAbandoned() uint32 {
	if x != nil {
		return x.Abandoned
	}
	return 0
}

func (x *QueueReportGeneral) GetAttempts() uint32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *QueueReportGeneral) GetSumBillSec() float32 {
	if x != nil {
		return x.SumBillSec
	}
	return 0
}

func (x *QueueReportGeneral) GetAvgWrapSec() float32 {
	if x != nil {
		return x.AvgWrapSec
	}
	return 0
}

func (x *QueueReportGeneral) GetAvgAwtSec() float32 {
	if x != nil {
		return x.AvgAwtSec
	}
	return 0
}

func (x *QueueReportGeneral) GetAvgAsaSec() float32 {
	if x != nil {
		return x.AvgAsaSec
	}
	return 0
}

func (x *QueueReportGeneral) GetAvgAhtSec() float32 {
	if x != nil {
		return x.AvgAhtSec
	}
	return 0
}

func (x *QueueReportGeneral) GetBridged() float32 {
	if x != nil {
		return x.Bridged
	}
	return 0
}

func (x *QueueReportGeneral) GetSl20() float32 {
	if x != nil {
		return x.Sl20
	}
	return 0
}

func (x *QueueReportGeneral) GetSl30() float32 {
	if x != nil {
		return x.Sl30
	}
	return 0
}

type PatchQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Strategy             string            `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Enabled              bool              `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Payload              *structpb.Value   `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	Calendar             *Lookup           `protobuf:"bytes,5,opt,name=calendar,proto3" json:"calendar,omitempty"`
	Priority             int32             `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	Name                 string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Variables            map[string]string `protobuf:"bytes,8,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timeout              int32             `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
	DncList              *Lookup           `protobuf:"bytes,10,opt,name=dnc_list,json=dncList,proto3" json:"dnc_list,omitempty"`
	SecLocateAgent       int32             `protobuf:"varint,11,opt,name=sec_locate_agent,json=secLocateAgent,proto3" json:"sec_locate_agent,omitempty"`
	Type                 int32             `protobuf:"varint,12,opt,name=type,proto3" json:"type,omitempty"`
	Team                 *Lookup           `protobuf:"bytes,13,opt,name=team,proto3" json:"team,omitempty"`
	Description          string            `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	Schema               *Lookup           `protobuf:"bytes,15,opt,name=schema,proto3" json:"schema,omitempty"`
	Ringtone             *Lookup           `protobuf:"bytes,16,opt,name=ringtone,proto3" json:"ringtone,omitempty"`
	Fields               []string          `protobuf:"bytes,17,rep,name=fields,proto3" json:"fields,omitempty"`
	DomainId             int64             `protobuf:"varint,18,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	DoSchema             *Lookup           `protobuf:"bytes,19,opt,name=do_schema,json=doSchema,proto3" json:"do_schema,omitempty"`
	AfterSchema          *Lookup           `protobuf:"bytes,20,opt,name=after_schema,json=afterSchema,proto3" json:"after_schema,omitempty"`
	StickyAgent          bool              `protobuf:"varint,21,opt,name=sticky_agent,json=stickyAgent,proto3" json:"sticky_agent,omitempty"`
	Processing           bool              `protobuf:"varint,22,opt,name=processing,proto3" json:"processing,omitempty"`                                                   // deprecated
	ProcessingSec        uint32            `protobuf:"varint,23,opt,name=processing_sec,json=processingSec,proto3" json:"processing_sec,omitempty"`                        // deprecated
	ProcessingRenewalSec uint32            `protobuf:"varint,24,opt,name=processing_renewal_sec,json=processingRenewalSec,proto3" json:"processing_renewal_sec,omitempty"` // deprecated
	FormSchema           *Lookup           `protobuf:"bytes,25,opt,name=form_schema,json=formSchema,proto3" json:"form_schema,omitempty"`                                  // deprecated
	TaskProcessing       *TaskProcessing   `protobuf:"bytes,26,opt,name=task_processing,json=taskProcessing,proto3" json:"task_processing,omitempty"`
	Grantee              *Lookup           `protobuf:"bytes,27,opt,name=grantee,proto3" json:"grantee,omitempty"`
	Tags                 []*Tag            `protobuf:"bytes,28,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *PatchQueueRequest) Reset() {
	*x = PatchQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchQueueRequest) ProtoMessage() {}

func (x *PatchQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchQueueRequest.ProtoReflect.Descriptor instead.
func (*PatchQueueRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{4}
}

func (x *PatchQueueRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PatchQueueRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *PatchQueueRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PatchQueueRequest) GetPayload() *structpb.Value {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PatchQueueRequest) GetCalendar() *Lookup {
	if x != nil {
		return x.Calendar
	}
	return nil
}

func (x *PatchQueueRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *PatchQueueRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchQueueRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *PatchQueueRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *PatchQueueRequest) GetDncList() *Lookup {
	if x != nil {
		return x.DncList
	}
	return nil
}

func (x *PatchQueueRequest) GetSecLocateAgent() int32 {
	if x != nil {
		return x.SecLocateAgent
	}
	return 0
}

func (x *PatchQueueRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PatchQueueRequest) GetTeam() *Lookup {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *PatchQueueRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PatchQueueRequest) GetSchema() *Lookup {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *PatchQueueRequest) GetRingtone() *Lookup {
	if x != nil {
		return x.Ringtone
	}
	return nil
}

func (x *PatchQueueRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PatchQueueRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *PatchQueueRequest) GetDoSchema() *Lookup {
	if x != nil {
		return x.DoSchema
	}
	return nil
}

func (x *PatchQueueRequest) GetAfterSchema() *Lookup {
	if x != nil {
		return x.AfterSchema
	}
	return nil
}

func (x *PatchQueueRequest) GetStickyAgent() bool {
	if x != nil {
		return x.StickyAgent
	}
	return false
}

func (x *PatchQueueRequest) GetProcessing() bool {
	if x != nil {
		return x.Processing
	}
	return false
}

func (x *PatchQueueRequest) GetProcessingSec() uint32 {
	if x != nil {
		return x.ProcessingSec
	}
	return 0
}

func (x *PatchQueueRequest) GetProcessingRenewalSec() uint32 {
	if x != nil {
		return x.ProcessingRenewalSec
	}
	return 0
}

func (x *PatchQueueRequest) GetFormSchema() *Lookup {
	if x != nil {
		return x.FormSchema
	}
	return nil
}

func (x *PatchQueueRequest) GetTaskProcessing() *TaskProcessing {
	if x != nil {
		return x.TaskProcessing
	}
	return nil
}

func (x *PatchQueueRequest) GetGrantee() *Lookup {
	if x != nil {
		return x.Grantee
	}
	return nil
}

func (x *PatchQueueRequest) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type DeleteQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DomainId int64 `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *DeleteQueueRequest) Reset() {
	*x = DeleteQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQueueRequest) ProtoMessage() {}

func (x *DeleteQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQueueRequest.ProtoReflect.Descriptor instead.
func (*DeleteQueueRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteQueueRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteQueueRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

type UpdateQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Strategy             string            `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Enabled              bool              `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Payload              *structpb.Value   `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	Calendar             *Lookup           `protobuf:"bytes,5,opt,name=calendar,proto3" json:"calendar,omitempty"`
	Priority             int32             `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	Name                 string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Variables            map[string]string `protobuf:"bytes,8,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timeout              int32             `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
	DncList              *Lookup           `protobuf:"bytes,10,opt,name=dnc_list,json=dncList,proto3" json:"dnc_list,omitempty"`
	SecLocateAgent       int32             `protobuf:"varint,11,opt,name=sec_locate_agent,json=secLocateAgent,proto3" json:"sec_locate_agent,omitempty"`
	Type                 int32             `protobuf:"varint,12,opt,name=type,proto3" json:"type,omitempty"`
	Team                 *Lookup           `protobuf:"bytes,13,opt,name=team,proto3" json:"team,omitempty"`
	Description          string            `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	Schema               *Lookup           `protobuf:"bytes,15,opt,name=schema,proto3" json:"schema,omitempty"`
	Ringtone             *Lookup           `protobuf:"bytes,16,opt,name=ringtone,proto3" json:"ringtone,omitempty"`
	DomainId             int64             `protobuf:"varint,17,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	DoSchema             *Lookup           `protobuf:"bytes,18,opt,name=do_schema,json=doSchema,proto3" json:"do_schema,omitempty"`
	AfterSchema          *Lookup           `protobuf:"bytes,19,opt,name=after_schema,json=afterSchema,proto3" json:"after_schema,omitempty"`
	StickyAgent          bool              `protobuf:"varint,20,opt,name=sticky_agent,json=stickyAgent,proto3" json:"sticky_agent,omitempty"`
	Processing           bool              `protobuf:"varint,21,opt,name=processing,proto3" json:"processing,omitempty"`                                                   // deprecated
	ProcessingSec        uint32            `protobuf:"varint,22,opt,name=processing_sec,json=processingSec,proto3" json:"processing_sec,omitempty"`                        // deprecated
	ProcessingRenewalSec uint32            `protobuf:"varint,23,opt,name=processing_renewal_sec,json=processingRenewalSec,proto3" json:"processing_renewal_sec,omitempty"` // deprecated
	FormSchema           *Lookup           `protobuf:"bytes,24,opt,name=form_schema,json=formSchema,proto3" json:"form_schema,omitempty"`                                  // deprecated
	TaskProcessing       *TaskProcessing   `protobuf:"bytes,25,opt,name=task_processing,json=taskProcessing,proto3" json:"task_processing,omitempty"`
	Grantee              *Lookup           `protobuf:"bytes,26,opt,name=grantee,proto3" json:"grantee,omitempty"`
	Tags                 []*Tag            `protobuf:"bytes,27,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *UpdateQueueRequest) Reset() {
	*x = UpdateQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQueueRequest) ProtoMessage() {}

func (x *UpdateQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQueueRequest.ProtoReflect.Descriptor instead.
func (*UpdateQueueRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateQueueRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateQueueRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *UpdateQueueRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *UpdateQueueRequest) GetPayload() *structpb.Value {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *UpdateQueueRequest) GetCalendar() *Lookup {
	if x != nil {
		return x.Calendar
	}
	return nil
}

func (x *UpdateQueueRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *UpdateQueueRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateQueueRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *UpdateQueueRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *UpdateQueueRequest) GetDncList() *Lookup {
	if x != nil {
		return x.DncList
	}
	return nil
}

func (x *UpdateQueueRequest) GetSecLocateAgent() int32 {
	if x != nil {
		return x.SecLocateAgent
	}
	return 0
}

func (x *UpdateQueueRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UpdateQueueRequest) GetTeam() *Lookup {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *UpdateQueueRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateQueueRequest) GetSchema() *Lookup {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *UpdateQueueRequest) GetRingtone() *Lookup {
	if x != nil {
		return x.Ringtone
	}
	return nil
}

func (x *UpdateQueueRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *UpdateQueueRequest) GetDoSchema() *Lookup {
	if x != nil {
		return x.DoSchema
	}
	return nil
}

func (x *UpdateQueueRequest) GetAfterSchema() *Lookup {
	if x != nil {
		return x.AfterSchema
	}
	return nil
}

func (x *UpdateQueueRequest) GetStickyAgent() bool {
	if x != nil {
		return x.StickyAgent
	}
	return false
}

func (x *UpdateQueueRequest) GetProcessing() bool {
	if x != nil {
		return x.Processing
	}
	return false
}

func (x *UpdateQueueRequest) GetProcessingSec() uint32 {
	if x != nil {
		return x.ProcessingSec
	}
	return 0
}

func (x *UpdateQueueRequest) GetProcessingRenewalSec() uint32 {
	if x != nil {
		return x.ProcessingRenewalSec
	}
	return 0
}

func (x *UpdateQueueRequest) GetFormSchema() *Lookup {
	if x != nil {
		return x.FormSchema
	}
	return nil
}

func (x *UpdateQueueRequest) GetTaskProcessing() *TaskProcessing {
	if x != nil {
		return x.TaskProcessing
	}
	return nil
}

func (x *UpdateQueueRequest) GetGrantee() *Lookup {
	if x != nil {
		return x.Grantee
	}
	return nil
}

func (x *UpdateQueueRequest) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ReadQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DomainId int64 `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *ReadQueueRequest) Reset() {
	*x = ReadQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadQueueRequest) ProtoMessage() {}

func (x *ReadQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadQueueRequest.ProtoReflect.Descriptor instead.
func (*ReadQueueRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{7}
}

func (x *ReadQueueRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReadQueueRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

type SearchQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size    int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q       string   `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Sort    string   `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields  []string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	Id      []string `protobuf:"bytes,7,rep,name=id,proto3" json:"id,omitempty"`
	Type    []uint32 `protobuf:"varint,8,rep,packed,name=type,proto3" json:"type,omitempty"`
	TeamId  []int32  `protobuf:"varint,9,rep,packed,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Tags    []string `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	Enabled bool     `protobuf:"varint,11,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SearchQueueRequest) Reset() {
	*x = SearchQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQueueRequest) ProtoMessage() {}

func (x *SearchQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQueueRequest.ProtoReflect.Descriptor instead.
func (*SearchQueueRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{8}
}

func (x *SearchQueueRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchQueueRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchQueueRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchQueueRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchQueueRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchQueueRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchQueueRequest) GetType() []uint32 {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SearchQueueRequest) GetTeamId() []int32 {
	if x != nil {
		return x.TeamId
	}
	return nil
}

func (x *SearchQueueRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SearchQueueRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type TaskProcessing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    bool    `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	FormSchema *Lookup `protobuf:"bytes,2,opt,name=form_schema,json=formSchema,proto3" json:"form_schema,omitempty"`
	Sec        uint32  `protobuf:"varint,3,opt,name=sec,proto3" json:"sec,omitempty"`
	RenewalSec uint32  `protobuf:"varint,4,opt,name=renewal_sec,json=renewalSec,proto3" json:"renewal_sec,omitempty"`
}

func (x *TaskProcessing) Reset() {
	*x = TaskProcessing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskProcessing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProcessing) ProtoMessage() {}

func (x *TaskProcessing) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProcessing.ProtoReflect.Descriptor instead.
func (*TaskProcessing) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{9}
}

func (x *TaskProcessing) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TaskProcessing) GetFormSchema() *Lookup {
	if x != nil {
		return x.FormSchema
	}
	return nil
}

func (x *TaskProcessing) GetSec() uint32 {
	if x != nil {
		return x.Sec
	}
	return 0
}

func (x *TaskProcessing) GetRenewalSec() uint32 {
	if x != nil {
		return x.RenewalSec
	}
	return 0
}

type CreateQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy             string            `protobuf:"bytes,1,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Enabled              bool              `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Payload              *structpb.Value   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Calendar             *Lookup           `protobuf:"bytes,4,opt,name=calendar,proto3" json:"calendar,omitempty"`
	Priority             int32             `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	Name                 string            `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Variables            map[string]string `protobuf:"bytes,7,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timeout              int32             `protobuf:"varint,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	DncList              *Lookup           `protobuf:"bytes,9,opt,name=dnc_list,json=dncList,proto3" json:"dnc_list,omitempty"`
	SecLocateAgent       int32             `protobuf:"varint,10,opt,name=sec_locate_agent,json=secLocateAgent,proto3" json:"sec_locate_agent,omitempty"`
	Type                 int32             `protobuf:"varint,11,opt,name=type,proto3" json:"type,omitempty"`
	Team                 *Lookup           `protobuf:"bytes,12,opt,name=team,proto3" json:"team,omitempty"`
	Description          string            `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	Schema               *Lookup           `protobuf:"bytes,14,opt,name=schema,proto3" json:"schema,omitempty"`
	Ringtone             *Lookup           `protobuf:"bytes,15,opt,name=ringtone,proto3" json:"ringtone,omitempty"`
	DomainId             int64             `protobuf:"varint,16,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	DoSchema             *Lookup           `protobuf:"bytes,17,opt,name=do_schema,json=doSchema,proto3" json:"do_schema,omitempty"`
	AfterSchema          *Lookup           `protobuf:"bytes,18,opt,name=after_schema,json=afterSchema,proto3" json:"after_schema,omitempty"`
	StickyAgent          bool              `protobuf:"varint,19,opt,name=sticky_agent,json=stickyAgent,proto3" json:"sticky_agent,omitempty"`
	Processing           bool              `protobuf:"varint,20,opt,name=processing,proto3" json:"processing,omitempty"`                                                   // deprecated
	ProcessingSec        uint32            `protobuf:"varint,21,opt,name=processing_sec,json=processingSec,proto3" json:"processing_sec,omitempty"`                        // deprecated
	ProcessingRenewalSec uint32            `protobuf:"varint,22,opt,name=processing_renewal_sec,json=processingRenewalSec,proto3" json:"processing_renewal_sec,omitempty"` // deprecated
	FormSchema           *Lookup           `protobuf:"bytes,23,opt,name=form_schema,json=formSchema,proto3" json:"form_schema,omitempty"`                                  // deprecated
	TaskProcessing       *TaskProcessing   `protobuf:"bytes,24,opt,name=task_processing,json=taskProcessing,proto3" json:"task_processing,omitempty"`
	Grantee              *Lookup           `protobuf:"bytes,25,opt,name=grantee,proto3" json:"grantee,omitempty"`
	Tags                 []*Tag            `protobuf:"bytes,26,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CreateQueueRequest) Reset() {
	*x = CreateQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueueRequest) ProtoMessage() {}

func (x *CreateQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueueRequest.ProtoReflect.Descriptor instead.
func (*CreateQueueRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{10}
}

func (x *CreateQueueRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *CreateQueueRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CreateQueueRequest) GetPayload() *structpb.Value {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CreateQueueRequest) GetCalendar() *Lookup {
	if x != nil {
		return x.Calendar
	}
	return nil
}

func (x *CreateQueueRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *CreateQueueRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateQueueRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *CreateQueueRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *CreateQueueRequest) GetDncList() *Lookup {
	if x != nil {
		return x.DncList
	}
	return nil
}

func (x *CreateQueueRequest) GetSecLocateAgent() int32 {
	if x != nil {
		return x.SecLocateAgent
	}
	return 0
}

func (x *CreateQueueRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CreateQueueRequest) GetTeam() *Lookup {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *CreateQueueRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateQueueRequest) GetSchema() *Lookup {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CreateQueueRequest) GetRingtone() *Lookup {
	if x != nil {
		return x.Ringtone
	}
	return nil
}

func (x *CreateQueueRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *CreateQueueRequest) GetDoSchema() *Lookup {
	if x != nil {
		return x.DoSchema
	}
	return nil
}

func (x *CreateQueueRequest) GetAfterSchema() *Lookup {
	if x != nil {
		return x.AfterSchema
	}
	return nil
}

func (x *CreateQueueRequest) GetStickyAgent() bool {
	if x != nil {
		return x.StickyAgent
	}
	return false
}

func (x *CreateQueueRequest) GetProcessing() bool {
	if x != nil {
		return x.Processing
	}
	return false
}

func (x *CreateQueueRequest) GetProcessingSec() uint32 {
	if x != nil {
		return x.ProcessingSec
	}
	return 0
}

func (x *CreateQueueRequest) GetProcessingRenewalSec() uint32 {
	if x != nil {
		return x.ProcessingRenewalSec
	}
	return 0
}

func (x *CreateQueueRequest) GetFormSchema() *Lookup {
	if x != nil {
		return x.FormSchema
	}
	return nil
}

func (x *CreateQueueRequest) GetTaskProcessing() *TaskProcessing {
	if x != nil {
		return x.TaskProcessing
	}
	return nil
}

func (x *CreateQueueRequest) GetGrantee() *Lookup {
	if x != nil {
		return x.Grantee
	}
	return nil
}

func (x *CreateQueueRequest) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Queue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DomainId             int64             `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	CreatedAt            int64             `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy            *Lookup           `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt            int64             `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy            *Lookup           `protobuf:"bytes,6,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Strategy             string            `protobuf:"bytes,7,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Enabled              bool              `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Payload              *structpb.Value   `protobuf:"bytes,9,opt,name=payload,proto3" json:"payload,omitempty"`
	Calendar             *Lookup           `protobuf:"bytes,10,opt,name=calendar,proto3" json:"calendar,omitempty"`
	Priority             int32             `protobuf:"varint,11,opt,name=priority,proto3" json:"priority,omitempty"`
	Name                 string            `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	Variables            map[string]string `protobuf:"bytes,13,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timeout              int32             `protobuf:"varint,14,opt,name=timeout,proto3" json:"timeout,omitempty"`
	DncList              *Lookup           `protobuf:"bytes,15,opt,name=dnc_list,json=dncList,proto3" json:"dnc_list,omitempty"`
	SecLocateAgent       int32             `protobuf:"varint,16,opt,name=sec_locate_agent,json=secLocateAgent,proto3" json:"sec_locate_agent,omitempty"`
	Type                 int32             `protobuf:"varint,17,opt,name=type,proto3" json:"type,omitempty"`
	Description          string            `protobuf:"bytes,18,opt,name=description,proto3" json:"description,omitempty"`
	Team                 *Lookup           `protobuf:"bytes,19,opt,name=team,proto3" json:"team,omitempty"`
	Schema               *Lookup           `protobuf:"bytes,20,opt,name=schema,proto3" json:"schema,omitempty"`
	Count                int32             `protobuf:"varint,21,opt,name=count,proto3" json:"count,omitempty"`
	Waiting              int32             `protobuf:"varint,22,opt,name=waiting,proto3" json:"waiting,omitempty"`
	Active               int32             `protobuf:"varint,23,opt,name=active,proto3" json:"active,omitempty"`
	Ringtone             *Lookup           `protobuf:"bytes,24,opt,name=ringtone,proto3" json:"ringtone,omitempty"`
	DoSchema             *Lookup           `protobuf:"bytes,25,opt,name=do_schema,json=doSchema,proto3" json:"do_schema,omitempty"`
	AfterSchema          *Lookup           `protobuf:"bytes,26,opt,name=after_schema,json=afterSchema,proto3" json:"after_schema,omitempty"`
	StickyAgent          bool              `protobuf:"varint,27,opt,name=sticky_agent,json=stickyAgent,proto3" json:"sticky_agent,omitempty"`
	Processing           bool              `protobuf:"varint,28,opt,name=processing,proto3" json:"processing,omitempty"`                                                   // deprecated
	ProcessingSec        uint32            `protobuf:"varint,29,opt,name=processing_sec,json=processingSec,proto3" json:"processing_sec,omitempty"`                        // deprecated
	ProcessingRenewalSec uint32            `protobuf:"varint,30,opt,name=processing_renewal_sec,json=processingRenewalSec,proto3" json:"processing_renewal_sec,omitempty"` // deprecated
	FormSchema           *Lookup           `protobuf:"bytes,31,opt,name=form_schema,json=formSchema,proto3" json:"form_schema,omitempty"`                                  // deprecated
	TaskProcessing       *TaskProcessing   `protobuf:"bytes,32,opt,name=task_processing,json=taskProcessing,proto3" json:"task_processing,omitempty"`
	Grantee              *Lookup           `protobuf:"bytes,33,opt,name=grantee,proto3" json:"grantee,omitempty"`
	Tags                 []*Tag            `protobuf:"bytes,34,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Queue) Reset() {
	*x = Queue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Queue) ProtoMessage() {}

func (x *Queue) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Queue.ProtoReflect.Descriptor instead.
func (*Queue) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{11}
}

func (x *Queue) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Queue) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *Queue) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Queue) GetCreatedBy() *Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Queue) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Queue) GetUpdatedBy() *Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *Queue) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *Queue) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Queue) GetPayload() *structpb.Value {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Queue) GetCalendar() *Lookup {
	if x != nil {
		return x.Calendar
	}
	return nil
}

func (x *Queue) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Queue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Queue) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *Queue) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Queue) GetDncList() *Lookup {
	if x != nil {
		return x.DncList
	}
	return nil
}

func (x *Queue) GetSecLocateAgent() int32 {
	if x != nil {
		return x.SecLocateAgent
	}
	return 0
}

func (x *Queue) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Queue) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Queue) GetTeam() *Lookup {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *Queue) GetSchema() *Lookup {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Queue) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Queue) GetWaiting() int32 {
	if x != nil {
		return x.Waiting
	}
	return 0
}

func (x *Queue) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *Queue) GetRingtone() *Lookup {
	if x != nil {
		return x.Ringtone
	}
	return nil
}

func (x *Queue) GetDoSchema() *Lookup {
	if x != nil {
		return x.DoSchema
	}
	return nil
}

func (x *Queue) GetAfterSchema() *Lookup {
	if x != nil {
		return x.AfterSchema
	}
	return nil
}

func (x *Queue) GetStickyAgent() bool {
	if x != nil {
		return x.StickyAgent
	}
	return false
}

func (x *Queue) GetProcessing() bool {
	if x != nil {
		return x.Processing
	}
	return false
}

func (x *Queue) GetProcessingSec() uint32 {
	if x != nil {
		return x.ProcessingSec
	}
	return 0
}

func (x *Queue) GetProcessingRenewalSec() uint32 {
	if x != nil {
		return x.ProcessingRenewalSec
	}
	return 0
}

func (x *Queue) GetFormSchema() *Lookup {
	if x != nil {
		return x.FormSchema
	}
	return nil
}

func (x *Queue) GetTaskProcessing() *TaskProcessing {
	if x != nil {
		return x.TaskProcessing
	}
	return nil
}

func (x *Queue) GetGrantee() *Lookup {
	if x != nil {
		return x.Grantee
	}
	return nil
}

func (x *Queue) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ListQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next  bool     `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items []*Queue `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListQueue) Reset() {
	*x = ListQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueue) ProtoMessage() {}

func (x *ListQueue) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueue.ProtoReflect.Descriptor instead.
func (*ListQueue) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{12}
}

func (x *ListQueue) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListQueue) GetItems() []*Queue {
	if x != nil {
		return x.Items
	}
	return nil
}

type SearchQueueTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page   int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size   int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q      string   `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Sort   string   `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields []string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *SearchQueueTagsRequest) Reset() {
	*x = SearchQueueTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQueueTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQueueTagsRequest) ProtoMessage() {}

func (x *SearchQueueTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQueueTagsRequest.ProtoReflect.Descriptor instead.
func (*SearchQueueTagsRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{13}
}

func (x *SearchQueueTagsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchQueueTagsRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchQueueTagsRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchQueueTagsRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchQueueTagsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ListReportGeneral_QueueReportGeneralStatusAggs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online  uint32 `protobuf:"varint,1,opt,name=online,proto3" json:"online,omitempty"`
	Pause   uint32 `protobuf:"varint,2,opt,name=pause,proto3" json:"pause,omitempty"`
	Offline uint32 `protobuf:"varint,3,opt,name=offline,proto3" json:"offline,omitempty"`
	Free    uint32 `protobuf:"varint,4,opt,name=free,proto3" json:"free,omitempty"`
}

func (x *ListReportGeneral_QueueReportGeneralStatusAggs) Reset() {
	*x = ListReportGeneral_QueueReportGeneralStatusAggs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportGeneral_QueueReportGeneralStatusAggs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportGeneral_QueueReportGeneralStatusAggs) ProtoMessage() {}

func (x *ListReportGeneral_QueueReportGeneralStatusAggs) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportGeneral_QueueReportGeneralStatusAggs.ProtoReflect.Descriptor instead.
func (*ListReportGeneral_QueueReportGeneralStatusAggs) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListReportGeneral_QueueReportGeneralStatusAggs) GetOnline() uint32 {
	if x != nil {
		return x.Online
	}
	return 0
}

func (x *ListReportGeneral_QueueReportGeneralStatusAggs) GetPause() uint32 {
	if x != nil {
		return x.Pause
	}
	return 0
}

func (x *ListReportGeneral_QueueReportGeneralStatusAggs) GetOffline() uint32 {
	if x != nil {
		return x.Offline
	}
	return 0
}

func (x *ListReportGeneral_QueueReportGeneralStatusAggs) GetFree() uint32 {
	if x != nil {
		return x.Free
	}
	return 0
}

type ListReportGeneral_Aggs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentStatus *ListReportGeneral_QueueReportGeneralStatusAggs `protobuf:"bytes,1,opt,name=agent_status,json=agentStatus,proto3" json:"agent_status,omitempty"`
}

func (x *ListReportGeneral_Aggs) Reset() {
	*x = ListReportGeneral_Aggs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportGeneral_Aggs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportGeneral_Aggs) ProtoMessage() {}

func (x *ListReportGeneral_Aggs) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportGeneral_Aggs.ProtoReflect.Descriptor instead.
func (*ListReportGeneral_Aggs) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ListReportGeneral_Aggs) GetAgentStatus() *ListReportGeneral_QueueReportGeneralStatusAggs {
	if x != nil {
		return x.AgentStatus
	}
	return nil
}

var File_queue_proto protoreflect.FileDescriptor

var file_queue_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x1a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c,
	0x02, 0x0a, 0x1f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x6a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf3, 0x02,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x61, 0x67, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04,
	0x61, 0x67, 0x67, 0x73, 0x1a, 0x7a, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x41, 0x67, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65,
	0x1a, 0x61, 0x0a, 0x04, 0x41, 0x67, 0x67, 0x73, 0x12, 0x59, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x41, 0x67, 0x67, 0x73, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x72, 0x65,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xd0, 0x04, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x24,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22,
	0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x04, 0x74, 0x65,
	0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x62,
	0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x75, 0x6d, 0x5f, 0x62, 0x69, 0x6c, 0x6c,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x75, 0x6d, 0x42,
	0x69, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x5f, 0x77, 0x72,
	0x61, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x76,
	0x67, 0x57, 0x72, 0x61, 0x70, 0x53, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x5f,
	0x61, 0x77, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x61,
	0x76, 0x67, 0x41, 0x77, 0x74, 0x53, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x5f,
	0x61, 0x73, 0x61, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x61,
	0x76, 0x67, 0x41, 0x73, 0x61, 0x53, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x5f,
	0x61, 0x68, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x61,
	0x76, 0x67, 0x41, 0x68, 0x74, 0x53, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x32, 0x30, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x73, 0x6c, 0x32, 0x30, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x33, 0x30, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x73, 0x6c, 0x33, 0x30, 0x22, 0xfc, 0x08, 0x0a, 0x11, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x64, 0x6e, 0x63, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x64, 0x6e, 0x63, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x63,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2a, 0x0a,
	0x08, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x08, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x09, 0x64, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x08, 0x64, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x31, 0x0a, 0x0c, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x12, 0x2f,
	0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x3f, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x12, 0x28, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x41, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xe6, 0x08, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x64, 0x6e,
	0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x64, 0x6e,
	0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x65, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x2a, 0x0a, 0x08, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x08, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x64, 0x6f,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x64,
	0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x31, 0x0a, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x63, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x0b, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3f, 0x0a, 0x0f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x74, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x07,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x61,
	0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3f, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0a, 0x66, 0x6f,
	0x72, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x6e, 0x65, 0x77, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x22, 0xd6, 0x08, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x64, 0x6e, 0x63,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x64, 0x6e, 0x63,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x73, 0x65, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x2a, 0x0a, 0x08, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x08, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x64, 0x6f, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x64, 0x6f,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x31, 0x0a, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x63, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x0b, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0a,
	0x66, 0x6f, 0x72, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3f, 0x0a, 0x0f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x74, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x07, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x61, 0x67,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xb0, 0x0a, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x2a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x29, 0x0a, 0x08, 0x64, 0x6e, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x07, 0x64, 0x6e, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x65, 0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d,
	0x12, 0x26, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x2a, 0x0a, 0x08, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x08, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x09,
	0x64, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x08, 0x64, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x31, 0x0a, 0x0c, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x0b,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3f, 0x0a,
	0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x0e,
	0x74, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x28,
	0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x7a, 0x0a,
	0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x61, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x32, 0xa8, 0x06, 0x0a, 0x0c, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1a, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22,
	0x13, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x1a, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12,
	0x56, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x18, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5b, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x32, 0x18, 0x2f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5d, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x1a, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x1a, 0x18, 0x2f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x5a, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x1a, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x8b, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x27, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x65, 0x0a,
	0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x1e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x67, 0x73, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f,
	0x74, 0x61, 0x67, 0x73, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_queue_proto_rawDescOnce sync.Once
	file_queue_proto_rawDescData = file_queue_proto_rawDesc
)

func file_queue_proto_rawDescGZIP() []byte {
	file_queue_proto_rawDescOnce.Do(func() {
		file_queue_proto_rawDescData = protoimpl.X.CompressGZIP(file_queue_proto_rawDescData)
	})
	return file_queue_proto_rawDescData
}

var file_queue_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_queue_proto_goTypes = []interface{}{
	(*SearchQueueReportGeneralRequest)(nil),                // 0: engine.SearchQueueReportGeneralRequest
	(*ListReportGeneral)(nil),                              // 1: engine.ListReportGeneral
	(*QueueReportGeneralAgentStatus)(nil),                  // 2: engine.QueueReportGeneralAgentStatus
	(*QueueReportGeneral)(nil),                             // 3: engine.QueueReportGeneral
	(*PatchQueueRequest)(nil),                              // 4: engine.PatchQueueRequest
	(*DeleteQueueRequest)(nil),                             // 5: engine.DeleteQueueRequest
	(*UpdateQueueRequest)(nil),                             // 6: engine.UpdateQueueRequest
	(*ReadQueueRequest)(nil),                               // 7: engine.ReadQueueRequest
	(*SearchQueueRequest)(nil),                             // 8: engine.SearchQueueRequest
	(*TaskProcessing)(nil),                                 // 9: engine.TaskProcessing
	(*CreateQueueRequest)(nil),                             // 10: engine.CreateQueueRequest
	(*Queue)(nil),                                          // 11: engine.Queue
	(*ListQueue)(nil),                                      // 12: engine.ListQueue
	(*SearchQueueTagsRequest)(nil),                         // 13: engine.SearchQueueTagsRequest
	(*ListReportGeneral_QueueReportGeneralStatusAggs)(nil), // 14: engine.ListReportGeneral.QueueReportGeneralStatusAggs
	(*ListReportGeneral_Aggs)(nil),                         // 15: engine.ListReportGeneral.Aggs
	nil,                                                    // 16: engine.PatchQueueRequest.VariablesEntry
	nil,                                                    // 17: engine.UpdateQueueRequest.VariablesEntry
	nil,                                                    // 18: engine.CreateQueueRequest.VariablesEntry
	nil,                                                    // 19: engine.Queue.VariablesEntry
	(*FilterBetween)(nil),                                  // 20: engine.FilterBetween
	(*Lookup)(nil),                                         // 21: engine.Lookup
	(*structpb.Value)(nil),                                 // 22: google.protobuf.Value
	(*Tag)(nil),                                            // 23: engine.Tag
	(*ListTags)(nil),                                       // 24: engine.ListTags
}
var file_queue_proto_depIdxs = []int32{
	20, // 0: engine.SearchQueueReportGeneralRequest.joined_at:type_name -> engine.FilterBetween
	3,  // 1: engine.ListReportGeneral.items:type_name -> engine.QueueReportGeneral
	2,  // 2: engine.ListReportGeneral.aggs:type_name -> engine.QueueReportGeneralAgentStatus
	21, // 3: engine.QueueReportGeneral.queue:type_name -> engine.Lookup
	2,  // 4: engine.QueueReportGeneral.agent_status:type_name -> engine.QueueReportGeneralAgentStatus
	21, // 5: engine.QueueReportGeneral.team:type_name -> engine.Lookup
	22, // 6: engine.PatchQueueRequest.payload:type_name -> google.protobuf.Value
	21, // 7: engine.PatchQueueRequest.calendar:type_name -> engine.Lookup
	16, // 8: engine.PatchQueueRequest.variables:type_name -> engine.PatchQueueRequest.VariablesEntry
	21, // 9: engine.PatchQueueRequest.dnc_list:type_name -> engine.Lookup
	21, // 10: engine.PatchQueueRequest.team:type_name -> engine.Lookup
	21, // 11: engine.PatchQueueRequest.schema:type_name -> engine.Lookup
	21, // 12: engine.PatchQueueRequest.ringtone:type_name -> engine.Lookup
	21, // 13: engine.PatchQueueRequest.do_schema:type_name -> engine.Lookup
	21, // 14: engine.PatchQueueRequest.after_schema:type_name -> engine.Lookup
	21, // 15: engine.PatchQueueRequest.form_schema:type_name -> engine.Lookup
	9,  // 16: engine.PatchQueueRequest.task_processing:type_name -> engine.TaskProcessing
	21, // 17: engine.PatchQueueRequest.grantee:type_name -> engine.Lookup
	23, // 18: engine.PatchQueueRequest.tags:type_name -> engine.Tag
	22, // 19: engine.UpdateQueueRequest.payload:type_name -> google.protobuf.Value
	21, // 20: engine.UpdateQueueRequest.calendar:type_name -> engine.Lookup
	17, // 21: engine.UpdateQueueRequest.variables:type_name -> engine.UpdateQueueRequest.VariablesEntry
	21, // 22: engine.UpdateQueueRequest.dnc_list:type_name -> engine.Lookup
	21, // 23: engine.UpdateQueueRequest.team:type_name -> engine.Lookup
	21, // 24: engine.UpdateQueueRequest.schema:type_name -> engine.Lookup
	21, // 25: engine.UpdateQueueRequest.ringtone:type_name -> engine.Lookup
	21, // 26: engine.UpdateQueueRequest.do_schema:type_name -> engine.Lookup
	21, // 27: engine.UpdateQueueRequest.after_schema:type_name -> engine.Lookup
	21, // 28: engine.UpdateQueueRequest.form_schema:type_name -> engine.Lookup
	9,  // 29: engine.UpdateQueueRequest.task_processing:type_name -> engine.TaskProcessing
	21, // 30: engine.UpdateQueueRequest.grantee:type_name -> engine.Lookup
	23, // 31: engine.UpdateQueueRequest.tags:type_name -> engine.Tag
	21, // 32: engine.TaskProcessing.form_schema:type_name -> engine.Lookup
	22, // 33: engine.CreateQueueRequest.payload:type_name -> google.protobuf.Value
	21, // 34: engine.CreateQueueRequest.calendar:type_name -> engine.Lookup
	18, // 35: engine.CreateQueueRequest.variables:type_name -> engine.CreateQueueRequest.VariablesEntry
	21, // 36: engine.CreateQueueRequest.dnc_list:type_name -> engine.Lookup
	21, // 37: engine.CreateQueueRequest.team:type_name -> engine.Lookup
	21, // 38: engine.CreateQueueRequest.schema:type_name -> engine.Lookup
	21, // 39: engine.CreateQueueRequest.ringtone:type_name -> engine.Lookup
	21, // 40: engine.CreateQueueRequest.do_schema:type_name -> engine.Lookup
	21, // 41: engine.CreateQueueRequest.after_schema:type_name -> engine.Lookup
	21, // 42: engine.CreateQueueRequest.form_schema:type_name -> engine.Lookup
	9,  // 43: engine.CreateQueueRequest.task_processing:type_name -> engine.TaskProcessing
	21, // 44: engine.CreateQueueRequest.grantee:type_name -> engine.Lookup
	23, // 45: engine.CreateQueueRequest.tags:type_name -> engine.Tag
	21, // 46: engine.Queue.created_by:type_name -> engine.Lookup
	21, // 47: engine.Queue.updated_by:type_name -> engine.Lookup
	22, // 48: engine.Queue.payload:type_name -> google.protobuf.Value
	21, // 49: engine.Queue.calendar:type_name -> engine.Lookup
	19, // 50: engine.Queue.variables:type_name -> engine.Queue.VariablesEntry
	21, // 51: engine.Queue.dnc_list:type_name -> engine.Lookup
	21, // 52: engine.Queue.team:type_name -> engine.Lookup
	21, // 53: engine.Queue.schema:type_name -> engine.Lookup
	21, // 54: engine.Queue.ringtone:type_name -> engine.Lookup
	21, // 55: engine.Queue.do_schema:type_name -> engine.Lookup
	21, // 56: engine.Queue.after_schema:type_name -> engine.Lookup
	21, // 57: engine.Queue.form_schema:type_name -> engine.Lookup
	9,  // 58: engine.Queue.task_processing:type_name -> engine.TaskProcessing
	21, // 59: engine.Queue.grantee:type_name -> engine.Lookup
	23, // 60: engine.Queue.tags:type_name -> engine.Tag
	11, // 61: engine.ListQueue.items:type_name -> engine.Queue
	14, // 62: engine.ListReportGeneral.Aggs.agent_status:type_name -> engine.ListReportGeneral.QueueReportGeneralStatusAggs
	10, // 63: engine.QueueService.CreateQueue:input_type -> engine.CreateQueueRequest
	8,  // 64: engine.QueueService.SearchQueue:input_type -> engine.SearchQueueRequest
	7,  // 65: engine.QueueService.ReadQueue:input_type -> engine.ReadQueueRequest
	4,  // 66: engine.QueueService.PatchQueue:input_type -> engine.PatchQueueRequest
	6,  // 67: engine.QueueService.UpdateQueue:input_type -> engine.UpdateQueueRequest
	5,  // 68: engine.QueueService.DeleteQueue:input_type -> engine.DeleteQueueRequest
	0,  // 69: engine.QueueService.SearchQueueReportGeneral:input_type -> engine.SearchQueueReportGeneralRequest
	13, // 70: engine.QueueService.SearchQueueTags:input_type -> engine.SearchQueueTagsRequest
	11, // 71: engine.QueueService.CreateQueue:output_type -> engine.Queue
	12, // 72: engine.QueueService.SearchQueue:output_type -> engine.ListQueue
	11, // 73: engine.QueueService.ReadQueue:output_type -> engine.Queue
	11, // 74: engine.QueueService.PatchQueue:output_type -> engine.Queue
	11, // 75: engine.QueueService.UpdateQueue:output_type -> engine.Queue
	11, // 76: engine.QueueService.DeleteQueue:output_type -> engine.Queue
	1,  // 77: engine.QueueService.SearchQueueReportGeneral:output_type -> engine.ListReportGeneral
	24, // 78: engine.QueueService.SearchQueueTags:output_type -> engine.ListTags
	71, // [71:79] is the sub-list for method output_type
	63, // [63:71] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_queue_proto_init() }
func file_queue_proto_init() {
	if File_queue_proto != nil {
		return
	}
	file_const_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_queue_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQueueReportGeneralRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReportGeneral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueReportGeneralAgentStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueReportGeneral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskProcessing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Queue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQueueTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReportGeneral_QueueReportGeneralStatusAggs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReportGeneral_Aggs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_queue_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_queue_proto_goTypes,
		DependencyIndexes: file_queue_proto_depIdxs,
		MessageInfos:      file_queue_proto_msgTypes,
	}.Build()
	File_queue_proto = out.File
	file_queue_proto_rawDesc = nil
	file_queue_proto_goTypes = nil
	file_queue_proto_depIdxs = nil
}
