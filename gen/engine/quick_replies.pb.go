// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: quick_replies.proto

package engine

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateQuickReplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Text    string    `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Queues  []*Lookup `protobuf:"bytes,3,rep,name=queues,proto3" json:"queues,omitempty"`
	Teams   []*Lookup `protobuf:"bytes,4,rep,name=teams,proto3" json:"teams,omitempty"`
	Article *Lookup   `protobuf:"bytes,5,opt,name=article,proto3" json:"article,omitempty"`
}

func (x *CreateQuickReplyRequest) Reset() {
	*x = CreateQuickReplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_replies_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuickReplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuickReplyRequest) ProtoMessage() {}

func (x *CreateQuickReplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quick_replies_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuickReplyRequest.ProtoReflect.Descriptor instead.
func (*CreateQuickReplyRequest) Descriptor() ([]byte, []int) {
	return file_quick_replies_proto_rawDescGZIP(), []int{0}
}

func (x *CreateQuickReplyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateQuickReplyRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CreateQuickReplyRequest) GetQueues() []*Lookup {
	if x != nil {
		return x.Queues
	}
	return nil
}

func (x *CreateQuickReplyRequest) GetTeams() []*Lookup {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *CreateQuickReplyRequest) GetArticle() *Lookup {
	if x != nil {
		return x.Article
	}
	return nil
}

type QuickReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt int64     `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy *Lookup   `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt int64     `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy *Lookup   `protobuf:"bytes,5,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Name      string    `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Text      string    `protobuf:"bytes,7,opt,name=text,proto3" json:"text,omitempty"`
	Teams     []*Lookup `protobuf:"bytes,8,rep,name=teams,proto3" json:"teams,omitempty"`
	Article   *Lookup   `protobuf:"bytes,9,opt,name=article,proto3" json:"article,omitempty"`
	Queues    []*Lookup `protobuf:"bytes,10,rep,name=queues,proto3" json:"queues,omitempty"`
}

func (x *QuickReply) Reset() {
	*x = QuickReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_replies_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickReply) ProtoMessage() {}

func (x *QuickReply) ProtoReflect() protoreflect.Message {
	mi := &file_quick_replies_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickReply.ProtoReflect.Descriptor instead.
func (*QuickReply) Descriptor() ([]byte, []int) {
	return file_quick_replies_proto_rawDescGZIP(), []int{1}
}

func (x *QuickReply) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuickReply) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *QuickReply) GetCreatedBy() *Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *QuickReply) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *QuickReply) GetUpdatedBy() *Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *QuickReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QuickReply) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *QuickReply) GetTeams() []*Lookup {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *QuickReply) GetArticle() *Lookup {
	if x != nil {
		return x.Article
	}
	return nil
}

func (x *QuickReply) GetQueues() []*Lookup {
	if x != nil {
		return x.Queues
	}
	return nil
}

type SearchQuickRepliesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page   int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size   int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q      string   `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Sort   string   `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields []string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	Id     []uint32 `protobuf:"varint,6,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *SearchQuickRepliesRequest) Reset() {
	*x = SearchQuickRepliesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_replies_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQuickRepliesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuickRepliesRequest) ProtoMessage() {}

func (x *SearchQuickRepliesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quick_replies_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuickRepliesRequest.ProtoReflect.Descriptor instead.
func (*SearchQuickRepliesRequest) Descriptor() ([]byte, []int) {
	return file_quick_replies_proto_rawDescGZIP(), []int{2}
}

func (x *SearchQuickRepliesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchQuickRepliesRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchQuickRepliesRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchQuickRepliesRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchQuickRepliesRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchQuickRepliesRequest) GetId() []uint32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type ListQuickReplies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next  bool          `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items []*QuickReply `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListQuickReplies) Reset() {
	*x = ListQuickReplies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_replies_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuickReplies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuickReplies) ProtoMessage() {}

func (x *ListQuickReplies) ProtoReflect() protoreflect.Message {
	mi := &file_quick_replies_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuickReplies.ProtoReflect.Descriptor instead.
func (*ListQuickReplies) Descriptor() ([]byte, []int) {
	return file_quick_replies_proto_rawDescGZIP(), []int{3}
}

func (x *ListQuickReplies) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListQuickReplies) GetItems() []*QuickReply {
	if x != nil {
		return x.Items
	}
	return nil
}

type ReadQuickReplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReadQuickReplyRequest) Reset() {
	*x = ReadQuickReplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_replies_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadQuickReplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadQuickReplyRequest) ProtoMessage() {}

func (x *ReadQuickReplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quick_replies_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadQuickReplyRequest.ProtoReflect.Descriptor instead.
func (*ReadQuickReplyRequest) Descriptor() ([]byte, []int) {
	return file_quick_replies_proto_rawDescGZIP(), []int{4}
}

func (x *ReadQuickReplyRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PatchQuickReplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Fields  []string  `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	Name    string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Text    string    `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Teams   []*Lookup `protobuf:"bytes,5,rep,name=teams,proto3" json:"teams,omitempty"`
	Article *Lookup   `protobuf:"bytes,6,opt,name=article,proto3" json:"article,omitempty"`
	Queues  []*Lookup `protobuf:"bytes,7,rep,name=queues,proto3" json:"queues,omitempty"`
}

func (x *PatchQuickReplyRequest) Reset() {
	*x = PatchQuickReplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_replies_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchQuickReplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchQuickReplyRequest) ProtoMessage() {}

func (x *PatchQuickReplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quick_replies_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchQuickReplyRequest.ProtoReflect.Descriptor instead.
func (*PatchQuickReplyRequest) Descriptor() ([]byte, []int) {
	return file_quick_replies_proto_rawDescGZIP(), []int{5}
}

func (x *PatchQuickReplyRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PatchQuickReplyRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PatchQuickReplyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchQuickReplyRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *PatchQuickReplyRequest) GetTeams() []*Lookup {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *PatchQuickReplyRequest) GetArticle() *Lookup {
	if x != nil {
		return x.Article
	}
	return nil
}

func (x *PatchQuickReplyRequest) GetQueues() []*Lookup {
	if x != nil {
		return x.Queues
	}
	return nil
}

type UpdateQuickReplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Text    string    `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Teams   []*Lookup `protobuf:"bytes,4,rep,name=teams,proto3" json:"teams,omitempty"`
	Article *Lookup   `protobuf:"bytes,5,opt,name=article,proto3" json:"article,omitempty"`
	Queues  []*Lookup `protobuf:"bytes,6,rep,name=queues,proto3" json:"queues,omitempty"`
}

func (x *UpdateQuickReplyRequest) Reset() {
	*x = UpdateQuickReplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_replies_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuickReplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuickReplyRequest) ProtoMessage() {}

func (x *UpdateQuickReplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quick_replies_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuickReplyRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuickReplyRequest) Descriptor() ([]byte, []int) {
	return file_quick_replies_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateQuickReplyRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateQuickReplyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateQuickReplyRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *UpdateQuickReplyRequest) GetTeams() []*Lookup {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *UpdateQuickReplyRequest) GetArticle() *Lookup {
	if x != nil {
		return x.Article
	}
	return nil
}

func (x *UpdateQuickReplyRequest) GetQueues() []*Lookup {
	if x != nil {
		return x.Queues
	}
	return nil
}

type DeleteQuickReplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteQuickReplyRequest) Reset() {
	*x = DeleteQuickReplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_replies_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQuickReplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuickReplyRequest) ProtoMessage() {}

func (x *DeleteQuickReplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quick_replies_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuickReplyRequest.ProtoReflect.Descriptor instead.
func (*DeleteQuickReplyRequest) Descriptor() ([]byte, []int) {
	return file_quick_replies_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteQuickReplyRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_quick_replies_proto protoreflect.FileDescriptor

var file_quick_replies_proto_rawDesc = []byte{
	0x0a, 0x13, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x06,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x22, 0xd8, 0x02, 0x0a, 0x0a, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x2d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a,
	0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x22,
	0x8d, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x50, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x27, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x64, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x16, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x22, 0xc9, 0x01,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x12, 0x26, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x32, 0xc4, 0x05, 0x0a, 0x13, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a,
	0x22, 0x1a, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71,
	0x75, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x12,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x12, 0x21, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x51, 0x75, 0x69, 0x63, 0x6b,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21,
	0x12, 0x1f, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71,
	0x75, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x71, 0x0a, 0x0f, 0x50, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24,
	0x3a, 0x01, 0x2a, 0x32, 0x1f, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x73, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x1a, 0x1f, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x70, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69,
	0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x22, 0x5a, 0x20, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_quick_replies_proto_rawDescOnce sync.Once
	file_quick_replies_proto_rawDescData = file_quick_replies_proto_rawDesc
)

func file_quick_replies_proto_rawDescGZIP() []byte {
	file_quick_replies_proto_rawDescOnce.Do(func() {
		file_quick_replies_proto_rawDescData = protoimpl.X.CompressGZIP(file_quick_replies_proto_rawDescData)
	})
	return file_quick_replies_proto_rawDescData
}

var file_quick_replies_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_quick_replies_proto_goTypes = []interface{}{
	(*CreateQuickReplyRequest)(nil),   // 0: engine.CreateQuickReplyRequest
	(*QuickReply)(nil),                // 1: engine.QuickReply
	(*SearchQuickRepliesRequest)(nil), // 2: engine.SearchQuickRepliesRequest
	(*ListQuickReplies)(nil),          // 3: engine.ListQuickReplies
	(*ReadQuickReplyRequest)(nil),     // 4: engine.ReadQuickReplyRequest
	(*PatchQuickReplyRequest)(nil),    // 5: engine.PatchQuickReplyRequest
	(*UpdateQuickReplyRequest)(nil),   // 6: engine.UpdateQuickReplyRequest
	(*DeleteQuickReplyRequest)(nil),   // 7: engine.DeleteQuickReplyRequest
	(*Lookup)(nil),                    // 8: engine.Lookup
}
var file_quick_replies_proto_depIdxs = []int32{
	8,  // 0: engine.CreateQuickReplyRequest.queues:type_name -> engine.Lookup
	8,  // 1: engine.CreateQuickReplyRequest.teams:type_name -> engine.Lookup
	8,  // 2: engine.CreateQuickReplyRequest.article:type_name -> engine.Lookup
	8,  // 3: engine.QuickReply.created_by:type_name -> engine.Lookup
	8,  // 4: engine.QuickReply.updated_by:type_name -> engine.Lookup
	8,  // 5: engine.QuickReply.teams:type_name -> engine.Lookup
	8,  // 6: engine.QuickReply.article:type_name -> engine.Lookup
	8,  // 7: engine.QuickReply.queues:type_name -> engine.Lookup
	1,  // 8: engine.ListQuickReplies.items:type_name -> engine.QuickReply
	8,  // 9: engine.PatchQuickReplyRequest.teams:type_name -> engine.Lookup
	8,  // 10: engine.PatchQuickReplyRequest.article:type_name -> engine.Lookup
	8,  // 11: engine.PatchQuickReplyRequest.queues:type_name -> engine.Lookup
	8,  // 12: engine.UpdateQuickReplyRequest.teams:type_name -> engine.Lookup
	8,  // 13: engine.UpdateQuickReplyRequest.article:type_name -> engine.Lookup
	8,  // 14: engine.UpdateQuickReplyRequest.queues:type_name -> engine.Lookup
	0,  // 15: engine.QuickRepliesService.CreateQuickReply:input_type -> engine.CreateQuickReplyRequest
	2,  // 16: engine.QuickRepliesService.SearchQuickReplies:input_type -> engine.SearchQuickRepliesRequest
	4,  // 17: engine.QuickRepliesService.ReadQuickReply:input_type -> engine.ReadQuickReplyRequest
	5,  // 18: engine.QuickRepliesService.PatchQuickReply:input_type -> engine.PatchQuickReplyRequest
	6,  // 19: engine.QuickRepliesService.UpdateQuickReply:input_type -> engine.UpdateQuickReplyRequest
	7,  // 20: engine.QuickRepliesService.DeleteQuickReply:input_type -> engine.DeleteQuickReplyRequest
	1,  // 21: engine.QuickRepliesService.CreateQuickReply:output_type -> engine.QuickReply
	3,  // 22: engine.QuickRepliesService.SearchQuickReplies:output_type -> engine.ListQuickReplies
	1,  // 23: engine.QuickRepliesService.ReadQuickReply:output_type -> engine.QuickReply
	1,  // 24: engine.QuickRepliesService.PatchQuickReply:output_type -> engine.QuickReply
	1,  // 25: engine.QuickRepliesService.UpdateQuickReply:output_type -> engine.QuickReply
	1,  // 26: engine.QuickRepliesService.DeleteQuickReply:output_type -> engine.QuickReply
	21, // [21:27] is the sub-list for method output_type
	15, // [15:21] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_quick_replies_proto_init() }
func file_quick_replies_proto_init() {
	if File_quick_replies_proto != nil {
		return
	}
	file_const_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_quick_replies_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuickReplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_replies_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_replies_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQuickRepliesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_replies_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQuickReplies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_replies_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadQuickReplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_replies_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchQuickReplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_replies_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQuickReplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_replies_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQuickReplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_quick_replies_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_quick_replies_proto_goTypes,
		DependencyIndexes: file_quick_replies_proto_depIdxs,
		MessageInfos:      file_quick_replies_proto_msgTypes,
	}.Build()
	File_quick_replies_proto = out.File
	file_quick_replies_proto_rawDesc = nil
	file_quick_replies_proto_goTypes = nil
	file_quick_replies_proto_depIdxs = nil
}
