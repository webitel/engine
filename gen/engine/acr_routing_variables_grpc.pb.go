// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: acr_routing_variables.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoutingVariableService_CreateRoutingVariable_FullMethodName = "/engine.RoutingVariableService/CreateRoutingVariable"
	RoutingVariableService_SearchRoutingVariable_FullMethodName = "/engine.RoutingVariableService/SearchRoutingVariable"
	RoutingVariableService_ReadRoutingVariable_FullMethodName   = "/engine.RoutingVariableService/ReadRoutingVariable"
	RoutingVariableService_UpdateRoutingVariable_FullMethodName = "/engine.RoutingVariableService/UpdateRoutingVariable"
	RoutingVariableService_DeleteRoutingVariable_FullMethodName = "/engine.RoutingVariableService/DeleteRoutingVariable"
)

// RoutingVariableServiceClient is the client API for RoutingVariableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutingVariableServiceClient interface {
	// Create RoutingVariable
	CreateRoutingVariable(ctx context.Context, in *CreateRoutingVariableRequest, opts ...grpc.CallOption) (*RoutingVariable, error)
	// List of RoutingVariable
	SearchRoutingVariable(ctx context.Context, in *SearchRoutingVariableRequest, opts ...grpc.CallOption) (*ListRoutingVariable, error)
	// RoutingVariable item
	ReadRoutingVariable(ctx context.Context, in *ReadRoutingVariableRequest, opts ...grpc.CallOption) (*RoutingVariable, error)
	// Update RoutingVariable
	UpdateRoutingVariable(ctx context.Context, in *UpdateRoutingVariableRequest, opts ...grpc.CallOption) (*RoutingVariable, error)
	// Remove RoutingVariable
	DeleteRoutingVariable(ctx context.Context, in *DeleteRoutingVariableRequest, opts ...grpc.CallOption) (*RoutingVariable, error)
}

type routingVariableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutingVariableServiceClient(cc grpc.ClientConnInterface) RoutingVariableServiceClient {
	return &routingVariableServiceClient{cc}
}

func (c *routingVariableServiceClient) CreateRoutingVariable(ctx context.Context, in *CreateRoutingVariableRequest, opts ...grpc.CallOption) (*RoutingVariable, error) {
	out := new(RoutingVariable)
	err := c.cc.Invoke(ctx, RoutingVariableService_CreateRoutingVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingVariableServiceClient) SearchRoutingVariable(ctx context.Context, in *SearchRoutingVariableRequest, opts ...grpc.CallOption) (*ListRoutingVariable, error) {
	out := new(ListRoutingVariable)
	err := c.cc.Invoke(ctx, RoutingVariableService_SearchRoutingVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingVariableServiceClient) ReadRoutingVariable(ctx context.Context, in *ReadRoutingVariableRequest, opts ...grpc.CallOption) (*RoutingVariable, error) {
	out := new(RoutingVariable)
	err := c.cc.Invoke(ctx, RoutingVariableService_ReadRoutingVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingVariableServiceClient) UpdateRoutingVariable(ctx context.Context, in *UpdateRoutingVariableRequest, opts ...grpc.CallOption) (*RoutingVariable, error) {
	out := new(RoutingVariable)
	err := c.cc.Invoke(ctx, RoutingVariableService_UpdateRoutingVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingVariableServiceClient) DeleteRoutingVariable(ctx context.Context, in *DeleteRoutingVariableRequest, opts ...grpc.CallOption) (*RoutingVariable, error) {
	out := new(RoutingVariable)
	err := c.cc.Invoke(ctx, RoutingVariableService_DeleteRoutingVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutingVariableServiceServer is the server API for RoutingVariableService service.
// All implementations must embed UnimplementedRoutingVariableServiceServer
// for forward compatibility
type RoutingVariableServiceServer interface {
	// Create RoutingVariable
	CreateRoutingVariable(context.Context, *CreateRoutingVariableRequest) (*RoutingVariable, error)
	// List of RoutingVariable
	SearchRoutingVariable(context.Context, *SearchRoutingVariableRequest) (*ListRoutingVariable, error)
	// RoutingVariable item
	ReadRoutingVariable(context.Context, *ReadRoutingVariableRequest) (*RoutingVariable, error)
	// Update RoutingVariable
	UpdateRoutingVariable(context.Context, *UpdateRoutingVariableRequest) (*RoutingVariable, error)
	// Remove RoutingVariable
	DeleteRoutingVariable(context.Context, *DeleteRoutingVariableRequest) (*RoutingVariable, error)
	mustEmbedUnimplementedRoutingVariableServiceServer()
}

// UnimplementedRoutingVariableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoutingVariableServiceServer struct {
}

func (UnimplementedRoutingVariableServiceServer) CreateRoutingVariable(context.Context, *CreateRoutingVariableRequest) (*RoutingVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoutingVariable not implemented")
}
func (UnimplementedRoutingVariableServiceServer) SearchRoutingVariable(context.Context, *SearchRoutingVariableRequest) (*ListRoutingVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRoutingVariable not implemented")
}
func (UnimplementedRoutingVariableServiceServer) ReadRoutingVariable(context.Context, *ReadRoutingVariableRequest) (*RoutingVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRoutingVariable not implemented")
}
func (UnimplementedRoutingVariableServiceServer) UpdateRoutingVariable(context.Context, *UpdateRoutingVariableRequest) (*RoutingVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoutingVariable not implemented")
}
func (UnimplementedRoutingVariableServiceServer) DeleteRoutingVariable(context.Context, *DeleteRoutingVariableRequest) (*RoutingVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoutingVariable not implemented")
}
func (UnimplementedRoutingVariableServiceServer) mustEmbedUnimplementedRoutingVariableServiceServer() {
}

// UnsafeRoutingVariableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutingVariableServiceServer will
// result in compilation errors.
type UnsafeRoutingVariableServiceServer interface {
	mustEmbedUnimplementedRoutingVariableServiceServer()
}

func RegisterRoutingVariableServiceServer(s grpc.ServiceRegistrar, srv RoutingVariableServiceServer) {
	s.RegisterService(&RoutingVariableService_ServiceDesc, srv)
}

func _RoutingVariableService_CreateRoutingVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoutingVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingVariableServiceServer).CreateRoutingVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingVariableService_CreateRoutingVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingVariableServiceServer).CreateRoutingVariable(ctx, req.(*CreateRoutingVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingVariableService_SearchRoutingVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRoutingVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingVariableServiceServer).SearchRoutingVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingVariableService_SearchRoutingVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingVariableServiceServer).SearchRoutingVariable(ctx, req.(*SearchRoutingVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingVariableService_ReadRoutingVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRoutingVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingVariableServiceServer).ReadRoutingVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingVariableService_ReadRoutingVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingVariableServiceServer).ReadRoutingVariable(ctx, req.(*ReadRoutingVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingVariableService_UpdateRoutingVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoutingVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingVariableServiceServer).UpdateRoutingVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingVariableService_UpdateRoutingVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingVariableServiceServer).UpdateRoutingVariable(ctx, req.(*UpdateRoutingVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingVariableService_DeleteRoutingVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoutingVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingVariableServiceServer).DeleteRoutingVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingVariableService_DeleteRoutingVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingVariableServiceServer).DeleteRoutingVariable(ctx, req.(*DeleteRoutingVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutingVariableService_ServiceDesc is the grpc.ServiceDesc for RoutingVariableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutingVariableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.RoutingVariableService",
	HandlerType: (*RoutingVariableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoutingVariable",
			Handler:    _RoutingVariableService_CreateRoutingVariable_Handler,
		},
		{
			MethodName: "SearchRoutingVariable",
			Handler:    _RoutingVariableService_SearchRoutingVariable_Handler,
		},
		{
			MethodName: "ReadRoutingVariable",
			Handler:    _RoutingVariableService_ReadRoutingVariable_Handler,
		},
		{
			MethodName: "UpdateRoutingVariable",
			Handler:    _RoutingVariableService_UpdateRoutingVariable_Handler,
		},
		{
			MethodName: "DeleteRoutingVariable",
			Handler:    _RoutingVariableService_DeleteRoutingVariable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acr_routing_variables.proto",
}
