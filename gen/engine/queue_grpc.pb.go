// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: queue.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueueService_CreateQueue_FullMethodName              = "/engine.QueueService/CreateQueue"
	QueueService_SearchQueue_FullMethodName              = "/engine.QueueService/SearchQueue"
	QueueService_ReadQueue_FullMethodName                = "/engine.QueueService/ReadQueue"
	QueueService_PatchQueue_FullMethodName               = "/engine.QueueService/PatchQueue"
	QueueService_UpdateQueue_FullMethodName              = "/engine.QueueService/UpdateQueue"
	QueueService_DeleteQueue_FullMethodName              = "/engine.QueueService/DeleteQueue"
	QueueService_SearchQueueReportGeneral_FullMethodName = "/engine.QueueService/SearchQueueReportGeneral"
	QueueService_SearchQueueTags_FullMethodName          = "/engine.QueueService/SearchQueueTags"
)

// QueueServiceClient is the client API for QueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueServiceClient interface {
	// Create Queue
	CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*Queue, error)
	// List of Queue
	SearchQueue(ctx context.Context, in *SearchQueueRequest, opts ...grpc.CallOption) (*ListQueue, error)
	// Queue item
	ReadQueue(ctx context.Context, in *ReadQueueRequest, opts ...grpc.CallOption) (*Queue, error)
	// Patch Queue
	PatchQueue(ctx context.Context, in *PatchQueueRequest, opts ...grpc.CallOption) (*Queue, error)
	// Update Queue
	UpdateQueue(ctx context.Context, in *UpdateQueueRequest, opts ...grpc.CallOption) (*Queue, error)
	// Remove Queue
	DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*Queue, error)
	SearchQueueReportGeneral(ctx context.Context, in *SearchQueueReportGeneralRequest, opts ...grpc.CallOption) (*ListReportGeneral, error)
	// List RoutingSchemaTags
	SearchQueueTags(ctx context.Context, in *SearchQueueTagsRequest, opts ...grpc.CallOption) (*ListTags, error)
}

type queueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueServiceClient(cc grpc.ClientConnInterface) QueueServiceClient {
	return &queueServiceClient{cc}
}

func (c *queueServiceClient) CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*Queue, error) {
	out := new(Queue)
	err := c.cc.Invoke(ctx, QueueService_CreateQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) SearchQueue(ctx context.Context, in *SearchQueueRequest, opts ...grpc.CallOption) (*ListQueue, error) {
	out := new(ListQueue)
	err := c.cc.Invoke(ctx, QueueService_SearchQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) ReadQueue(ctx context.Context, in *ReadQueueRequest, opts ...grpc.CallOption) (*Queue, error) {
	out := new(Queue)
	err := c.cc.Invoke(ctx, QueueService_ReadQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) PatchQueue(ctx context.Context, in *PatchQueueRequest, opts ...grpc.CallOption) (*Queue, error) {
	out := new(Queue)
	err := c.cc.Invoke(ctx, QueueService_PatchQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) UpdateQueue(ctx context.Context, in *UpdateQueueRequest, opts ...grpc.CallOption) (*Queue, error) {
	out := new(Queue)
	err := c.cc.Invoke(ctx, QueueService_UpdateQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*Queue, error) {
	out := new(Queue)
	err := c.cc.Invoke(ctx, QueueService_DeleteQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) SearchQueueReportGeneral(ctx context.Context, in *SearchQueueReportGeneralRequest, opts ...grpc.CallOption) (*ListReportGeneral, error) {
	out := new(ListReportGeneral)
	err := c.cc.Invoke(ctx, QueueService_SearchQueueReportGeneral_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) SearchQueueTags(ctx context.Context, in *SearchQueueTagsRequest, opts ...grpc.CallOption) (*ListTags, error) {
	out := new(ListTags)
	err := c.cc.Invoke(ctx, QueueService_SearchQueueTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServiceServer is the server API for QueueService service.
// All implementations must embed UnimplementedQueueServiceServer
// for forward compatibility
type QueueServiceServer interface {
	// Create Queue
	CreateQueue(context.Context, *CreateQueueRequest) (*Queue, error)
	// List of Queue
	SearchQueue(context.Context, *SearchQueueRequest) (*ListQueue, error)
	// Queue item
	ReadQueue(context.Context, *ReadQueueRequest) (*Queue, error)
	// Patch Queue
	PatchQueue(context.Context, *PatchQueueRequest) (*Queue, error)
	// Update Queue
	UpdateQueue(context.Context, *UpdateQueueRequest) (*Queue, error)
	// Remove Queue
	DeleteQueue(context.Context, *DeleteQueueRequest) (*Queue, error)
	SearchQueueReportGeneral(context.Context, *SearchQueueReportGeneralRequest) (*ListReportGeneral, error)
	// List RoutingSchemaTags
	SearchQueueTags(context.Context, *SearchQueueTagsRequest) (*ListTags, error)
	mustEmbedUnimplementedQueueServiceServer()
}

// UnimplementedQueueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueueServiceServer struct {
}

func (UnimplementedQueueServiceServer) CreateQueue(context.Context, *CreateQueueRequest) (*Queue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedQueueServiceServer) SearchQueue(context.Context, *SearchQueueRequest) (*ListQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchQueue not implemented")
}
func (UnimplementedQueueServiceServer) ReadQueue(context.Context, *ReadQueueRequest) (*Queue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadQueue not implemented")
}
func (UnimplementedQueueServiceServer) PatchQueue(context.Context, *PatchQueueRequest) (*Queue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchQueue not implemented")
}
func (UnimplementedQueueServiceServer) UpdateQueue(context.Context, *UpdateQueueRequest) (*Queue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQueue not implemented")
}
func (UnimplementedQueueServiceServer) DeleteQueue(context.Context, *DeleteQueueRequest) (*Queue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueue not implemented")
}
func (UnimplementedQueueServiceServer) SearchQueueReportGeneral(context.Context, *SearchQueueReportGeneralRequest) (*ListReportGeneral, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchQueueReportGeneral not implemented")
}
func (UnimplementedQueueServiceServer) SearchQueueTags(context.Context, *SearchQueueTagsRequest) (*ListTags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchQueueTags not implemented")
}
func (UnimplementedQueueServiceServer) mustEmbedUnimplementedQueueServiceServer() {}

// UnsafeQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServiceServer will
// result in compilation errors.
type UnsafeQueueServiceServer interface {
	mustEmbedUnimplementedQueueServiceServer()
}

func RegisterQueueServiceServer(s grpc.ServiceRegistrar, srv QueueServiceServer) {
	s.RegisterService(&QueueService_ServiceDesc, srv)
}

func _QueueService_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_CreateQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).CreateQueue(ctx, req.(*CreateQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_SearchQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).SearchQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_SearchQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).SearchQueue(ctx, req.(*SearchQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_ReadQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).ReadQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_ReadQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).ReadQueue(ctx, req.(*ReadQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_PatchQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).PatchQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_PatchQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).PatchQueue(ctx, req.(*PatchQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_UpdateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).UpdateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_UpdateQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).UpdateQueue(ctx, req.(*UpdateQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_DeleteQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).DeleteQueue(ctx, req.(*DeleteQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_SearchQueueReportGeneral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQueueReportGeneralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).SearchQueueReportGeneral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_SearchQueueReportGeneral_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).SearchQueueReportGeneral(ctx, req.(*SearchQueueReportGeneralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_SearchQueueTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQueueTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).SearchQueueTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_SearchQueueTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).SearchQueueTags(ctx, req.(*SearchQueueTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueService_ServiceDesc is the grpc.ServiceDesc for QueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.QueueService",
	HandlerType: (*QueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQueue",
			Handler:    _QueueService_CreateQueue_Handler,
		},
		{
			MethodName: "SearchQueue",
			Handler:    _QueueService_SearchQueue_Handler,
		},
		{
			MethodName: "ReadQueue",
			Handler:    _QueueService_ReadQueue_Handler,
		},
		{
			MethodName: "PatchQueue",
			Handler:    _QueueService_PatchQueue_Handler,
		},
		{
			MethodName: "UpdateQueue",
			Handler:    _QueueService_UpdateQueue_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _QueueService_DeleteQueue_Handler,
		},
		{
			MethodName: "SearchQueueReportGeneral",
			Handler:    _QueueService_SearchQueueReportGeneral_Handler,
		},
		{
			MethodName: "SearchQueueTags",
			Handler:    _QueueService_SearchQueueTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queue.proto",
}
