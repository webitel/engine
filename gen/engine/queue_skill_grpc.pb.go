// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: queue_skill.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueueSkillService_CreateQueueSkill_FullMethodName = "/engine.QueueSkillService/CreateQueueSkill"
	QueueSkillService_SearchQueueSkill_FullMethodName = "/engine.QueueSkillService/SearchQueueSkill"
	QueueSkillService_ReadQueueSkill_FullMethodName   = "/engine.QueueSkillService/ReadQueueSkill"
	QueueSkillService_UpdateQueueSkill_FullMethodName = "/engine.QueueSkillService/UpdateQueueSkill"
	QueueSkillService_PatchQueueSkill_FullMethodName  = "/engine.QueueSkillService/PatchQueueSkill"
	QueueSkillService_DeleteQueueSkill_FullMethodName = "/engine.QueueSkillService/DeleteQueueSkill"
)

// QueueSkillServiceClient is the client API for QueueSkillService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueSkillServiceClient interface {
	CreateQueueSkill(ctx context.Context, in *CreateQueueSkillRequest, opts ...grpc.CallOption) (*QueueSkill, error)
	SearchQueueSkill(ctx context.Context, in *SearchQueueSkillRequest, opts ...grpc.CallOption) (*ListQueueSkill, error)
	ReadQueueSkill(ctx context.Context, in *ReadQueueSkillRequest, opts ...grpc.CallOption) (*QueueSkill, error)
	UpdateQueueSkill(ctx context.Context, in *UpdateQueueSkillRequest, opts ...grpc.CallOption) (*QueueSkill, error)
	PatchQueueSkill(ctx context.Context, in *PatchQueueSkillRequest, opts ...grpc.CallOption) (*QueueSkill, error)
	DeleteQueueSkill(ctx context.Context, in *DeleteQueueSkillRequest, opts ...grpc.CallOption) (*QueueSkill, error)
}

type queueSkillServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueSkillServiceClient(cc grpc.ClientConnInterface) QueueSkillServiceClient {
	return &queueSkillServiceClient{cc}
}

func (c *queueSkillServiceClient) CreateQueueSkill(ctx context.Context, in *CreateQueueSkillRequest, opts ...grpc.CallOption) (*QueueSkill, error) {
	out := new(QueueSkill)
	err := c.cc.Invoke(ctx, QueueSkillService_CreateQueueSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueSkillServiceClient) SearchQueueSkill(ctx context.Context, in *SearchQueueSkillRequest, opts ...grpc.CallOption) (*ListQueueSkill, error) {
	out := new(ListQueueSkill)
	err := c.cc.Invoke(ctx, QueueSkillService_SearchQueueSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueSkillServiceClient) ReadQueueSkill(ctx context.Context, in *ReadQueueSkillRequest, opts ...grpc.CallOption) (*QueueSkill, error) {
	out := new(QueueSkill)
	err := c.cc.Invoke(ctx, QueueSkillService_ReadQueueSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueSkillServiceClient) UpdateQueueSkill(ctx context.Context, in *UpdateQueueSkillRequest, opts ...grpc.CallOption) (*QueueSkill, error) {
	out := new(QueueSkill)
	err := c.cc.Invoke(ctx, QueueSkillService_UpdateQueueSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueSkillServiceClient) PatchQueueSkill(ctx context.Context, in *PatchQueueSkillRequest, opts ...grpc.CallOption) (*QueueSkill, error) {
	out := new(QueueSkill)
	err := c.cc.Invoke(ctx, QueueSkillService_PatchQueueSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueSkillServiceClient) DeleteQueueSkill(ctx context.Context, in *DeleteQueueSkillRequest, opts ...grpc.CallOption) (*QueueSkill, error) {
	out := new(QueueSkill)
	err := c.cc.Invoke(ctx, QueueSkillService_DeleteQueueSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueSkillServiceServer is the server API for QueueSkillService service.
// All implementations must embed UnimplementedQueueSkillServiceServer
// for forward compatibility
type QueueSkillServiceServer interface {
	CreateQueueSkill(context.Context, *CreateQueueSkillRequest) (*QueueSkill, error)
	SearchQueueSkill(context.Context, *SearchQueueSkillRequest) (*ListQueueSkill, error)
	ReadQueueSkill(context.Context, *ReadQueueSkillRequest) (*QueueSkill, error)
	UpdateQueueSkill(context.Context, *UpdateQueueSkillRequest) (*QueueSkill, error)
	PatchQueueSkill(context.Context, *PatchQueueSkillRequest) (*QueueSkill, error)
	DeleteQueueSkill(context.Context, *DeleteQueueSkillRequest) (*QueueSkill, error)
	mustEmbedUnimplementedQueueSkillServiceServer()
}

// UnimplementedQueueSkillServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueueSkillServiceServer struct {
}

func (UnimplementedQueueSkillServiceServer) CreateQueueSkill(context.Context, *CreateQueueSkillRequest) (*QueueSkill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueueSkill not implemented")
}
func (UnimplementedQueueSkillServiceServer) SearchQueueSkill(context.Context, *SearchQueueSkillRequest) (*ListQueueSkill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchQueueSkill not implemented")
}
func (UnimplementedQueueSkillServiceServer) ReadQueueSkill(context.Context, *ReadQueueSkillRequest) (*QueueSkill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadQueueSkill not implemented")
}
func (UnimplementedQueueSkillServiceServer) UpdateQueueSkill(context.Context, *UpdateQueueSkillRequest) (*QueueSkill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQueueSkill not implemented")
}
func (UnimplementedQueueSkillServiceServer) PatchQueueSkill(context.Context, *PatchQueueSkillRequest) (*QueueSkill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchQueueSkill not implemented")
}
func (UnimplementedQueueSkillServiceServer) DeleteQueueSkill(context.Context, *DeleteQueueSkillRequest) (*QueueSkill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueueSkill not implemented")
}
func (UnimplementedQueueSkillServiceServer) mustEmbedUnimplementedQueueSkillServiceServer() {}

// UnsafeQueueSkillServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueSkillServiceServer will
// result in compilation errors.
type UnsafeQueueSkillServiceServer interface {
	mustEmbedUnimplementedQueueSkillServiceServer()
}

func RegisterQueueSkillServiceServer(s grpc.ServiceRegistrar, srv QueueSkillServiceServer) {
	s.RegisterService(&QueueSkillService_ServiceDesc, srv)
}

func _QueueSkillService_CreateQueueSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueueSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueSkillServiceServer).CreateQueueSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueSkillService_CreateQueueSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueSkillServiceServer).CreateQueueSkill(ctx, req.(*CreateQueueSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueSkillService_SearchQueueSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQueueSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueSkillServiceServer).SearchQueueSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueSkillService_SearchQueueSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueSkillServiceServer).SearchQueueSkill(ctx, req.(*SearchQueueSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueSkillService_ReadQueueSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadQueueSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueSkillServiceServer).ReadQueueSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueSkillService_ReadQueueSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueSkillServiceServer).ReadQueueSkill(ctx, req.(*ReadQueueSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueSkillService_UpdateQueueSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQueueSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueSkillServiceServer).UpdateQueueSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueSkillService_UpdateQueueSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueSkillServiceServer).UpdateQueueSkill(ctx, req.(*UpdateQueueSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueSkillService_PatchQueueSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchQueueSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueSkillServiceServer).PatchQueueSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueSkillService_PatchQueueSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueSkillServiceServer).PatchQueueSkill(ctx, req.(*PatchQueueSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueSkillService_DeleteQueueSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueSkillServiceServer).DeleteQueueSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueSkillService_DeleteQueueSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueSkillServiceServer).DeleteQueueSkill(ctx, req.(*DeleteQueueSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueSkillService_ServiceDesc is the grpc.ServiceDesc for QueueSkillService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueSkillService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.QueueSkillService",
	HandlerType: (*QueueSkillServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQueueSkill",
			Handler:    _QueueSkillService_CreateQueueSkill_Handler,
		},
		{
			MethodName: "SearchQueueSkill",
			Handler:    _QueueSkillService_SearchQueueSkill_Handler,
		},
		{
			MethodName: "ReadQueueSkill",
			Handler:    _QueueSkillService_ReadQueueSkill_Handler,
		},
		{
			MethodName: "UpdateQueueSkill",
			Handler:    _QueueSkillService_UpdateQueueSkill_Handler,
		},
		{
			MethodName: "PatchQueueSkill",
			Handler:    _QueueSkillService_PatchQueueSkill_Handler,
		},
		{
			MethodName: "DeleteQueueSkill",
			Handler:    _QueueSkillService_DeleteQueueSkill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queue_skill.proto",
}
