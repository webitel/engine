// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: list.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ListService_CreateList_FullMethodName              = "/engine.ListService/CreateList"
	ListService_SearchList_FullMethodName              = "/engine.ListService/SearchList"
	ListService_ReadList_FullMethodName                = "/engine.ListService/ReadList"
	ListService_UpdateList_FullMethodName              = "/engine.ListService/UpdateList"
	ListService_DeleteList_FullMethodName              = "/engine.ListService/DeleteList"
	ListService_CreateListCommunication_FullMethodName = "/engine.ListService/CreateListCommunication"
	ListService_SearchListCommunication_FullMethodName = "/engine.ListService/SearchListCommunication"
	ListService_ReadListCommunication_FullMethodName   = "/engine.ListService/ReadListCommunication"
	ListService_UpdateListCommunication_FullMethodName = "/engine.ListService/UpdateListCommunication"
	ListService_DeleteListCommunication_FullMethodName = "/engine.ListService/DeleteListCommunication"
)

// ListServiceClient is the client API for ListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListServiceClient interface {
	// Create List
	CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*List, error)
	// List of List
	SearchList(ctx context.Context, in *SearchListRequest, opts ...grpc.CallOption) (*ListOfList, error)
	// List item
	ReadList(ctx context.Context, in *ReadListRequest, opts ...grpc.CallOption) (*List, error)
	// Update list
	UpdateList(ctx context.Context, in *UpdateListRequest, opts ...grpc.CallOption) (*List, error)
	// Remove list
	DeleteList(ctx context.Context, in *DeleteListRequest, opts ...grpc.CallOption) (*List, error)
	// Create ListCommunication
	CreateListCommunication(ctx context.Context, in *CreateListCommunicationRequest, opts ...grpc.CallOption) (*ListCommunication, error)
	// List of List
	SearchListCommunication(ctx context.Context, in *SearchListCommunicationRequest, opts ...grpc.CallOption) (*ListOfListCommunication, error)
	// List item
	ReadListCommunication(ctx context.Context, in *ReadListCommunicationRequest, opts ...grpc.CallOption) (*ListCommunication, error)
	// Update ListCommunication
	UpdateListCommunication(ctx context.Context, in *UpdateListCommunicationRequest, opts ...grpc.CallOption) (*ListCommunication, error)
	// Remove ListCommunication
	DeleteListCommunication(ctx context.Context, in *DeleteListCommunicationRequest, opts ...grpc.CallOption) (*ListCommunication, error)
}

type listServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListServiceClient(cc grpc.ClientConnInterface) ListServiceClient {
	return &listServiceClient{cc}
}

func (c *listServiceClient) CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, ListService_CreateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) SearchList(ctx context.Context, in *SearchListRequest, opts ...grpc.CallOption) (*ListOfList, error) {
	out := new(ListOfList)
	err := c.cc.Invoke(ctx, ListService_SearchList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) ReadList(ctx context.Context, in *ReadListRequest, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, ListService_ReadList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) UpdateList(ctx context.Context, in *UpdateListRequest, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, ListService_UpdateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) DeleteList(ctx context.Context, in *DeleteListRequest, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, ListService_DeleteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) CreateListCommunication(ctx context.Context, in *CreateListCommunicationRequest, opts ...grpc.CallOption) (*ListCommunication, error) {
	out := new(ListCommunication)
	err := c.cc.Invoke(ctx, ListService_CreateListCommunication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) SearchListCommunication(ctx context.Context, in *SearchListCommunicationRequest, opts ...grpc.CallOption) (*ListOfListCommunication, error) {
	out := new(ListOfListCommunication)
	err := c.cc.Invoke(ctx, ListService_SearchListCommunication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) ReadListCommunication(ctx context.Context, in *ReadListCommunicationRequest, opts ...grpc.CallOption) (*ListCommunication, error) {
	out := new(ListCommunication)
	err := c.cc.Invoke(ctx, ListService_ReadListCommunication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) UpdateListCommunication(ctx context.Context, in *UpdateListCommunicationRequest, opts ...grpc.CallOption) (*ListCommunication, error) {
	out := new(ListCommunication)
	err := c.cc.Invoke(ctx, ListService_UpdateListCommunication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) DeleteListCommunication(ctx context.Context, in *DeleteListCommunicationRequest, opts ...grpc.CallOption) (*ListCommunication, error) {
	out := new(ListCommunication)
	err := c.cc.Invoke(ctx, ListService_DeleteListCommunication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListServiceServer is the server API for ListService service.
// All implementations must embed UnimplementedListServiceServer
// for forward compatibility
type ListServiceServer interface {
	// Create List
	CreateList(context.Context, *CreateListRequest) (*List, error)
	// List of List
	SearchList(context.Context, *SearchListRequest) (*ListOfList, error)
	// List item
	ReadList(context.Context, *ReadListRequest) (*List, error)
	// Update list
	UpdateList(context.Context, *UpdateListRequest) (*List, error)
	// Remove list
	DeleteList(context.Context, *DeleteListRequest) (*List, error)
	// Create ListCommunication
	CreateListCommunication(context.Context, *CreateListCommunicationRequest) (*ListCommunication, error)
	// List of List
	SearchListCommunication(context.Context, *SearchListCommunicationRequest) (*ListOfListCommunication, error)
	// List item
	ReadListCommunication(context.Context, *ReadListCommunicationRequest) (*ListCommunication, error)
	// Update ListCommunication
	UpdateListCommunication(context.Context, *UpdateListCommunicationRequest) (*ListCommunication, error)
	// Remove ListCommunication
	DeleteListCommunication(context.Context, *DeleteListCommunicationRequest) (*ListCommunication, error)
	mustEmbedUnimplementedListServiceServer()
}

// UnimplementedListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedListServiceServer struct {
}

func (UnimplementedListServiceServer) CreateList(context.Context, *CreateListRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateList not implemented")
}
func (UnimplementedListServiceServer) SearchList(context.Context, *SearchListRequest) (*ListOfList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchList not implemented")
}
func (UnimplementedListServiceServer) ReadList(context.Context, *ReadListRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadList not implemented")
}
func (UnimplementedListServiceServer) UpdateList(context.Context, *UpdateListRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateList not implemented")
}
func (UnimplementedListServiceServer) DeleteList(context.Context, *DeleteListRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteList not implemented")
}
func (UnimplementedListServiceServer) CreateListCommunication(context.Context, *CreateListCommunicationRequest) (*ListCommunication, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateListCommunication not implemented")
}
func (UnimplementedListServiceServer) SearchListCommunication(context.Context, *SearchListCommunicationRequest) (*ListOfListCommunication, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchListCommunication not implemented")
}
func (UnimplementedListServiceServer) ReadListCommunication(context.Context, *ReadListCommunicationRequest) (*ListCommunication, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadListCommunication not implemented")
}
func (UnimplementedListServiceServer) UpdateListCommunication(context.Context, *UpdateListCommunicationRequest) (*ListCommunication, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateListCommunication not implemented")
}
func (UnimplementedListServiceServer) DeleteListCommunication(context.Context, *DeleteListCommunicationRequest) (*ListCommunication, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteListCommunication not implemented")
}
func (UnimplementedListServiceServer) mustEmbedUnimplementedListServiceServer() {}

// UnsafeListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListServiceServer will
// result in compilation errors.
type UnsafeListServiceServer interface {
	mustEmbedUnimplementedListServiceServer()
}

func RegisterListServiceServer(s grpc.ServiceRegistrar, srv ListServiceServer) {
	s.RegisterService(&ListService_ServiceDesc, srv)
}

func _ListService_CreateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).CreateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_CreateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).CreateList(ctx, req.(*CreateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_SearchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).SearchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_SearchList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).SearchList(ctx, req.(*SearchListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_ReadList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).ReadList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_ReadList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).ReadList(ctx, req.(*ReadListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_UpdateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).UpdateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_UpdateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).UpdateList(ctx, req.(*UpdateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_DeleteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).DeleteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_DeleteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).DeleteList(ctx, req.(*DeleteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_CreateListCommunication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListCommunicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).CreateListCommunication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_CreateListCommunication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).CreateListCommunication(ctx, req.(*CreateListCommunicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_SearchListCommunication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchListCommunicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).SearchListCommunication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_SearchListCommunication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).SearchListCommunication(ctx, req.(*SearchListCommunicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_ReadListCommunication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadListCommunicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).ReadListCommunication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_ReadListCommunication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).ReadListCommunication(ctx, req.(*ReadListCommunicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_UpdateListCommunication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListCommunicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).UpdateListCommunication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_UpdateListCommunication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).UpdateListCommunication(ctx, req.(*UpdateListCommunicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_DeleteListCommunication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteListCommunicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).DeleteListCommunication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_DeleteListCommunication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).DeleteListCommunication(ctx, req.(*DeleteListCommunicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListService_ServiceDesc is the grpc.ServiceDesc for ListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.ListService",
	HandlerType: (*ListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateList",
			Handler:    _ListService_CreateList_Handler,
		},
		{
			MethodName: "SearchList",
			Handler:    _ListService_SearchList_Handler,
		},
		{
			MethodName: "ReadList",
			Handler:    _ListService_ReadList_Handler,
		},
		{
			MethodName: "UpdateList",
			Handler:    _ListService_UpdateList_Handler,
		},
		{
			MethodName: "DeleteList",
			Handler:    _ListService_DeleteList_Handler,
		},
		{
			MethodName: "CreateListCommunication",
			Handler:    _ListService_CreateListCommunication_Handler,
		},
		{
			MethodName: "SearchListCommunication",
			Handler:    _ListService_SearchListCommunication_Handler,
		},
		{
			MethodName: "ReadListCommunication",
			Handler:    _ListService_ReadListCommunication_Handler,
		},
		{
			MethodName: "UpdateListCommunication",
			Handler:    _ListService_UpdateListCommunication_Handler,
		},
		{
			MethodName: "DeleteListCommunication",
			Handler:    _ListService_DeleteListCommunication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "list.proto",
}
