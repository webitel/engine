// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: agent.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentService_CreateAgent_FullMethodName                     = "/engine.AgentService/CreateAgent"
	AgentService_SearchAgent_FullMethodName                     = "/engine.AgentService/SearchAgent"
	AgentService_ReadAgent_FullMethodName                       = "/engine.AgentService/ReadAgent"
	AgentService_UpdateAgent_FullMethodName                     = "/engine.AgentService/UpdateAgent"
	AgentService_PatchAgent_FullMethodName                      = "/engine.AgentService/PatchAgent"
	AgentService_DeleteAgent_FullMethodName                     = "/engine.AgentService/DeleteAgent"
	AgentService_UpdateAgentStatus_FullMethodName               = "/engine.AgentService/UpdateAgentStatus"
	AgentService_AgentSetState_FullMethodName                   = "/engine.AgentService/AgentSetState"
	AgentService_AgentStateHistory_FullMethodName               = "/engine.AgentService/AgentStateHistory"
	AgentService_SearchAgentStateHistory_FullMethodName         = "/engine.AgentService/SearchAgentStateHistory"
	AgentService_SearchAgentInTeam_FullMethodName               = "/engine.AgentService/SearchAgentInTeam"
	AgentService_SearchAgentInQueue_FullMethodName              = "/engine.AgentService/SearchAgentInQueue"
	AgentService_SearchPauseCauseForAgent_FullMethodName        = "/engine.AgentService/SearchPauseCauseForAgent"
	AgentService_SearchAgentInQueueStatistics_FullMethodName    = "/engine.AgentService/SearchAgentInQueueStatistics"
	AgentService_AgentTodayStatistics_FullMethodName            = "/engine.AgentService/AgentTodayStatistics"
	AgentService_SearchAgentCallStatistics_FullMethodName       = "/engine.AgentService/SearchAgentCallStatistics"
	AgentService_SearchAgentStatusStatistic_FullMethodName      = "/engine.AgentService/SearchAgentStatusStatistic"
	AgentService_SearchAgentStatusStatisticItem_FullMethodName  = "/engine.AgentService/SearchAgentStatusStatisticItem"
	AgentService_SearchLookupUsersAgentNotExists_FullMethodName = "/engine.AgentService/SearchLookupUsersAgentNotExists"
	AgentService_SearchUserStatus_FullMethodName                = "/engine.AgentService/SearchUserStatus"
)

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	// Create Agent
	CreateAgent(ctx context.Context, in *CreateAgentRequest, opts ...grpc.CallOption) (*Agent, error)
	// List of Agent
	SearchAgent(ctx context.Context, in *SearchAgentRequest, opts ...grpc.CallOption) (*ListAgent, error)
	// Agent item
	ReadAgent(ctx context.Context, in *ReadAgentRequest, opts ...grpc.CallOption) (*Agent, error)
	// Update Agent
	UpdateAgent(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*Agent, error)
	// Update Agent
	PatchAgent(ctx context.Context, in *PatchAgentRequest, opts ...grpc.CallOption) (*Agent, error)
	// Remove Agent
	DeleteAgent(ctx context.Context, in *DeleteAgentRequest, opts ...grpc.CallOption) (*Agent, error)
	// Change agent status
	UpdateAgentStatus(ctx context.Context, in *AgentStatusRequest, opts ...grpc.CallOption) (*Response, error)
	AgentSetState(ctx context.Context, in *AgentSetStateRequest, opts ...grpc.CallOption) (*AgentSetStateResponse, error)
	AgentStateHistory(ctx context.Context, in *AgentStateHistoryRequest, opts ...grpc.CallOption) (*ListAgentStateHistory, error)
	SearchAgentStateHistory(ctx context.Context, in *SearchAgentStateHistoryRequest, opts ...grpc.CallOption) (*ListAgentStateHistory, error)
	// todo deprecated ?
	SearchAgentInTeam(ctx context.Context, in *SearchAgentInTeamRequest, opts ...grpc.CallOption) (*ListAgentInTeam, error)
	SearchAgentInQueue(ctx context.Context, in *SearchAgentInQueueRequest, opts ...grpc.CallOption) (*ListAgentInQueue, error)
	SearchPauseCauseForAgent(ctx context.Context, in *SearchPauseCauseForAgentRequest, opts ...grpc.CallOption) (*ForAgentPauseCauseList, error)
	SearchAgentInQueueStatistics(ctx context.Context, in *SearchAgentInQueueStatisticsRequest, opts ...grpc.CallOption) (*AgentInQueueStatisticsList, error)
	AgentTodayStatistics(ctx context.Context, in *AgentTodayStatisticsRequest, opts ...grpc.CallOption) (*AgentTodayStatisticsResponse, error)
	SearchAgentCallStatistics(ctx context.Context, in *SearchAgentCallStatisticsRequest, opts ...grpc.CallOption) (*AgentCallStatisticsList, error)
	SearchAgentStatusStatistic(ctx context.Context, in *SearchAgentStatusStatisticRequest, opts ...grpc.CallOption) (*ListAgentStatsStatistic, error)
	SearchAgentStatusStatisticItem(ctx context.Context, in *SearchAgentStatusStatisticItemRequest, opts ...grpc.CallOption) (*AgentStatusStatisticItem, error)
	// SearchLookupAgentNotExistsUser
	SearchLookupUsersAgentNotExists(ctx context.Context, in *SearchLookupUsersAgentNotExistsRequest, opts ...grpc.CallOption) (*ListAgentUser, error)
	// List of UserStatus
	SearchUserStatus(ctx context.Context, in *SearchUserStatusRequest, opts ...grpc.CallOption) (*ListUserStatus, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) CreateAgent(ctx context.Context, in *CreateAgentRequest, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := c.cc.Invoke(ctx, AgentService_CreateAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SearchAgent(ctx context.Context, in *SearchAgentRequest, opts ...grpc.CallOption) (*ListAgent, error) {
	out := new(ListAgent)
	err := c.cc.Invoke(ctx, AgentService_SearchAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ReadAgent(ctx context.Context, in *ReadAgentRequest, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := c.cc.Invoke(ctx, AgentService_ReadAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UpdateAgent(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := c.cc.Invoke(ctx, AgentService_UpdateAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) PatchAgent(ctx context.Context, in *PatchAgentRequest, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := c.cc.Invoke(ctx, AgentService_PatchAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) DeleteAgent(ctx context.Context, in *DeleteAgentRequest, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := c.cc.Invoke(ctx, AgentService_DeleteAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UpdateAgentStatus(ctx context.Context, in *AgentStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, AgentService_UpdateAgentStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentSetState(ctx context.Context, in *AgentSetStateRequest, opts ...grpc.CallOption) (*AgentSetStateResponse, error) {
	out := new(AgentSetStateResponse)
	err := c.cc.Invoke(ctx, AgentService_AgentSetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentStateHistory(ctx context.Context, in *AgentStateHistoryRequest, opts ...grpc.CallOption) (*ListAgentStateHistory, error) {
	out := new(ListAgentStateHistory)
	err := c.cc.Invoke(ctx, AgentService_AgentStateHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SearchAgentStateHistory(ctx context.Context, in *SearchAgentStateHistoryRequest, opts ...grpc.CallOption) (*ListAgentStateHistory, error) {
	out := new(ListAgentStateHistory)
	err := c.cc.Invoke(ctx, AgentService_SearchAgentStateHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SearchAgentInTeam(ctx context.Context, in *SearchAgentInTeamRequest, opts ...grpc.CallOption) (*ListAgentInTeam, error) {
	out := new(ListAgentInTeam)
	err := c.cc.Invoke(ctx, AgentService_SearchAgentInTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SearchAgentInQueue(ctx context.Context, in *SearchAgentInQueueRequest, opts ...grpc.CallOption) (*ListAgentInQueue, error) {
	out := new(ListAgentInQueue)
	err := c.cc.Invoke(ctx, AgentService_SearchAgentInQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SearchPauseCauseForAgent(ctx context.Context, in *SearchPauseCauseForAgentRequest, opts ...grpc.CallOption) (*ForAgentPauseCauseList, error) {
	out := new(ForAgentPauseCauseList)
	err := c.cc.Invoke(ctx, AgentService_SearchPauseCauseForAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SearchAgentInQueueStatistics(ctx context.Context, in *SearchAgentInQueueStatisticsRequest, opts ...grpc.CallOption) (*AgentInQueueStatisticsList, error) {
	out := new(AgentInQueueStatisticsList)
	err := c.cc.Invoke(ctx, AgentService_SearchAgentInQueueStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentTodayStatistics(ctx context.Context, in *AgentTodayStatisticsRequest, opts ...grpc.CallOption) (*AgentTodayStatisticsResponse, error) {
	out := new(AgentTodayStatisticsResponse)
	err := c.cc.Invoke(ctx, AgentService_AgentTodayStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SearchAgentCallStatistics(ctx context.Context, in *SearchAgentCallStatisticsRequest, opts ...grpc.CallOption) (*AgentCallStatisticsList, error) {
	out := new(AgentCallStatisticsList)
	err := c.cc.Invoke(ctx, AgentService_SearchAgentCallStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SearchAgentStatusStatistic(ctx context.Context, in *SearchAgentStatusStatisticRequest, opts ...grpc.CallOption) (*ListAgentStatsStatistic, error) {
	out := new(ListAgentStatsStatistic)
	err := c.cc.Invoke(ctx, AgentService_SearchAgentStatusStatistic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SearchAgentStatusStatisticItem(ctx context.Context, in *SearchAgentStatusStatisticItemRequest, opts ...grpc.CallOption) (*AgentStatusStatisticItem, error) {
	out := new(AgentStatusStatisticItem)
	err := c.cc.Invoke(ctx, AgentService_SearchAgentStatusStatisticItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SearchLookupUsersAgentNotExists(ctx context.Context, in *SearchLookupUsersAgentNotExistsRequest, opts ...grpc.CallOption) (*ListAgentUser, error) {
	out := new(ListAgentUser)
	err := c.cc.Invoke(ctx, AgentService_SearchLookupUsersAgentNotExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SearchUserStatus(ctx context.Context, in *SearchUserStatusRequest, opts ...grpc.CallOption) (*ListUserStatus, error) {
	out := new(ListUserStatus)
	err := c.cc.Invoke(ctx, AgentService_SearchUserStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility
type AgentServiceServer interface {
	// Create Agent
	CreateAgent(context.Context, *CreateAgentRequest) (*Agent, error)
	// List of Agent
	SearchAgent(context.Context, *SearchAgentRequest) (*ListAgent, error)
	// Agent item
	ReadAgent(context.Context, *ReadAgentRequest) (*Agent, error)
	// Update Agent
	UpdateAgent(context.Context, *UpdateAgentRequest) (*Agent, error)
	// Update Agent
	PatchAgent(context.Context, *PatchAgentRequest) (*Agent, error)
	// Remove Agent
	DeleteAgent(context.Context, *DeleteAgentRequest) (*Agent, error)
	// Change agent status
	UpdateAgentStatus(context.Context, *AgentStatusRequest) (*Response, error)
	AgentSetState(context.Context, *AgentSetStateRequest) (*AgentSetStateResponse, error)
	AgentStateHistory(context.Context, *AgentStateHistoryRequest) (*ListAgentStateHistory, error)
	SearchAgentStateHistory(context.Context, *SearchAgentStateHistoryRequest) (*ListAgentStateHistory, error)
	// todo deprecated ?
	SearchAgentInTeam(context.Context, *SearchAgentInTeamRequest) (*ListAgentInTeam, error)
	SearchAgentInQueue(context.Context, *SearchAgentInQueueRequest) (*ListAgentInQueue, error)
	SearchPauseCauseForAgent(context.Context, *SearchPauseCauseForAgentRequest) (*ForAgentPauseCauseList, error)
	SearchAgentInQueueStatistics(context.Context, *SearchAgentInQueueStatisticsRequest) (*AgentInQueueStatisticsList, error)
	AgentTodayStatistics(context.Context, *AgentTodayStatisticsRequest) (*AgentTodayStatisticsResponse, error)
	SearchAgentCallStatistics(context.Context, *SearchAgentCallStatisticsRequest) (*AgentCallStatisticsList, error)
	SearchAgentStatusStatistic(context.Context, *SearchAgentStatusStatisticRequest) (*ListAgentStatsStatistic, error)
	SearchAgentStatusStatisticItem(context.Context, *SearchAgentStatusStatisticItemRequest) (*AgentStatusStatisticItem, error)
	// SearchLookupAgentNotExistsUser
	SearchLookupUsersAgentNotExists(context.Context, *SearchLookupUsersAgentNotExistsRequest) (*ListAgentUser, error)
	// List of UserStatus
	SearchUserStatus(context.Context, *SearchUserStatusRequest) (*ListUserStatus, error)
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServiceServer struct {
}

func (UnimplementedAgentServiceServer) CreateAgent(context.Context, *CreateAgentRequest) (*Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgent not implemented")
}
func (UnimplementedAgentServiceServer) SearchAgent(context.Context, *SearchAgentRequest) (*ListAgent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAgent not implemented")
}
func (UnimplementedAgentServiceServer) ReadAgent(context.Context, *ReadAgentRequest) (*Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAgent not implemented")
}
func (UnimplementedAgentServiceServer) UpdateAgent(context.Context, *UpdateAgentRequest) (*Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgent not implemented")
}
func (UnimplementedAgentServiceServer) PatchAgent(context.Context, *PatchAgentRequest) (*Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchAgent not implemented")
}
func (UnimplementedAgentServiceServer) DeleteAgent(context.Context, *DeleteAgentRequest) (*Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgent not implemented")
}
func (UnimplementedAgentServiceServer) UpdateAgentStatus(context.Context, *AgentStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentStatus not implemented")
}
func (UnimplementedAgentServiceServer) AgentSetState(context.Context, *AgentSetStateRequest) (*AgentSetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentSetState not implemented")
}
func (UnimplementedAgentServiceServer) AgentStateHistory(context.Context, *AgentStateHistoryRequest) (*ListAgentStateHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentStateHistory not implemented")
}
func (UnimplementedAgentServiceServer) SearchAgentStateHistory(context.Context, *SearchAgentStateHistoryRequest) (*ListAgentStateHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAgentStateHistory not implemented")
}
func (UnimplementedAgentServiceServer) SearchAgentInTeam(context.Context, *SearchAgentInTeamRequest) (*ListAgentInTeam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAgentInTeam not implemented")
}
func (UnimplementedAgentServiceServer) SearchAgentInQueue(context.Context, *SearchAgentInQueueRequest) (*ListAgentInQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAgentInQueue not implemented")
}
func (UnimplementedAgentServiceServer) SearchPauseCauseForAgent(context.Context, *SearchPauseCauseForAgentRequest) (*ForAgentPauseCauseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPauseCauseForAgent not implemented")
}
func (UnimplementedAgentServiceServer) SearchAgentInQueueStatistics(context.Context, *SearchAgentInQueueStatisticsRequest) (*AgentInQueueStatisticsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAgentInQueueStatistics not implemented")
}
func (UnimplementedAgentServiceServer) AgentTodayStatistics(context.Context, *AgentTodayStatisticsRequest) (*AgentTodayStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentTodayStatistics not implemented")
}
func (UnimplementedAgentServiceServer) SearchAgentCallStatistics(context.Context, *SearchAgentCallStatisticsRequest) (*AgentCallStatisticsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAgentCallStatistics not implemented")
}
func (UnimplementedAgentServiceServer) SearchAgentStatusStatistic(context.Context, *SearchAgentStatusStatisticRequest) (*ListAgentStatsStatistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAgentStatusStatistic not implemented")
}
func (UnimplementedAgentServiceServer) SearchAgentStatusStatisticItem(context.Context, *SearchAgentStatusStatisticItemRequest) (*AgentStatusStatisticItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAgentStatusStatisticItem not implemented")
}
func (UnimplementedAgentServiceServer) SearchLookupUsersAgentNotExists(context.Context, *SearchLookupUsersAgentNotExistsRequest) (*ListAgentUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLookupUsersAgentNotExists not implemented")
}
func (UnimplementedAgentServiceServer) SearchUserStatus(context.Context, *SearchUserStatusRequest) (*ListUserStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserStatus not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_CreateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).CreateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_CreateAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).CreateAgent(ctx, req.(*CreateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SearchAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SearchAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SearchAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SearchAgent(ctx, req.(*SearchAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ReadAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ReadAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ReadAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ReadAgent(ctx, req.(*ReadAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UpdateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UpdateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_UpdateAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UpdateAgent(ctx, req.(*UpdateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_PatchAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).PatchAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_PatchAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).PatchAgent(ctx, req.(*PatchAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_DeleteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).DeleteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_DeleteAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).DeleteAgent(ctx, req.(*DeleteAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UpdateAgentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UpdateAgentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_UpdateAgentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UpdateAgentStatus(ctx, req.(*AgentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentSetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentSetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentSetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_AgentSetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentSetState(ctx, req.(*AgentSetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentStateHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentStateHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentStateHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_AgentStateHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentStateHistory(ctx, req.(*AgentStateHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SearchAgentStateHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAgentStateHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SearchAgentStateHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SearchAgentStateHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SearchAgentStateHistory(ctx, req.(*SearchAgentStateHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SearchAgentInTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAgentInTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SearchAgentInTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SearchAgentInTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SearchAgentInTeam(ctx, req.(*SearchAgentInTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SearchAgentInQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAgentInQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SearchAgentInQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SearchAgentInQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SearchAgentInQueue(ctx, req.(*SearchAgentInQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SearchPauseCauseForAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPauseCauseForAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SearchPauseCauseForAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SearchPauseCauseForAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SearchPauseCauseForAgent(ctx, req.(*SearchPauseCauseForAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SearchAgentInQueueStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAgentInQueueStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SearchAgentInQueueStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SearchAgentInQueueStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SearchAgentInQueueStatistics(ctx, req.(*SearchAgentInQueueStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentTodayStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentTodayStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentTodayStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_AgentTodayStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentTodayStatistics(ctx, req.(*AgentTodayStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SearchAgentCallStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAgentCallStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SearchAgentCallStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SearchAgentCallStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SearchAgentCallStatistics(ctx, req.(*SearchAgentCallStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SearchAgentStatusStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAgentStatusStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SearchAgentStatusStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SearchAgentStatusStatistic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SearchAgentStatusStatistic(ctx, req.(*SearchAgentStatusStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SearchAgentStatusStatisticItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAgentStatusStatisticItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SearchAgentStatusStatisticItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SearchAgentStatusStatisticItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SearchAgentStatusStatisticItem(ctx, req.(*SearchAgentStatusStatisticItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SearchLookupUsersAgentNotExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLookupUsersAgentNotExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SearchLookupUsersAgentNotExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SearchLookupUsersAgentNotExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SearchLookupUsersAgentNotExists(ctx, req.(*SearchLookupUsersAgentNotExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SearchUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SearchUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SearchUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SearchUserStatus(ctx, req.(*SearchUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAgent",
			Handler:    _AgentService_CreateAgent_Handler,
		},
		{
			MethodName: "SearchAgent",
			Handler:    _AgentService_SearchAgent_Handler,
		},
		{
			MethodName: "ReadAgent",
			Handler:    _AgentService_ReadAgent_Handler,
		},
		{
			MethodName: "UpdateAgent",
			Handler:    _AgentService_UpdateAgent_Handler,
		},
		{
			MethodName: "PatchAgent",
			Handler:    _AgentService_PatchAgent_Handler,
		},
		{
			MethodName: "DeleteAgent",
			Handler:    _AgentService_DeleteAgent_Handler,
		},
		{
			MethodName: "UpdateAgentStatus",
			Handler:    _AgentService_UpdateAgentStatus_Handler,
		},
		{
			MethodName: "AgentSetState",
			Handler:    _AgentService_AgentSetState_Handler,
		},
		{
			MethodName: "AgentStateHistory",
			Handler:    _AgentService_AgentStateHistory_Handler,
		},
		{
			MethodName: "SearchAgentStateHistory",
			Handler:    _AgentService_SearchAgentStateHistory_Handler,
		},
		{
			MethodName: "SearchAgentInTeam",
			Handler:    _AgentService_SearchAgentInTeam_Handler,
		},
		{
			MethodName: "SearchAgentInQueue",
			Handler:    _AgentService_SearchAgentInQueue_Handler,
		},
		{
			MethodName: "SearchPauseCauseForAgent",
			Handler:    _AgentService_SearchPauseCauseForAgent_Handler,
		},
		{
			MethodName: "SearchAgentInQueueStatistics",
			Handler:    _AgentService_SearchAgentInQueueStatistics_Handler,
		},
		{
			MethodName: "AgentTodayStatistics",
			Handler:    _AgentService_AgentTodayStatistics_Handler,
		},
		{
			MethodName: "SearchAgentCallStatistics",
			Handler:    _AgentService_SearchAgentCallStatistics_Handler,
		},
		{
			MethodName: "SearchAgentStatusStatistic",
			Handler:    _AgentService_SearchAgentStatusStatistic_Handler,
		},
		{
			MethodName: "SearchAgentStatusStatisticItem",
			Handler:    _AgentService_SearchAgentStatusStatisticItem_Handler,
		},
		{
			MethodName: "SearchLookupUsersAgentNotExists",
			Handler:    _AgentService_SearchLookupUsersAgentNotExists_Handler,
		},
		{
			MethodName: "SearchUserStatus",
			Handler:    _AgentService_SearchUserStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}
