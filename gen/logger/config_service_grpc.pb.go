// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: config_service.proto

package logger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConfigService_UpdateConfig_FullMethodName         = "/logger.ConfigService/UpdateConfig"
	ConfigService_PatchConfig_FullMethodName          = "/logger.ConfigService/PatchConfig"
	ConfigService_CreateConfig_FullMethodName         = "/logger.ConfigService/CreateConfig"
	ConfigService_DeleteConfig_FullMethodName         = "/logger.ConfigService/DeleteConfig"
	ConfigService_DeleteConfigBulk_FullMethodName     = "/logger.ConfigService/DeleteConfigBulk"
	ConfigService_ReadConfigByObjectId_FullMethodName = "/logger.ConfigService/ReadConfigByObjectId"
	ConfigService_CheckConfigStatus_FullMethodName    = "/logger.ConfigService/CheckConfigStatus"
	ConfigService_ReadSystemObjects_FullMethodName    = "/logger.ConfigService/ReadSystemObjects"
	ConfigService_ReadConfig_FullMethodName           = "/logger.ConfigService/ReadConfig"
	ConfigService_SearchConfig_FullMethodName         = "/logger.ConfigService/SearchConfig"
)

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigServiceClient interface {
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*Config, error)
	PatchConfig(ctx context.Context, in *PatchConfigRequest, opts ...grpc.CallOption) (*Config, error)
	CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*Config, error)
	DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteConfigBulk(ctx context.Context, in *DeleteConfigBulkRequest, opts ...grpc.CallOption) (*Empty, error)
	ReadConfigByObjectId(ctx context.Context, in *ReadConfigByObjectIdRequest, opts ...grpc.CallOption) (*Config, error)
	CheckConfigStatus(ctx context.Context, in *CheckConfigStatusRequest, opts ...grpc.CallOption) (*ConfigStatus, error)
	ReadSystemObjects(ctx context.Context, in *ReadSystemObjectsRequest, opts ...grpc.CallOption) (*SystemObjects, error)
	ReadConfig(ctx context.Context, in *ReadConfigRequest, opts ...grpc.CallOption) (*Config, error)
	SearchConfig(ctx context.Context, in *SearchConfigRequest, opts ...grpc.CallOption) (*Configs, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, ConfigService_UpdateConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) PatchConfig(ctx context.Context, in *PatchConfigRequest, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, ConfigService_PatchConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, ConfigService_CreateConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ConfigService_DeleteConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteConfigBulk(ctx context.Context, in *DeleteConfigBulkRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ConfigService_DeleteConfigBulk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ReadConfigByObjectId(ctx context.Context, in *ReadConfigByObjectIdRequest, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, ConfigService_ReadConfigByObjectId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CheckConfigStatus(ctx context.Context, in *CheckConfigStatusRequest, opts ...grpc.CallOption) (*ConfigStatus, error) {
	out := new(ConfigStatus)
	err := c.cc.Invoke(ctx, ConfigService_CheckConfigStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ReadSystemObjects(ctx context.Context, in *ReadSystemObjectsRequest, opts ...grpc.CallOption) (*SystemObjects, error) {
	out := new(SystemObjects)
	err := c.cc.Invoke(ctx, ConfigService_ReadSystemObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ReadConfig(ctx context.Context, in *ReadConfigRequest, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, ConfigService_ReadConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) SearchConfig(ctx context.Context, in *SearchConfigRequest, opts ...grpc.CallOption) (*Configs, error) {
	out := new(Configs)
	err := c.cc.Invoke(ctx, ConfigService_SearchConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations must embed UnimplementedConfigServiceServer
// for forward compatibility
type ConfigServiceServer interface {
	UpdateConfig(context.Context, *UpdateConfigRequest) (*Config, error)
	PatchConfig(context.Context, *PatchConfigRequest) (*Config, error)
	CreateConfig(context.Context, *CreateConfigRequest) (*Config, error)
	DeleteConfig(context.Context, *DeleteConfigRequest) (*Empty, error)
	DeleteConfigBulk(context.Context, *DeleteConfigBulkRequest) (*Empty, error)
	ReadConfigByObjectId(context.Context, *ReadConfigByObjectIdRequest) (*Config, error)
	CheckConfigStatus(context.Context, *CheckConfigStatusRequest) (*ConfigStatus, error)
	ReadSystemObjects(context.Context, *ReadSystemObjectsRequest) (*SystemObjects, error)
	ReadConfig(context.Context, *ReadConfigRequest) (*Config, error)
	SearchConfig(context.Context, *SearchConfigRequest) (*Configs, error)
	mustEmbedUnimplementedConfigServiceServer()
}

// UnimplementedConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigServiceServer struct {
}

func (UnimplementedConfigServiceServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedConfigServiceServer) PatchConfig(context.Context, *PatchConfigRequest) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchConfig not implemented")
}
func (UnimplementedConfigServiceServer) CreateConfig(context.Context, *CreateConfigRequest) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfig not implemented")
}
func (UnimplementedConfigServiceServer) DeleteConfig(context.Context, *DeleteConfigRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (UnimplementedConfigServiceServer) DeleteConfigBulk(context.Context, *DeleteConfigBulkRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigBulk not implemented")
}
func (UnimplementedConfigServiceServer) ReadConfigByObjectId(context.Context, *ReadConfigByObjectIdRequest) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadConfigByObjectId not implemented")
}
func (UnimplementedConfigServiceServer) CheckConfigStatus(context.Context, *CheckConfigStatusRequest) (*ConfigStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckConfigStatus not implemented")
}
func (UnimplementedConfigServiceServer) ReadSystemObjects(context.Context, *ReadSystemObjectsRequest) (*SystemObjects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSystemObjects not implemented")
}
func (UnimplementedConfigServiceServer) ReadConfig(context.Context, *ReadConfigRequest) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadConfig not implemented")
}
func (UnimplementedConfigServiceServer) SearchConfig(context.Context, *SearchConfigRequest) (*Configs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchConfig not implemented")
}
func (UnimplementedConfigServiceServer) mustEmbedUnimplementedConfigServiceServer() {}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_PatchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).PatchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_PatchConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).PatchConfig(ctx, req.(*PatchConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_CreateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateConfig(ctx, req.(*CreateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteConfig(ctx, req.(*DeleteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteConfigBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteConfigBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteConfigBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteConfigBulk(ctx, req.(*DeleteConfigBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ReadConfigByObjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadConfigByObjectIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ReadConfigByObjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ReadConfigByObjectId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ReadConfigByObjectId(ctx, req.(*ReadConfigByObjectIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CheckConfigStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckConfigStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CheckConfigStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_CheckConfigStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CheckConfigStatus(ctx, req.(*CheckConfigStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ReadSystemObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSystemObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ReadSystemObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ReadSystemObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ReadSystemObjects(ctx, req.(*ReadSystemObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ReadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ReadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ReadConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ReadConfig(ctx, req.(*ReadConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_SearchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).SearchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_SearchConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).SearchConfig(ctx, req.(*SearchConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logger.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateConfig",
			Handler:    _ConfigService_UpdateConfig_Handler,
		},
		{
			MethodName: "PatchConfig",
			Handler:    _ConfigService_PatchConfig_Handler,
		},
		{
			MethodName: "CreateConfig",
			Handler:    _ConfigService_CreateConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _ConfigService_DeleteConfig_Handler,
		},
		{
			MethodName: "DeleteConfigBulk",
			Handler:    _ConfigService_DeleteConfigBulk_Handler,
		},
		{
			MethodName: "ReadConfigByObjectId",
			Handler:    _ConfigService_ReadConfigByObjectId_Handler,
		},
		{
			MethodName: "CheckConfigStatus",
			Handler:    _ConfigService_CheckConfigStatus_Handler,
		},
		{
			MethodName: "ReadSystemObjects",
			Handler:    _ConfigService_ReadSystemObjects_Handler,
		},
		{
			MethodName: "ReadConfig",
			Handler:    _ConfigService_ReadConfig_Handler,
		},
		{
			MethodName: "SearchConfig",
			Handler:    _ConfigService_SearchConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config_service.proto",
}
